From dotslash at mail.berlios.de  Sun Oct  1 22:09:27 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Sun, 1 Oct 2006 22:09:27 +0200
Subject: [S3d-svn] r445 - in trunk: . apps/s3dfm
Message-ID: <200610012009.k91K9RbL009699@sheep.berlios.de>

Author: dotslash
Date: 2006-10-01 22:09:26 +0200 (Sun, 01 Oct 2006)
New Revision: 445

Modified:
   trunk/
   trunk/apps/s3dfm/Makefile.am
   trunk/apps/s3dfm/dialog.c
   trunk/apps/s3dfm/event.c
   trunk/apps/s3dfm/fly.c
   trunk/apps/s3dfm/fs.c
   trunk/apps/s3dfm/main.c
   trunk/apps/s3dfm/node.c
   trunk/apps/s3dfm/s3dfm.h
Log:
 r1080 at balthasar:  dotslash | 2006-10-01 22:09:19 +0200
 - nodes are descending now, but unstable
 - copy works + enabled
 - unlink works + enabled



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1077
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1080

Modified: trunk/apps/s3dfm/Makefile.am
===================================================================
--- trunk/apps/s3dfm/Makefile.am	2006-09-28 17:07:43 UTC (rev 444)
+++ trunk/apps/s3dfm/Makefile.am	2006-10-01 20:09:26 UTC (rev 445)
@@ -10,6 +10,6 @@
 	string.c fly.c focus.c
 
 s3dfm_CPPFLAGS=		-I${top_srcdir}/libs3d -I${top_srcdir}/libs3dw
-s3dfm_LDADD=		${top_builddir}/libs3d/libs3d.la ${top_builddir}/libs3dw/libs3dw.la
+s3dfm_LDADD=		${top_builddir}/libs3d/libs3d.la ${top_builddir}/libs3dw/libs3dw.la -lpthread
 
 

Modified: trunk/apps/s3dfm/dialog.c
===================================================================
--- trunk/apps/s3dfm/dialog.c	2006-09-28 17:07:43 UTC (rev 444)
+++ trunk/apps/s3dfm/dialog.c	2006-10-01 20:09:26 UTC (rev 445)
@@ -28,13 +28,18 @@
 #include <string.h> /* strlen() */
 #include <stdlib.h> /* realloc(),malloc() */
 #include <errno.h>  /* errno */
+#include <pthread.h> /* pthread_create() */
 #include <sys/stat.h> /* mkdir() */
 #include <sys/types.h> /* mkdir() */
 
 static s3dw_input	 *input;
 static filelist *fp;
+static char destdir[M_DIR];
+static t_node *destnode=NULL;
 
 extern int typeinput;
+int fs_lock=0;
+pthread_t filethread;
 
 
 void close_win(s3dw_widget *button)
@@ -56,8 +61,13 @@
 			s=malloc(M_DIR);
 			node_path(dir->sub[i],s);
 			fp->p[fp->n - 1].name=s;
-			fp->p[fp->n - 1].anode=fly_create_anode(dir->sub[i]);
+			if ((fs_lock==TYPE_COPY)||(fs_lock==TYPE_MOVE))
+				fp->p[fp->n - 1].anode=fly_create_anode(dir->sub[i]);
+			else
+				fp->p[fp->n - 1].anode=NULL;
 			fp->p[fp->n - 1].size=0; /*TODO: later */
+			fp->p[fp->n - 1].state=STATE_NONE;
+	
 		}
 	}
 	return(0);
@@ -71,6 +81,7 @@
 	s3dw_label_new(infwin,"F5 - Copy",1,3);
 	s3dw_label_new(infwin,"F6 - Move",1,4);
 	s3dw_label_new(infwin,"F7 - Create Directory",1,5);
+	s3dw_label_new(infwin,"F8 - Unlink",1,5);
 	s3dw_label_new(infwin,"R - Refresh",1,6);
 	s3dw_label_new(infwin,"I - Info",1,7);
 
@@ -98,7 +109,6 @@
 	button=s3dw_button_new(infwin,"OK",5,5);
 	button->onclick=close_win;
 	s3dw_show(S3DWIDGET(infwin));
-
 }
 void window_fs_errno(char *errmsg)
 {
@@ -124,24 +134,52 @@
 		fp=NULL;
 	}
 	typeinput=0;
+	fs_lock=TYPE_NONE;
 	s3dw_delete(button->parent); /* parent =surface. this means close containing window */
 }
+void *thread_start(void *ptr)
+{
+	switch (fs_lock)
+	{
+		case TYPE_COPY: 
+			printf("starting a copy process in the thread ... \n");
+			destnode=node_getbypath(destdir);
+			fs_fl_copy(fp,destdir);
+			printf("done\n");
+			break;
+		case TYPE_UNLINK:
+			printf("unlinking some files ... \n");
+			fs_fl_unlink(fp);
+			printf("done\n");
+			break;
+	}
+	fs_lock=TYPE_FINISHED;
+	return(NULL);
+	
+}
+/* now really copy ... */
+void window_fs(s3dw_widget *button)
+{
+	pthread_create( &filethread, NULL, thread_start, NULL);
+	s3dw_delete(button->parent); /* parent =surface. this means close containing window */
+}
 void window_copy(char *path)
 {
 	s3dw_surface *infwin;
 	s3dw_button  *okbutton,*abortbutton;
 	float l;
-	char destdir[M_DIR];
 
 	int i,m;
 
-	if (fp!=NULL) 	{	window_fs_another(); 	return; }
+	if (fs_lock) 	{	window_fs_another(); 	return; }
+	fs_lock=TYPE_COPY;
 	fp=malloc(sizeof(filelist));
 	fp->n=0;
 	fp->p=NULL;
 	get_selected(fp,&root);
 	printf("selected %d nodes\n",fp->n);
 	if (fp->n == 0)	{	window_fs_nothing();	free(fp); fp=NULL;return;	}
+	/* get the longest item on the list */
 	m=10;
 	for (i=0;i<fp->n;i++)
 	{
@@ -155,17 +193,54 @@
 	for (i=0;i<fp->n;i++)
 		s3dw_label_new(infwin,fp->p[i].name,3,2+i);
 	s3dw_label_new(infwin,"to:",1,fp->n+3);
-	node_path(focus,destdir);
+	node_path(node_getdir(focus),destdir);
 	s3dw_label_new(infwin,destdir,3,fp->n+4);
 
 	okbutton=s3dw_button_new(infwin,"OK",l/2-3,fp->n+5);
-	okbutton->onclick=window_fs_abort;
+	okbutton->onclick=window_fs;
 	abortbutton=s3dw_button_new(infwin,"abort",l/2,fp->n+5);
 	abortbutton->onclick=window_fs_abort;
 
 	s3dw_show(S3DWIDGET(infwin));
 
 }
+
+
+void window_unlink()
+{
+	s3dw_surface *infwin;
+	s3dw_button  *okbutton,*abortbutton;
+	float l;
+
+	int i,m;
+
+	if (fs_lock) 	{	window_fs_another(); 	return; }
+	fs_lock=TYPE_UNLINK;
+	fp=malloc(sizeof(filelist));
+	fp->n=0;
+	fp->p=NULL;
+	get_selected(fp,&root);
+	printf("selected %d nodes\n",fp->n);
+	if (fp->n == 0)	{	window_fs_nothing();	free(fp); fp=NULL;return;	}
+	/* get the longest item on the list */
+	m=10;
+	for (i=0;i<fp->n;i++)
+		if (strlen(fp->p[i].name)>m) m=strlen(fp->p[i].name);
+
+	l=(m+3)*0.7;
+	infwin=s3dw_surface_new("Unlink Window",l,fp->n+8);
+	s3dw_label_new(infwin,"Unlink: ",1,1);
+	for (i=0;i<fp->n;i++)
+		s3dw_label_new(infwin,fp->p[i].name,3,2+i);
+
+	okbutton=s3dw_button_new(infwin,"OK",l/2-3,fp->n+3);
+	okbutton->onclick=window_fs;
+	abortbutton=s3dw_button_new(infwin,"Abort",l/2,fp->n+3);
+	abortbutton->onclick=window_fs_abort;
+
+	s3dw_show(S3DWIDGET(infwin));
+
+}
 void window_fs_mkdir(s3dw_widget *button)
 {
 	char *dir;
@@ -185,6 +260,7 @@
 /*			parse_again(item);*/
 		}
 	}
+	fs_lock=0;
 	window_fs_abort(button); /* finish */
 
 }
@@ -194,7 +270,7 @@
 	s3dw_button  *okbutton,*abortbutton;
 	char string1[M_DIR];
 	float l;
-	if (fp!=NULL) {window_fs_another(); return; }
+	if (fs_lock) {window_fs_another(); return; }
 	snprintf(string1,M_DIR,"Create Directory in %s",path);
 	l=strlen(string1)*0.7;
 	infwin=s3dw_surface_new("Create Directory",l,8);
@@ -204,19 +280,19 @@
 	s3dw_focus(S3DWIDGET(input));
 	s3dw_focus(S3DWIDGET(infwin));
 	typeinput=1;
+	fs_lock=1;
 	okbutton=s3dw_button_new(infwin,"OK",l/2-3,5);
 	okbutton->onclick=window_fs_mkdir;
 	abortbutton=s3dw_button_new(infwin,"abort",l/2,5);
 	abortbutton->onclick=window_fs_abort;
 	s3dw_show(S3DWIDGET(infwin));
-
 }
 
 void window_move(char *path)
 {
 	s3dw_surface *infwin;
 	s3dw_button  *button;
-	if (fp!=NULL) {window_fs_another(); return; }
+	if (fs_lock) {window_fs_another(); return; }
 	infwin=s3dw_surface_new("Info Window",20,8);
 	s3dw_label_new(infwin,"Sorry, moving is not implemented yet.. :(",1,2);
 	button=s3dw_button_new(infwin,"Too bad",7,5);
@@ -252,3 +328,88 @@
 	/* of couse, show it */
 	s3dw_show(S3DWIDGET(infwin));
 }
+/* check if a file operation is finished and clean up */
+void window_fsani()
+{
+	int i;
+	t_node *node, dummy;
+	if (fs_lock!=TYPE_NONE)	{
+		/* get current position of our destination node */
+		if (destnode!=NULL)
+		{
+			node=destnode;
+			node_init(&dummy);
+			dummy.parent = node->parent;
+			dummy.scale = node->scale;
+			dummy.px = node->px;
+			dummy.py = node->py;
+			dummy.pz = node->pz;
+			dummy.type = node->type;
+			fly_set_absolute_position(&dummy);
+		} else {
+			dummy.px=0;
+			dummy.py=0;
+			dummy.pz=0;
+			dummy.scale=0.01;
+		}
+
+		for (i=0;i<fp->n;i++) {
+			if (fp->p[i].state==STATE_FINISHED)
+			{ /* we can go and clean up now. */
+				if (NULL!=(node=node_getbypath(fp->p[i].name)))
+				{
+					printf("[CLEANUP] for node %s (%s)\n",node->name,fp->p[i].name);
+					node->detached=0;
+					if (node->parent!=NULL)
+					{
+						parse_dir(node->parent);
+						switch (node->disp)
+						{
+							case D_ICON:	box_order_icons(node->parent);					break;
+							case D_DIR:		box_order_subdirs(node->parent);				break;
+						}
+					}
+				}
+				fp->p[i].state=STATE_CLEANED;
+			}
+			if (fp->p[i].state>STATE_NONE)
+			{
+				if (destnode!=NULL)
+				{
+					fp->p[i].anode->px=dummy.px;
+					fp->p[i].anode->py=dummy.py;
+					fp->p[i].anode->pz=dummy.pz;
+					ani_add(fp->p[i].anode);
+				}
+
+
+			}
+		}
+		if (fs_lock==TYPE_FINISHED)	{
+			if (fp!=NULL)
+			{
+				fl_del(fp);
+				fp=NULL;
+			}
+			typeinput=0;
+			fs_lock=TYPE_NONE;
+			if (destnode!=NULL)
+				if (destnode->disp==D_DIR) /* it usually is opened */
+				{
+					printf("reordering icons on destnode ...\n");
+					box_order_icons(destnode);	
+				}
+			destnode=NULL;
+
+		}
+		if (fs_err.active)
+		{
+			char errmsg[M_DIR];
+			/* TODO: draw a window, wait for input */
+			snprintf(errmsg,M_DIR,"Error \"%s\" on %s",fs_err.message,fs_err.file);
+			errno=fs_err.err;
+			window_fs_errno(errmsg);
+			fs_err.active=0;
+		}
+	}
+}

Modified: trunk/apps/s3dfm/event.c
===================================================================
--- trunk/apps/s3dfm/event.c	2006-09-28 17:07:43 UTC (rev 444)
+++ trunk/apps/s3dfm/event.c	2006-10-01 20:09:26 UTC (rev 445)
@@ -88,6 +88,14 @@
 		case S3DK_F7:
 				window_mkdir(path);
 				break;
+		case S3DK_F8:
+				window_unlink();
+				break;
+		case S3DK_F10:
+				/* some debugging stuff */
+				node_getbypath(path);
+				break;
+
 		case S3DK_UP:
 		case S3DK_LEFT:
 		case S3DK_RIGHT:

Modified: trunk/apps/s3dfm/fly.c
===================================================================
--- trunk/apps/s3dfm/fly.c	2006-09-28 17:07:43 UTC (rev 444)
+++ trunk/apps/s3dfm/fly.c	2006-10-01 20:09:26 UTC (rev 445)
@@ -51,7 +51,7 @@
 	node->py=work.py;
 	node->pz=work.pz;
 	node->scale=work.scale;
-	printf("node coordinates: %3.3f %3.3f %3.3f %3.3f\n",node->px,node->py,node->pz,node->scale);
+/*	printf("node coordinates: %3.3f %3.3f %3.3f %3.3f\n",node->px,node->py,node->pz,node->scale);*/
 	return(0);
 }
 /* create a copy of *node as an icon (block) which can be moved for animation ... */

Modified: trunk/apps/s3dfm/fs.c
===================================================================
--- trunk/apps/s3dfm/fs.c	2006-09-28 17:07:43 UTC (rev 444)
+++ trunk/apps/s3dfm/fs.c	2006-10-01 20:09:26 UTC (rev 445)
@@ -34,11 +34,11 @@
 #include <sys/stat.h>
 #include <unistd.h>
 
-#include <errno.h>
+#include <errno.h> /* errno */
 
+struct fs_error fs_err={0,0,NULL,NULL};
 
 
-
 /* generates the file list */
 filelist *fl_new(char *path)
 {
@@ -54,7 +54,7 @@
     if (n <= 2) /* . and .. is always included. */
 	{
 		if (n<0)
-	        perror("scandir");
+	        fs_error("fl_new():scandir()",path);
 	} else {
 		j=0;
 		fl->n=n-2 ; /* ignore . and .. */
@@ -73,7 +73,7 @@
 			free(namelist[i]);
 		}
 		if (j!=fl->n)
-		{
+		{ /* TODO: GUH! don't exit(-1) */
 			printf("assertion failed\n");
 			exit(-1);
 		}
@@ -177,16 +177,34 @@
 			link(source,dest);
 			break;
 		default:
-			printf("atomic copy ... from %s to %s\n", source, dest);
-			if (NULL==(fps=fopen(source,"r"))) return(-1);
-			if (NULL==(fpd=fopen(dest,"w"))) return(-1);
+			printf("fs_copy -> atomic copy\n");
+			printf("open source...");
+			if (NULL==(fps=fopen(source,"r"))) 
+			{
+				fs_error("fs_copy():fopen(source)",source);
+				return(-1);
+			}
+			printf("ok\n");
+			printf("open dest...");
+			if (NULL==(fpd=fopen(dest,"w"))) 
+			{
+				fs_error("fs_copy():fopen(source)",source);
+				return(-1);
+			}
+			printf("ok\n");
 			/* TODO: overwrite protection etc */
+			printf("copy ...");
 		
 			while (!feof(fps))
 			{
+				printf(".");
+				errno=0;
 				n=fread(buf,1,1024,fps);
+				if (errno)	fs_error("fs_copy():fread(source)",source);
 				fwrite(buf,1,n,fpd);
+				if (errno)	fs_error("fs_copy():fwrite(source)",source);
 			}
+			printf("ok\n");
 			fclose(fps);
 			fclose(fpd);
 
@@ -203,6 +221,7 @@
 	r=0;
 	for (i=0;i<fl->n;i++)
 	{
+		fl->p[i].state=STATE_INUSE;
 		bname=basename(fl->p[i].name);
 		sdest=malloc(strlen(dest)+strlen(bname)+2);
 
@@ -212,6 +231,7 @@
 		r|=fs_copy(fl->p[i].name,sdest);
 
 		free(sdest);
+		fl->p[i].state=STATE_FINISHED;
 	}
 
 	return(r);
@@ -235,14 +255,14 @@
 			printf("removing %s\n",dest);
 			if (rmdir(dest)==-1)
 			{
-				perror("fs_fl_unlink(): rmdir()");
+				fs_error("fs_fl_unlink(): rmdir()",dest);
 				return(-1);
 			}
 		}
 	} else {
 		if (unlink(dest)==-1)
 		{
-			perror("fs_fl_unlink(): unlink()");
+			fs_error("fs_fl_unlink(): unlink()",dest);
 			return(-1);
 		}
 	}
@@ -255,8 +275,10 @@
 	r=0;
 	for (i=0;i<fl->n;i++)
 	{
+		fl->p[i].state=STATE_INUSE;
 		printf("-> atomic unlink %s\n",fl->p[i].name);
 		r|=fs_unlink(fl->p[i].name);
+		fl->p[i].state=STATE_FINISHED;
 	}
 	return(r);
 
@@ -272,7 +294,7 @@
 				fs_unlink(source);
 				break;
 			default: 
-				perror("fs_move()");
+				fs_error("fs_move()",dest);
 				return(-1); /* can't help it */
 			
 		}
@@ -290,6 +312,7 @@
 	r=0;
 	for (i=0;i<fl->n;i++)
 	{
+		fl->p[i].state=STATE_INUSE;
 		bname=basename(fl->p[i].name);
 		sdest=malloc(strlen(dest)+strlen(bname)+2);
 
@@ -299,6 +322,7 @@
 		r|=fs_move(fl->p[i].name,sdest);
 
 		free(sdest);
+		fl->p[i].state=STATE_FINISHED;
 	}
 
 	return(r);
@@ -306,4 +330,14 @@
 	return(0);
 }
 
-
+/* write an error and wait for a reaction */
+int fs_error(char *message, char *file)
+{
+	fs_err.err=errno;
+	fs_err.message=message;
+	fs_err.file=file;
+	fs_err.active=1;
+	printf("[FS ERROR]: %s %s %s",message,file,strerror(errno));
+	while (fs_err.active); /* until situation clear, wait */
+	return(0);
+}

Modified: trunk/apps/s3dfm/main.c
===================================================================
--- trunk/apps/s3dfm/main.c	2006-09-28 17:07:43 UTC (rev 444)
+++ trunk/apps/s3dfm/main.c	2006-10-01 20:09:26 UTC (rev 445)
@@ -32,6 +32,7 @@
 {
 	ani_mate();
 	s3dw_ani_mate();
+	window_fsani();
 	nanosleep(&t,NULL); 
 }
 int main (int argc, char **argv)

Modified: trunk/apps/s3dfm/node.c
===================================================================
--- trunk/apps/s3dfm/node.c	2006-09-28 17:07:43 UTC (rev 444)
+++ trunk/apps/s3dfm/node.c	2006-10-01 20:09:26 UTC (rev 445)
@@ -36,17 +36,23 @@
 	if (path==NULL) return NULL;
 	if (path[0]=='/')
 	{
-		strncpy(p,path,M_DIR);
+		strncpy(p,path,M_DIR-1);
 		s=p+1;
 		cur=&root;
 	} else return NULL; /* TODO: also process local paths. right now, we are to lazy */
+	p[strlen(p)+1]=0; /* extra terminating 0, to be sure */
 	printf("processing rest of string %s\n",s);
 	match=s;
-	while ((s=index(s,'/'))!=NULL) { /* while we have slashes inside */
-		s[0]=0; /* mark the slash with space */
-		s++;	/* move to the next */
+	while (*s!=0) { /* while search string is not empty */
+		if ((s=index(s,'/'))!=NULL)
+		{
+			s[0]=0; /* mark the slash with space */
+			s++;	/* move to the next */
+		} else {
+			s=match+strlen(match); /* select terminating 0 */
+		}
 		/* parse ... */
-		printf("looking for a match for %s\n",match);
+		printf("looking for a match for %s, rest is %s\n",match,s);
 		for (i=0;i<cur->n_sub;i++)
 			if (0==strcmp(cur->sub[i]->name,match))
 			{ /* found !! */

Modified: trunk/apps/s3dfm/s3dfm.h
===================================================================
--- trunk/apps/s3dfm/s3dfm.h	2006-09-28 17:07:43 UTC (rev 444)
+++ trunk/apps/s3dfm/s3dfm.h	2006-10-01 20:09:26 UTC (rev 445)
@@ -71,13 +71,23 @@
 };
 struct _t_file {
 	char *name;
-	int size;
+	int size,state;
 	struct _t_node *anode;
 };
+enum {
+	STATE_NONE, 		/* nothing happned */
+	STATE_INUSE, 		/* currently processing */
+	STATE_FINISHED, 	/* file operation finished */
+	STATE_CLEANED		/* cleaned (e.g. reordered the item */
+};
 struct _filelist {
 	struct _t_file *p;
 	int n;
 };
+struct fs_error {
+	int err,active;
+	char *message, *file;
+};
 typedef struct _filelist filelist;
 typedef struct _t_node   t_node;
 typedef struct _t_file	 t_file;
@@ -85,7 +95,18 @@
 
 extern t_node root,cam; /* some global objects */
 extern t_node *focus;	/* the focused object */
+extern struct fs_error fs_err;
 
+enum {
+	TYPE_NONE,
+	TYPE_COPY,
+	TYPE_MOVE,
+	TYPE_UNLINK,
+	TYPE_FINISHED
+};
+
+extern int fs_lock;
+
 /* animation.c */
 int 		 ani_onstack(t_node *f);
 void 		 ani_add(t_node *f);
@@ -110,6 +131,7 @@
 /* dialog.c */
 void		 close_win(s3dw_widget *button);
 void		 window_help();
+void 		 window_fs(s3dw_widget *button);
 void		 window_fs_another();
 void		 window_fs_nothing();
 void		 window_fs_errno(char *errmsg);
@@ -119,6 +141,8 @@
 void		 window_mkdir(char *path);
 void		 window_move(char *path);
 void		 window_info(char *path);
+void		 window_fsani();
+void 		 window_unlink();
 /* event.c */
 int 		 event_click(struct s3d_evt *evt);
 int			 event_key(struct s3d_evt *evt);
@@ -138,6 +162,7 @@
 int			 fs_copy(char *source, char *dest);
 int			 fs_move(char *source, char *dest);
 int			 fs_unlink(char *dest);
+int 		 fs_error(char *message, char *file);
 /* icon.c */
 int 		 icon_draw(t_node *dir);
 int 		 icon_undisplay(t_node *dir);



From dotslash at mail.berlios.de  Sun Oct 15 20:14:50 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Sun, 15 Oct 2006 20:14:50 +0200
Subject: [S3d-svn] r446 - in trunk: . apps/dot_mcp apps/olsrs3d apps/s3dfm
	libs3d libs3dw server
Message-ID: <200610151814.k9FIEobo027871@sheep.berlios.de>

Author: dotslash
Date: 2006-10-15 20:14:48 +0200 (Sun, 15 Oct 2006)
New Revision: 446

Modified:
   trunk/
   trunk/INSTALL
   trunk/TODO
   trunk/apps/dot_mcp/main.c
   trunk/apps/olsrs3d/main.c
   trunk/apps/s3dfm/box.c
   trunk/apps/s3dfm/event.c
   trunk/apps/s3dfm/icon.c
   trunk/apps/s3dfm/s3dfm.h
   trunk/configure.ac
   trunk/libs3d/callback.c
   trunk/libs3d/event.c
   trunk/libs3d/freetype.c
   trunk/libs3d/modelread.c
   trunk/libs3d/network.c
   trunk/libs3d/proto_in.c
   trunk/libs3d/proto_out.c
   trunk/libs3d/s3d.h
   trunk/libs3d/s3dlib.h
   trunk/libs3d/shm.c
   trunk/libs3d/tcp.c
   trunk/libs3dw/button.c
   trunk/libs3dw/event.c
   trunk/libs3dw/input.c
   trunk/libs3dw/label.c
   trunk/libs3dw/root.c
   trunk/libs3dw/s3dw.h
   trunk/libs3dw/s3dw_int.h
   trunk/libs3dw/surface.c
   trunk/libs3dw/widget.c
   trunk/server/Makefile.am
   trunk/server/global.h
   trunk/server/mcp.c
   trunk/server/object.c
   trunk/server/shm_ringbuf.c
   trunk/server/user.c
   trunk/server/user_glut.c
Log:
 r1084 at kero:  dotslash | 2006-10-15 20:12:22 +0200
 - "port" to amd64 (proper types from stdint.h)



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1080
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1084

Modified: trunk/INSTALL
===================================================================
--- trunk/INSTALL	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/INSTALL	2006-10-15 18:14:48 UTC (rev 446)
@@ -29,7 +29,7 @@
 
 * automake 1.9 (1.4 is too old!)
 * autoconf 2.59 
-* libtool
+* libtool 1.5
 
 are available and installed into a directory listed in the $PATH
 environment variable.

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/TODO	2006-10-15 18:14:48 UTC (rev 446)
@@ -6,8 +6,9 @@
 	* OBJECTPATH for finding the object?
 	* ./configure: line 23422: HAVE_PTHREAD: command not found < huh?
 	* ./configure: line 22373: MDL_HAVE_OPENGL: command not found
-
-	* Apple todo: won't find -lX11 (for s3d_x11gate) while compiling
+	* Build the documentation (to html at least) if the user has
+	  docbook stuff installed.
+	* hand down DEBUG-flag to libg3d if available
 	* "-Wall -pedantic" default in CFLAGS? (if possible)
 	* --enable-debug not honored when CFLAGS is set?
 	* We should perhaps check for the correct versions of
@@ -15,7 +16,4 @@
 	  At the time of writing, supported are:
 	   automake 1.9, autoconf 2.59, libtool 1.5
 	* verify the autogenerated s3drc.
-Documentation:
-	* Build the documentation (to html at least) if the user has
-	  docbook stuff installed.
-
+	* Apple todo: won't find -lX11 (for s3d_x11gate) while compiling

Modified: trunk/apps/dot_mcp/main.c
===================================================================
--- trunk/apps/dot_mcp/main.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/apps/dot_mcp/main.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -25,6 +25,7 @@
 #include <s3d.h>
 #include <s3d_keysym.h>
 #include "dot_mcp.h"
+#include <stdint.h>	 /*  uint32_t */
 #include <unistd.h>  /*  sleep() */
 #include <stdlib.h>  /*  free(), malloc() */
 #include <string.h>  /*  strncpy() */
@@ -76,7 +77,7 @@
 	float ia,ja,iap,jap;
 	float v[SIDES*RINGS*3];
 	float n[SIDES*12]; /* normals */
-	unsigned long l[SIDES*RINGS*6];
+	uint32_t l[SIDES*RINGS*6];
 	o=s3d_new_object();
 	R=100; /* outer radius */
 	r=100; /* inner radius */

Modified: trunk/apps/olsrs3d/main.c
===================================================================
--- trunk/apps/olsrs3d/main.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/apps/olsrs3d/main.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -35,6 +35,7 @@
 #include <math.h>		 /* sqrt() */
 #include <getopt.h>		 /* getopt() */
 #include <stdlib.h>		 /* exit() */
+#include <stdint.h>		 /* uintXX_t */
 #include "olsrs3d.h"
 #include "search.h"
 
@@ -905,7 +906,7 @@
 		return;
 	}*/
 
-	oid=(int)*((unsigned long *)evt->buf);
+	oid=(int)*((uint32_t *)evt->buf);
 
 
 	if ( ( get_search_status() != FOLLOW ) && ( Last_Click_Oid == oid ) && ( Last_Click_Time + 250 > get_time() ) ) {

Modified: trunk/apps/s3dfm/box.c
===================================================================
--- trunk/apps/s3dfm/box.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/apps/s3dfm/box.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -133,7 +133,7 @@
 			  0.6, BHH    , 1.0,
 			  0.6, BHH-0.2, 1.0
 			 };
-	unsigned long bar_poly[]={
+	uint32_t bar_poly[]={
 		4,5,6,0,
 		4,6,7,0,
 		3,7,4,0,
@@ -197,7 +197,7 @@
 						0.5,0.3,0.3
 					);
 	s3d_push_vertices(dir->objs.close,xvertices,sizeof(xvertices)/(3*sizeof(float)));
-	s3d_push_polygons(dir->objs.close,bar_poly,sizeof(bar_poly)/(sizeof(unsigned long)*4));
+	s3d_push_polygons(dir->objs.close,bar_poly,sizeof(bar_poly)/(sizeof(uint32_t)*4));
 	s3d_link(dir->objs.close,dir->oid);
 	
 	dir->objs.select=s3d_new_object();
@@ -207,7 +207,7 @@
 						0.1,0.1,0.3
 					);
 	s3d_push_vertices(dir->objs.select,svertices,sizeof(svertices)/(3*sizeof(float)));
-	s3d_push_polygons(dir->objs.select,bar_poly,sizeof(bar_poly)/(sizeof(unsigned long)*4));
+	s3d_push_polygons(dir->objs.select,bar_poly,sizeof(bar_poly)/(sizeof(uint32_t)*4));
 	s3d_link(dir->objs.select,dir->oid);
 	
 	/* draw the title string */
@@ -219,7 +219,7 @@
 						0.3,0.3,0.3
 					);
 	s3d_push_vertices(dir->objs.title,tvertices,sizeof(tvertices)/(3*sizeof(float)));
-	s3d_push_polygons(dir->objs.title,bar_poly,sizeof(bar_poly)/(sizeof(unsigned long)*4));
+	s3d_push_polygons(dir->objs.title,bar_poly,sizeof(bar_poly)/(sizeof(uint32_t)*4));
 	s3d_link(dir->objs.title,dir->oid);
 	dir->objs.titlestr=s3d_draw_string(dots_at_start(fullname,30,dir),&len);
 	if (len>(1.6*5.0))		s3d_scale(dir->objs.titlestr,1.6/len);

Modified: trunk/apps/s3dfm/event.c
===================================================================
--- trunk/apps/s3dfm/event.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/apps/s3dfm/event.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -124,7 +124,7 @@
 	int oid;
 	t_node *f;
 	s3dw_handle_click(evt);
-	oid=(int)*((unsigned long *)evt->buf);
+	oid=(int)*((u_int32_t *)evt->buf);
 	if (NULL!=(f=node_getbyoid(&root,oid)))
 	{
 		if (f->objs.close==oid)

Modified: trunk/apps/s3dfm/icon.c
===================================================================
--- trunk/apps/s3dfm/icon.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/apps/s3dfm/icon.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -60,7 +60,7 @@
 						-1, 0.5,-1,
 						 1, 0.5,-1,
 						 1,-0.5,-1};
-	unsigned long polys[]={
+	uint32_t polys[]={
 				1,3,0,0,				2,3,1,0,
 				5,6,2,0,				1,5,2,0,
 				2,6,7,0,				2,7,3,0,

Modified: trunk/apps/s3dfm/s3dfm.h
===================================================================
--- trunk/apps/s3dfm/s3dfm.h	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/apps/s3dfm/s3dfm.h	2006-10-15 18:14:48 UTC (rev 446)
@@ -24,6 +24,7 @@
 
 #include <s3d.h>
 #include <s3dw.h>
+#include <stdlib.h>		/* uintXX_t */
 #define T_DUNO		0
 #define T_FOLDER	1
 #define T_TYPENUM	2

Modified: trunk/configure.ac
===================================================================
--- trunk/configure.ac	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/configure.ac	2006-10-15 18:14:48 UTC (rev 446)
@@ -44,7 +44,7 @@
 AC_CHECK_FUNCS([select socket strerror strtod strtol shmget signal]) # XXX: the previous test should have established the existence of signal() already. just be safe here.
 
 WARNS=""
-CFLAGS="$CFLAGS $X_CFLAGS"
+CFLAGS="$CFLAGS $X_CFLAGS -Wall -pedantic"
 LIBS="$X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS $LIBS"
 
 ###
@@ -55,7 +55,7 @@
 # XXX: switch default and help string for releases.
 AC_ARG_ENABLE([devel], AS_HELP_STRING([--disable-debug],[Disables debugging flags]), [enable_debug=$enableval], [enable_debug=yes])
 if test x$enable_debug = xyes; then
-	DEVEL_CFLAGS="$DEVEL_CFLAGS -Wall -pedantic -ansi -ggdb"
+	DEVEL_CFLAGS="$DEVEL_CFLAGS -ggdb -DDEBUG=LOW"
 	DEVEL_LDFLAGS="$DEVEL_LDFLAGS -ggdb"
 fi
 
@@ -65,8 +65,10 @@
 	DEVEL_LDFLAGS="$DEVEL_LDFLAGS -pg"
 fi
 
-AC_SUBST(DEVEL_CFLAGS)
-AC_SUBST(DEVEL_LDFLAGS)
+CFLAGS="$CFLAGS $DEVEL_CFLAGS"
+LDFLAGS="$LDFLAGS $DEVEL_LDFLAGS"
+dnl AC_SUBST(DEVEL_CFLAGS)
+dnl AC_SUBST(DEVEL_LDFLAGS)
 dnl ##################################### SERVER #######################################
 AC_CHECK_LIBM
 AC_SUBST(LIBM)

Modified: trunk/libs3d/callback.c
===================================================================
--- trunk/libs3d/callback.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/callback.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -55,22 +55,22 @@
 	/* do plain nothing */
 }
 /*  sets a callback */
-void s3d_set_callback(unsigned char event, s3d_cb func)
+void s3d_set_callback(uint8_t event, s3d_cb func)
 {
 	s3d_cb_list[(int)event]=func;
 	s3d_process_stack();
 }
 /*  clears a callback, same as s3d_set_callback(event, (s3d_cb) NULL); */
-void s3d_clear_callback(unsigned char event)
+void s3d_clear_callback(uint8_t event)
 {
 	s3d_cb_list[(int)event]=NULL;
 }
 /* ignores an event ... */
-void s3d_ignore_callback(unsigned char event)
+void s3d_ignore_callback(uint8_t event)
 {
 	s3d_set_callback(event,_s3d_ignore);
 }
-s3d_cb s3d_get_callback(unsigned char event)
+s3d_cb s3d_get_callback(uint8_t event)
 {
 	return(s3d_cb_list[(int)event]);
 }

Modified: trunk/libs3d/event.c
===================================================================
--- trunk/libs3d/event.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/event.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -72,7 +72,7 @@
 		s3d_stack=s3d_stack->next;
 	return ret;
 }
-struct s3d_evt *s3d_find_event(unsigned char event)
+struct s3d_evt *s3d_find_event(u_int8_t event)
 {
 	struct s3d_evt *p;
 	p=s3d_stack;

Modified: trunk/libs3d/freetype.c
===================================================================
--- trunk/libs3d/freetype.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/freetype.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -87,7 +87,7 @@
 		return(-1);
 	}
 	face_init=0;
-	error= FT_New_Memory_Face(library,(unsigned char *)memory_font,memory_font_size,0,&face);
+	error= FT_New_Memory_Face(library,(uint8_t *)memory_font,memory_font_size,0,&face);
 	if (error)
 	{
 		errds(VHIGH,"s3d_ft_load_font():FT_New_Memory_Face","can't load font : (%d) %s",ft_errors[error].err_code,ft_errors[error].err_msg);
@@ -119,7 +119,7 @@
 
 /* renders a character with seidels algorithm and stores it in the tess_buf for later
  * usage */
-int _s3d_add_tessbuf(unsigned short a)
+int _s3d_add_tessbuf(uint16_t a)
 {
 	float norm,ar,xa,ya;
 	int i,j,k,c,n,start,outl,s,e;
@@ -255,7 +255,7 @@
 			ncntr[c]=cntr[perm[c]];
 		}
 		n=0;
-		tess_buf[a].pbuf=malloc(sizeof(unsigned long)*4*(face->glyph->outline.n_points+2*face->glyph->outline.n_contours)); 
+		tess_buf[a].pbuf=malloc(sizeof(uint32_t)*4*(face->glyph->outline.n_points+2*face->glyph->outline.n_contours)); 
 		k=0;
 		for (c=ncontours-1;c>=0;c--)
 		{
@@ -281,17 +281,17 @@
 	return(0);
 }
 
-int _s3d_draw_tessbuf(int oid,unsigned short a,int *voff, float *xoff)
+int _s3d_draw_tessbuf(int oid,uint16_t a,int *voff, float *xoff)
 {
 	float *vbuf;
-	unsigned long *pbuf;
+	uint32_t *pbuf;
 	int i;
 	if (!(tess_buf[a].vbuf && tess_buf[a].pbuf))
 		_s3d_add_tessbuf(a);
 	vbuf=malloc(sizeof(float)*3*tess_buf[a].vn);
-	pbuf=malloc(sizeof(unsigned long)*4*tess_buf[a].pn);
+	pbuf=malloc(sizeof(uint32_t)*4*tess_buf[a].pn);
 	memcpy(vbuf,tess_buf[a].vbuf,sizeof(float)*3*tess_buf[a].vn);
-	memcpy(pbuf,tess_buf[a].pbuf,sizeof(unsigned long)*4*tess_buf[a].pn);
+	memcpy(pbuf,tess_buf[a].pbuf,sizeof(uint32_t)*4*tess_buf[a].pn);
 	 /*  prepare the buffs ... */
 /* 	s3dprintf(LOW,"drawing [%c] (%d vertices, %d polys",a,tess_buf[a].vn,tess_buf[a].pn); */
 	for (i=0;i<tess_buf[a].vn;i++)
@@ -383,7 +383,7 @@
 	voff=0; 
 	len=strlen(str);
 	for (i=0;i<len; i++)
-		_s3d_draw_tessbuf(f_oid,(unsigned char )str[i],&voff,&xoff);
+		_s3d_draw_tessbuf(f_oid,(uint8_t )str[i],&voff,&xoff);
 	 /*  s3d_ft_quit(); */
 	if (xlen!=NULL) *xlen=xoff;
 	return(f_oid);

Modified: trunk/libs3d/modelread.c
===================================================================
--- trunk/libs3d/modelread.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/modelread.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -128,10 +128,10 @@
 	struct material2texture *mat2tex;
 	int						 i, j, k, material_count, texture_count, voff,obj_id;
 #define 					PMAX	100
-	unsigned long 			 polybuf[PMAX * 4],npoly,oldflags;
+	uint32_t 			 polybuf[PMAX * 4],npoly,oldflags;
 	float					 normalbuf[PMAX * 9],texcoordbuf[PMAX * 6];
 	float 					 swaph;				/* swap helper */
-	unsigned char 			*s3d_pixeldata = NULL;
+	uint8_t 			*s3d_pixeldata = NULL;
 
 	context = g3d_context_new();
 	obj_id=-1;
@@ -181,7 +181,7 @@
 						/* reorder pixeldata - s3d wants rgba */
 						if ( s3d_pixeldata != NULL ) free( s3d_pixeldata );
 
-						s3d_pixeldata = malloc( sizeof( unsigned char ) * face->tex_image->width * face->tex_image->height * 32 );
+						s3d_pixeldata = malloc( sizeof( uint8_t ) * face->tex_image->width * face->tex_image->height * 32 );
 
 						if ( s3d_pixeldata == NULL ) {
 							errs("model_load()", "Sorry - you ran out of memory !\n" );

Modified: trunk/libs3d/network.c
===================================================================
--- trunk/libs3d/network.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/network.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -37,14 +37,14 @@
 static int _s3d_net_receive();
 #endif
 
-int net_send(unsigned char opcode, char *buf, unsigned short length)
+int net_send(u_int8_t opcode, char *buf, u_int16_t length)
 {
 	char *ptr;
 /* 	char *buff; */
-	char buff[65539];  /*  unsigned short really shouldn't be bigger ;) */
+	char buff[65539];  /*  u_int16_t really shouldn't be bigger ;) */
 	*(buff)=opcode; 
 	ptr=buff+1;
-	*((unsigned short *) ptr)=htons(length);
+	*((u_int16_t *) ptr)=htons(length);
 	if (length!=0)
 		memcpy(buff+3,buf,length);
 	switch (con_type)

Modified: trunk/libs3d/proto_in.c
===================================================================
--- trunk/libs3d/proto_in.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/proto_in.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -111,10 +111,10 @@
 		case S3D_P_MCP_OBJECT:
 			if (length==sizeof(struct mcp_object))
 			{
-/* 				oid=htonl(*((unsigned long *)buf)); */
+/* 				oid=htonl(*((uint32_t *)buf)); */
 				if (NULL!=(s3devt=malloc(sizeof(struct s3d_evt))))
 				{
-/* 					*((unsigned long *)buf)=oid;  / *  reuse buffer ... * / */
+/* 					*((uint32_t *)buf)=oid;  / *  reuse buffer ... * / */
 					s3devt->event=S3D_MCP_OBJECT;
 					s3devt->length=length;
 					mo=(struct mcp_object *)buf;
@@ -131,10 +131,10 @@
 		case S3D_P_S_OINFO:
 			if (length==sizeof(struct s3d_obj_info))
 			{
-/* 				oid=htonl(*((unsigned long *)buf)); */
+/* 				oid=htonl(*((uint32_t *)buf)); */
 				if (NULL!=(s3devt=malloc(sizeof(struct s3d_evt))))
 				{
-/* 					*((unsigned long *)buf)=oid;  / *  reuse buffer ... * / */
+/* 					*((uint32_t *)buf)=oid;  / *  reuse buffer ... * / */
 					s3devt->event=S3D_EVENT_OBJ_INFO;
 					s3devt->length=length;
 					oi=(struct s3d_obj_info *)buf;

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/proto_out.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -31,7 +31,7 @@
 #include <unistd.h>		 /*  select() */
 #include <stdlib.h>		 /*  getenv(),atoi(), malloc() */
 #ifdef WIN32
-	#define uint32_t unsigned long  /*  sohn */
+	#define uint32_t uint32_t  /*  sohn */
 #else
 	#include <netdb.h>		 /*  gethostbyname()  */
 #endif
@@ -104,7 +104,7 @@
 }
 /*  like vertex add, but you can add a lot of vertices with this. */
 /*  it's to be used for file readers or fast coders :) */
-int s3d_push_vertices(int object, float *vbuf, unsigned short n)
+int s3d_push_vertices(int object, float *vbuf, uint16_t n)
 {
 	char				buf[MF_LEN+4],*ptr;
 	int					f,i,len=n*4*3;
@@ -189,7 +189,7 @@
 	return(0);  /*  nothing yet */
 }
 /*  push a material array (with alpha information!) */
-int s3d_push_materials_a(int object, float *mbuf, unsigned short n)
+int s3d_push_materials_a(int object, float *mbuf, uint16_t n)
 {
 	char				buf[MF_LEN+4],*ptr;
 	int					f,i,len=n*4*12;
@@ -213,7 +213,7 @@
 /* 	free(buf); */
 	return(0);
 }
-int s3d_push_polygon(int object, unsigned long v1, unsigned long v2, unsigned long v3, unsigned long material)
+int s3d_push_polygon(int object, uint32_t v1, uint32_t v2, uint32_t v3, uint32_t material)
 {
 	char				buf[4+4*4],*ptr;
 	int					len=4+4*4;
@@ -227,7 +227,7 @@
 	net_send(S3D_P_C_PUSH_POLY,buf,len);
 	return(0);
 }
-int s3d_push_line(int object, unsigned long v1, unsigned long v2, unsigned long material)
+int s3d_push_line(int object, uint32_t v1, uint32_t v2, uint32_t material)
 {
 	char				buf[4+3*4],*ptr;
 	int					len=4+3*4;
@@ -243,10 +243,10 @@
 
 /*  this is the polygon array version */
 /*  assumes to have a list of polys which consists of v1,v2,v3,material */
-int s3d_push_polygons(int object, unsigned long *pbuf, unsigned short n)
+int s3d_push_polygons(int object, uint32_t *pbuf, uint16_t n)
 {
-	unsigned long		buf[(MF_LEN+4)/4];
-	unsigned long		*s,*d;
+	uint32_t		buf[(MF_LEN+4)/4];
+	uint32_t		*s,*d;
 	int					f,i,j,len=n*4*4;
 	int					flen,stepl;
 	if (n<1)
@@ -268,10 +268,10 @@
 	}
 	return(0);
 }
-int s3d_push_lines(int object, unsigned long *lbuf, unsigned short n)
+int s3d_push_lines(int object, uint32_t *lbuf, uint16_t n)
 {
-	unsigned long		buf[(MF_LEN+4)/4];
-	unsigned long		*s,*d;
+	uint32_t		buf[(MF_LEN+4)/4];
+	uint32_t		*s,*d;
 	int					f,i,j,len=n*4*3;
 	int					flen,stepl;
 	if (n<1)
@@ -295,7 +295,7 @@
 	}
 	return(0);
 }
-int s3d_push_texture(int object, unsigned short w, unsigned short h)
+int s3d_push_texture(int object, uint16_t w, uint16_t h)
 {
 	char				buf[4+2*2],*ptr;
 	int					len=4+2*2;
@@ -307,10 +307,10 @@
 	net_send(S3D_P_C_PUSH_TEX,buf,len);
 	return(0);
 }
-int s3d_push_textures(int object, unsigned short *tbuf, unsigned short n)
+int s3d_push_textures(int object, uint16_t *tbuf, uint16_t n)
 {
-	unsigned short		buf[(MF_LEN+4)/2];
-	unsigned short		*s,*d;
+	uint16_t		buf[(MF_LEN+4)/2];
+	uint16_t		*s,*d;
 
 	int					f,i,j,len=n*2*2;
 	int					flen,stepl;
@@ -319,7 +319,7 @@
 	stepl=((int)((MF_LEN-4)/(2*2)))*(2*2);
 	f=len/(MF_LEN-4)+1;  /*  how many fragments? */
 
-	*((unsigned long *)buf)=htonl(object);
+	*((uint32_t *)buf)=htonl(object);
 	d=buf+2;
 
 	for (i=0;i<f;i++)
@@ -337,7 +337,7 @@
 /*  popping functions  */
 
 /*  delete n vertices */
-int s3d_pop_vertex(int object, unsigned long n)
+int s3d_pop_vertex(int object, uint32_t n)
 {
 	uint32_t		buf[2];
 	buf[0]=htonl(object);
@@ -347,7 +347,7 @@
 	
 }
 /*  delete n materials */
-int s3d_pop_material(int object, unsigned long n)
+int s3d_pop_material(int object, uint32_t n)
 {
 	uint32_t		buf[2];
 	buf[0]=htonl(object);
@@ -357,7 +357,7 @@
 	
 }
 /*  delete n polygons */
-int s3d_pop_polygon(int object, unsigned long n)
+int s3d_pop_polygon(int object, uint32_t n)
 {
 	uint32_t		buf[2];
 	buf[0]=htonl(object);
@@ -367,7 +367,7 @@
 	
 }
 /*  delete n lines */
-int s3d_pop_line(int object, unsigned long n)
+int s3d_pop_line(int object, uint32_t n)
 {
 	uint32_t		buf[2];
 	buf[0]=htonl(object);
@@ -377,7 +377,7 @@
 	
 }
 /*  delete n polygons */
-int s3d_pop_texture(int object, unsigned long n)
+int s3d_pop_texture(int object, uint32_t n)
 {
 	uint32_t		buf[2];
 	buf[0]=htonl(object);
@@ -446,7 +446,7 @@
 	net_send(S3D_P_C_PEP_MAT,buf,len);
 	return(0);  /*  nothing yet */
 }
-int s3d_pep_materials_a(int object, float *mbuf, unsigned short n)
+int s3d_pep_materials_a(int object, float *mbuf, uint16_t n)
 {
 	char				buf[MF_LEN+4];
 	if ((n*12*sizeof(float)+4)>MF_LEN)
@@ -461,9 +461,9 @@
 }
 
 /*  adds normal information to the last n polygons. */
-int s3d_pep_polygon_normals(int object, float *nbuf,unsigned short n)
+int s3d_pep_polygon_normals(int object, float *nbuf,uint16_t n)
 {
-	unsigned char buf[MF_LEN+4];
+	uint8_t buf[MF_LEN+4];
 	if ((n*9*sizeof(float)+4)>MF_LEN) 
 	{
 		errds(MED,"s3d_pep_polygon_normals()","too much data");
@@ -476,9 +476,9 @@
 	
 }
 /*  adds normal information to the last n line. */
-int s3d_pep_line_normals(int object, float *nbuf,unsigned short n)
+int s3d_pep_line_normals(int object, float *nbuf,uint16_t n)
 {
-	unsigned char buf[MF_LEN+4];
+	uint8_t buf[MF_LEN+4];
 	if ((n*9*sizeof(float)+4)>MF_LEN) 
 	{
 		errds(MED,"s3d_pep_line_normals()","too much data");
@@ -521,9 +521,9 @@
 
 
 /*  replaces the last n lines. */
-int s3d_pep_lines(int object, unsigned long *lbuf,unsigned short n)
+int s3d_pep_lines(int object, uint32_t *lbuf,uint16_t n)
 {
-	unsigned long 	buf[MF_LEN+4];
+	uint32_t 	buf[MF_LEN+4];
 	int				i;
 	if ((n*3*4+4)>MF_LEN) 
 	{
@@ -538,9 +538,9 @@
 	
 }
 /*  replaces the last n vertices. */
-int s3d_pep_vertices(int object, float *vbuf,unsigned short n)
+int s3d_pep_vertices(int object, float *vbuf,uint16_t n)
 {
-	unsigned char buf[MF_LEN+4];
+	uint8_t buf[MF_LEN+4];
 	if ((n*3*sizeof(float)+4)>MF_LEN) 
 	{
 		errds(MED,"s3d_pep_vertices()","too much data");
@@ -568,7 +568,7 @@
 	return(0);
 }
 /*  adds texture coordinates to the last n polygons. */
-int s3d_pep_polygon_tex_coords(int object, float *tbuf,unsigned short n)
+int s3d_pep_polygon_tex_coords(int object, float *tbuf,uint16_t n)
 {
 	char buf[MF_LEN+4];
 	if ((n*6*sizeof(float))>MF_LEN) 
@@ -582,7 +582,7 @@
 	return(0);
 }
 /*  adds normal information to the last n polygons. */
-int s3d_load_polygon_normals(int object, float *nbuf,unsigned long start, unsigned short n)
+int s3d_load_polygon_normals(int object, float *nbuf,uint32_t start, uint16_t n)
 {
 	char				buf[MF_LEN+4],*ptr;
 	int					f,i,len=n*9*4;
@@ -609,7 +609,7 @@
 	return(0);
 }
 /*  adds normal information to the last n polygons. */
-int s3d_load_line_normals(int object, float *nbuf,unsigned long start, unsigned short n)
+int s3d_load_line_normals(int object, float *nbuf,uint32_t start, uint16_t n)
 {
 	char				buf[MF_LEN+4],*ptr;
 	int					f,i,len=n*6*4;
@@ -636,7 +636,7 @@
 	return(0);
 }
 /*  adds texture coordinates to the last n polygons. */
-int s3d_load_polygon_tex_coords(int object, float *tbuf, unsigned long start, unsigned short n)
+int s3d_load_polygon_tex_coords(int object, float *tbuf, uint32_t start, uint16_t n)
 {
 	char				buf[MF_LEN+4],*ptr;
 	int					f,i,len=n*6*4;
@@ -663,7 +663,7 @@
 	return(0);
 }
 /*  load n materials at position start, overwriting old ones */
-int s3d_load_materials_a(int object, float *mbuf, unsigned long start, unsigned short n)
+int s3d_load_materials_a(int object, float *mbuf, uint32_t start, uint16_t n)
 {
 	char				buf[MF_LEN+4],*ptr;
 	int					f,i,len=n*12*4;
@@ -689,7 +689,7 @@
 	}
 	return(0);
 }
-int s3d_pep_material_texture(int object, unsigned long tex)
+int s3d_pep_material_texture(int object, uint32_t tex)
 {
 	char				buf[4*2],*ptr;
 	ptr=buf;
@@ -699,7 +699,7 @@
 	return(0);
 }
 /*  load data (which has width w and height h) into object, texture tex at position (xpos,ypos) */
-int s3d_load_texture(int object, unsigned long tex, unsigned short xpos, unsigned short ypos, unsigned short w, unsigned short h, unsigned char *data)
+int s3d_load_texture(int object, uint32_t tex, uint16_t xpos, uint16_t ypos, uint16_t w, uint16_t h, uint8_t *data)
 {
 	char				buf[MF_LEN+4],*ptr;
 	int 				linestep,lines,i;
@@ -722,7 +722,7 @@
 	}
 	return(0);
 }
-int s3d_flags_on(int object, unsigned long flags)
+int s3d_flags_on(int object, uint32_t flags)
 {
 	char				buf[4+1+4],*ptr;
 	int					len=4+1+4;
@@ -734,7 +734,7 @@
 	net_send(S3D_P_C_TOGGLE_FLAGS,buf,len);
 	return(0);
 }
-int s3d_flags_off(int object, unsigned long flags)
+int s3d_flags_off(int object, uint32_t flags)
 {
 	char				buf[4+1+4],*ptr;
 	int					len=4+1+4;

Modified: trunk/libs3d/s3d.h
===================================================================
--- trunk/libs3d/s3d.h	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/s3d.h	2006-10-15 18:14:48 UTC (rev 446)
@@ -21,9 +21,10 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
+#include <stdint.h>  /* [u]intXX_t type definitions*/
 /* definitions */
 struct s3d_evt {
-	unsigned char event;
+	uint8_t event;
 	int length;
 	char *buf;
 	struct s3d_evt *next;
@@ -52,7 +53,7 @@
 #define S3D_OF_POINTABLE		0x00000004
 struct mcp_object 
 {
-	unsigned long object;
+	uint32_t object;
 	float trans_x,trans_y,trans_z;
 	float r;
 #define MCP_NEW_OBJECT	1
@@ -60,8 +61,8 @@
 };
 struct s3d_obj_info 
 {
-	unsigned long object;
-	unsigned long flags;
+	uint32_t object;
+	uint32_t flags;
 	float trans_x,trans_y,trans_z;
 	float rot_x,rot_y,rot_z;
 	float scale;
@@ -70,15 +71,15 @@
 };
 struct s3d_but_info
 {
-	unsigned char button; /* 0 = left, 1 = middle, 2 = right */
-	unsigned char state;  /* 0 = down, 1 = up, 2 = moving */
+	uint8_t button; /* 0 = left, 1 = middle, 2 = right */
+	uint8_t state;  /* 0 = down, 1 = up, 2 = moving */
 };
 struct s3d_key_event
 {
-	unsigned short keysym;		/* the symbol, use this with s3d_keysym.h */
-	unsigned short unicode;		/* the unicode or "actually typed" character */
-	unsigned short modifier;	/* any modifiers involved */
-	unsigned short state;		/* 0 = pressed, 1 = released */
+	uint16_t keysym;		/* the symbol, use this with s3d_keysym.h */
+	uint16_t unicode;		/* the unicode or "actually typed" character */
+	uint16_t modifier;	/* any modifiers involved */
+	uint16_t state;		/* 0 = pressed, 1 = released */
 };
 /* framework functions */
 void s3d_usage();
@@ -88,7 +89,7 @@
 
 /* object manipulations */
 int s3d_push_vertex(int object, float x, float y, float z);
-int s3d_push_vertices(int object, float *vbuf, unsigned short n);
+int s3d_push_vertices(int object, float *vbuf, uint16_t n);
 int s3d_push_material( int object, 
 						float amb_r, float amb_g, float amb_b,
 						float spec_r, float spec_g, float spec_b,
@@ -101,39 +102,39 @@
 						float amb_r, float amb_g, float amb_b, float amb_a,
 						float spec_r, float spec_g, float spec_b, float spec_a,
 						float diff_r, float diff_g, float diff_b, float diff_a);
-int s3d_push_materials_a(int object, float *mbuf, unsigned short n);
+int s3d_push_materials_a(int object, float *mbuf, uint16_t n);
 int s3d_pep_material_a( int object, 
 						float amb_r, float amb_g, float amb_b, float amb_a,
 						float spec_r, float spec_g, float spec_b, float spec_a,
 						float diff_r, float diff_g, float diff_b, float diff_a);
 
-int s3d_pep_materials_a(int object, float *mbuf, unsigned short n);
-int s3d_load_materials_a(int object, float *mbuf, unsigned long start, unsigned short n);
-int s3d_push_polygon(int object, unsigned long v1, unsigned long v2, unsigned long v3, unsigned long material);
-int s3d_push_polygons(int object, unsigned long *pbuf, unsigned short n);
-int s3d_push_line(int object, unsigned long v1, unsigned long v2, unsigned long material);
-int s3d_push_lines(int object, unsigned long *lbuf, unsigned short n);
-int s3d_push_texture(int object, unsigned short w, unsigned short h);
-int s3d_push_textures(int object, unsigned short *tbuf, unsigned short n);
-int s3d_pop_vertex(int object, unsigned long n);
-int s3d_pop_polygon(int object, unsigned long n);
-int s3d_pop_material(int object, unsigned long n);
-int s3d_pop_texture(int object, unsigned long n);
-int s3d_pop_polygon(int object, unsigned long n);
-int s3d_pop_line(int object, unsigned long n);
-int s3d_pep_line_normals(int object, float *nbuf,unsigned short n);
-int s3d_pep_polygon_normals(int object, float *nbuf,unsigned short n);
+int s3d_pep_materials_a(int object, float *mbuf, uint16_t n);
+int s3d_load_materials_a(int object, float *mbuf, uint32_t start, uint16_t n);
+int s3d_push_polygon(int object, uint32_t v1, uint32_t v2, uint32_t v3, uint32_t material);
+int s3d_push_polygons(int object, uint32_t *pbuf, uint16_t n);
+int s3d_push_line(int object, uint32_t v1, uint32_t v2, uint32_t material);
+int s3d_push_lines(int object, uint32_t *lbuf, uint16_t n);
+int s3d_push_texture(int object, uint16_t w, uint16_t h);
+int s3d_push_textures(int object, uint16_t *tbuf, uint16_t n);
+int s3d_pop_vertex(int object, uint32_t n);
+int s3d_pop_polygon(int object, uint32_t n);
+int s3d_pop_material(int object, uint32_t n);
+int s3d_pop_texture(int object, uint32_t n);
+int s3d_pop_polygon(int object, uint32_t n);
+int s3d_pop_line(int object, uint32_t n);
+int s3d_pep_line_normals(int object, float *nbuf,uint16_t n);
+int s3d_pep_polygon_normals(int object, float *nbuf,uint16_t n);
 int s3d_pep_polygon_tex_coord(int object, float x1, float y1, float x2, float y2, float x3, float y3);
-int s3d_pep_polygon_tex_coords(int object, float *tbuf,unsigned short n);
-int s3d_pep_material_texture(int object, unsigned long tex);
+int s3d_pep_polygon_tex_coords(int object, float *tbuf,uint16_t n);
+int s3d_pep_material_texture(int object, uint32_t tex);
 int s3d_pep_vertex(int object, float x, float y, float z);
-int s3d_pep_vertices(int object, float *vbuf,unsigned short n);
+int s3d_pep_vertices(int object, float *vbuf,uint16_t n);
 int s3d_pep_line(int object, int v1, int v2, int material);
-int s3d_pep_lines(int object, unsigned long *lbuf,unsigned short n);
-int s3d_load_line_normals(int object, float *nbuf,unsigned long start, unsigned short n);
-int s3d_load_polygon_normals(int object, float *nbuf,unsigned long start, unsigned short n);
-int s3d_load_polygon_tex_coords(int object, float *tbuf, unsigned long start, unsigned short n);
-int s3d_load_texture(int object, unsigned long tex, unsigned short xpos, unsigned short ypos, unsigned short w, unsigned short h, unsigned char *data);
+int s3d_pep_lines(int object, uint32_t *lbuf,uint16_t n);
+int s3d_load_line_normals(int object, float *nbuf,uint32_t start, uint16_t n);
+int s3d_load_polygon_normals(int object, float *nbuf,uint32_t start, uint16_t n);
+int s3d_load_polygon_tex_coords(int object, float *tbuf, uint32_t start, uint16_t n);
+int s3d_load_texture(int object, uint32_t tex, uint16_t xpos, uint16_t ypos, uint16_t w, uint16_t h, uint8_t *data);
 
 int s3d_new_object();
 int s3d_del_object(int oid);
@@ -144,8 +145,8 @@
 int s3d_link(int oid_from, int oid_to);
 int s3d_unlink(int oid);
 
-int s3d_flags_on(int object, unsigned long flags);
-int s3d_flags_off(int object, unsigned long flags);
+int s3d_flags_on(int object, uint32_t flags);
+int s3d_flags_off(int object, uint32_t flags);
 int s3d_translate(int object, float x, float y, float z);
 int s3d_rotate(int object, float x, float y, float z);
 int s3d_scale(int object, float s);
@@ -166,13 +167,13 @@
 /* event handlers */
 void s3d_push_event(struct s3d_evt *newevt);
 struct s3d_evt *s3d_pop_event();
-struct s3d_evt *s3d_find_event(unsigned char event);
+struct s3d_evt *s3d_find_event(uint8_t event);
 int s3d_delete_event(struct s3d_evt *devt);
 
-void s3d_set_callback(unsigned char event, s3d_cb func);
-void s3d_clear_callback(unsigned char event);
-void s3d_ignore_callback(unsigned char event);
-s3d_cb s3d_get_callback(unsigned char event);
+void s3d_set_callback(uint8_t event, s3d_cb func);
+void s3d_clear_callback(uint8_t event);
+void s3d_ignore_callback(uint8_t event);
+s3d_cb s3d_get_callback(uint8_t event);
 void s3d_process_stack();
 
 /* mcp special */

Modified: trunk/libs3d/s3dlib.h
===================================================================
--- trunk/libs3d/s3dlib.h	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/s3dlib.h	2006-10-15 18:14:48 UTC (rev 446)
@@ -65,7 +65,7 @@
 unsigned int _queue_want_object();
 int _queue_quit();
 /*  network.c */
-int net_send(unsigned char opcode, char *buf, unsigned short length);
+int net_send(uint8_t opcode, char *buf, uint16_t length);
 int s3d_net_init(char *urlc);
 #ifdef TCP
 /* tcp.c */
@@ -94,7 +94,7 @@
 struct t_buf
 {
 	float *vbuf;
-	unsigned long *pbuf;
+	uint32_t *pbuf;
 	int pn,vn;
 	float xoff;
 };

Modified: trunk/libs3d/shm.c
===================================================================
--- trunk/libs3d/shm.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/shm.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -165,7 +165,7 @@
 {
 	int 				 found=0;
 	char				 opcode,*buf;
-	unsigned short		 length;
+	u_int16_t		 length;
 	struct shmid_ds		 d;
 	
 	if (data_in==NULL)

Modified: trunk/libs3d/tcp.c
===================================================================
--- trunk/libs3d/tcp.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3d/tcp.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -145,7 +145,7 @@
 	struct timeval		 tv;		 /*  time structure */
 	int 				 found=0;
 	char				 opcode,*buf;
-	unsigned short		 length;
+	u_int16_t		 length;
 	
 	
 	if (s3d_socket!=-1)

Modified: trunk/libs3dw/button.c
===================================================================
--- trunk/libs3dw/button.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/button.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -33,7 +33,7 @@
 	s3dw_button *button=(s3dw_button *)widget;
 	float length;
 	float vertices[8*3];
-	unsigned long polygons[10*4]={
+	u_int32_t polygons[10*4]={
 			0,4,5,0,
 			0,5,1,0,
 			1,5,6,0,
@@ -125,7 +125,7 @@
 }
 
 /* handle click on a button */
-int s3dw_button_event_click(s3dw_widget *widget, unsigned long oid)
+int s3dw_button_event_click(s3dw_widget *widget, u_int32_t oid)
 {
 	s3dw_button *button=(s3dw_button *)widget;
 	if ((button->oid_text==oid) || (widget->oid==oid))

Modified: trunk/libs3dw/event.c
===================================================================
--- trunk/libs3dw/event.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/event.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -27,7 +27,7 @@
 extern s3dw_widget *_s3dw_cam;
 int s3dw_handle_click(struct s3d_evt *evt)
 {
-	unsigned long oid=*((unsigned long *)evt->buf);
+	uint32_t oid=*((uint32_t *)evt->buf);
 	return(s3dw_widget_event_click(s3dw_getroot(),oid));
 }
 int s3dw_handle_key(struct s3d_evt *evt)

Modified: trunk/libs3dw/input.c
===================================================================
--- trunk/libs3dw/input.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/input.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -30,10 +30,10 @@
 #include <string.h> /* strdup(),strlen() */
 #include <ctype.h>	/* isprint */
 
-unsigned long s3dw_input_draw_string(s3dw_widget *widget)
+uint32_t s3dw_input_draw_string(s3dw_widget *widget)
 {
 	s3dw_input *input=(s3dw_input *)widget;
-	unsigned long oid_text;
+	uint32_t oid_text;
 	int i;
 	float tlen;
 	if (widget->width<1) return(-1);
@@ -53,7 +53,7 @@
 	s3dw_input *input=(s3dw_input *)widget;
 	float length;
 	float vertices[12*3];
-	unsigned long polygons[18*4]={
+	uint32_t polygons[18*4]={
 			0,4,5,1,
 			0,5,1,1,
 			1,5,6,1,
@@ -155,7 +155,7 @@
 void s3dw_input_change_text(s3dw_input *input, char *text)
 {
 	s3dw_widget *widget=(s3dw_widget *)input;
-	unsigned long oid_text;
+	uint32_t oid_text;
 	/* redraw the text ... */
 	free(input->text);
 	input->text=strdup(text);
@@ -205,7 +205,7 @@
 }
 
 
-int s3dw_input_event_click(s3dw_widget *widget, unsigned long oid)
+int s3dw_input_event_click(s3dw_widget *widget, uint32_t oid)
 {
 	s3dw_input *input=(s3dw_input *)widget;
 	if ((input->oid_text==oid) || (widget->oid==oid))

Modified: trunk/libs3dw/label.c
===================================================================
--- trunk/libs3dw/label.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/label.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -85,7 +85,7 @@
 	return(0);
 }
 /* handle click events */
-int s3dw_label_event_click(s3dw_widget *widget, unsigned long oid)
+int s3dw_label_event_click(s3dw_widget *widget, uint32_t oid)
 {
 	s3dw_label *label=(s3dw_label *)widget;
 	if (widget->oid==oid)

Modified: trunk/libs3dw/root.c
===================================================================
--- trunk/libs3dw/root.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/root.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -38,7 +38,7 @@
 void s3dw_nothing(s3dw_widget *widget)
 {
 }
-int s3dw_click_nothing(s3dw_widget *widget, unsigned long dummy)
+int s3dw_click_nothing(s3dw_widget *widget, uint32_t dummy)
 {
 	return(0);
 }

Modified: trunk/libs3dw/s3dw.h
===================================================================
--- trunk/libs3dw/s3dw.h	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/s3dw.h	2006-10-15 18:14:48 UTC (rev 446)
@@ -21,6 +21,7 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
+#include <stdint.h>  /* [u]intXX_t type definitions*/
 
 /* we want this widget visible, as long as the widgets below are also visible. 
  * on for all widgets, except surfaces which have to be switched visible 
@@ -70,7 +71,7 @@
 	float 		 as;			/* current scale factor */
 	float 		 arx,ary,arz;   /* current rotation */
 	float 		 width,height;	/* width and height of the widget, outer size */
-	unsigned long oid;			/* the main object which is used for transformations etc ...*/
+	uint32_t	 oid;			/* the main object which is used for transformations etc ...*/
 	/* public */
 	float 		 x,y,z;			/* position, relative to the surface usually */
 	float 		 s;				/* scale factor */
@@ -82,7 +83,7 @@
 	/* private */
 	s3dw_widget 	 widget;
 	char 			*text;
-	unsigned long    oid_text;
+	uint32_t  		  oid_text;
 	/* public */
 	s3dw_callback 	 onclick;
 };
@@ -98,7 +99,7 @@
 	/* private */
 	s3dw_widget 	 widget;
 	char 			*text;
-	unsigned long    oid_text;
+	uint32_t   	 oid_text;
 	/* public */
 	s3dw_callback 	 onclick;
 	s3dw_callback 	 onedit;
@@ -107,8 +108,8 @@
 struct _s3dw_surface {
 	/* private */
 	s3dw_widget 		  widget;
-	unsigned long		  oid_title;
-	unsigned long		  oid_tbar;
+	uint32_t			  oid_title;
+	uint32_t			  oid_tbar;
 	char				 *title;
 };
 

Modified: trunk/libs3dw/s3dw_int.h
===================================================================
--- trunk/libs3dw/s3dw_int.h	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/s3dw_int.h	2006-10-15 18:14:48 UTC (rev 446)
@@ -25,7 +25,7 @@
 #define MAXANI		128
 #define ZOOMS		5
 /* constructor and handler callbacks */
-typedef int (*s3dw_click_callback)(s3dw_widget *, unsigned long);
+typedef int (*s3dw_click_callback)(s3dw_widget *, uint32_t);
 typedef int (*s3dw_key_callback)(  s3dw_widget *, struct s3d_key_event *);
 s3dw_callback 		s3dwcb_show[S3DW_NTYPES];
 s3dw_callback 		s3dwcb_hide[S3DW_NTYPES];
@@ -36,14 +36,14 @@
 /* root.c */
 s3dw_widget *s3dw_getroot();
 void s3dw_nothing(s3dw_widget *widget);
-int s3dw_click_nothing(s3dw_widget *widget, unsigned long dummy);
+int s3dw_click_nothing(s3dw_widget *widget, uint32_t dummy);
 int s3dw_key_nothing(s3dw_widget *widget, struct s3d_key_event *dummy);
 void s3dw_root_destroy(s3dw_widget *widget);
 /* widget.c */
 s3dw_widget *s3dw_widget_new();
 void s3dw_widget_append(s3dw_widget *parent, s3dw_widget *widget);
 void s3dw_widget_visible(s3dw_widget *widget);
-int s3dw_widget_event_click(s3dw_widget *widget, unsigned long oid);
+int s3dw_widget_event_click(s3dw_widget *widget, uint32_t oid);
 int s3dw_widget_event_key(s3dw_widget *widget, struct s3d_key_event *keys);
 /* surface.c */
 void s3dw_surface_destroy(s3dw_widget *widget);
@@ -51,7 +51,7 @@
 void s3dw_surface_erase(s3dw_widget *widget);
 void s3dw_surface_show(s3dw_widget *widget);
 void s3dw_surface_hide(s3dw_widget *widget);
-int s3dw_surface_event_click(s3dw_widget *widget, unsigned long oid);
+int s3dw_surface_event_click(s3dw_widget *widget, uint32_t oid);
 int s3dw_surface_event_key(s3dw_widget *widget, struct s3d_key_event *keys);
 /* button.c */
 void s3dw_button_destroy(s3dw_widget *widget);
@@ -59,7 +59,7 @@
 void s3dw_button_erase(s3dw_widget *widget);
 void s3dw_button_show(s3dw_widget *widget);
 void s3dw_button_hide(s3dw_widget *widget);
-int s3dw_button_event_click(s3dw_widget *widget, unsigned long oid);
+int s3dw_button_event_click(s3dw_widget *widget, uint32_t oid);
 int s3dw_button_event_key(s3dw_widget *widget, struct s3d_key_event *keys);
 
 /* label.c */
@@ -68,7 +68,7 @@
 void s3dw_label_erase(s3dw_widget *widget);
 void s3dw_label_show(s3dw_widget *widget);
 void s3dw_label_hide(s3dw_widget *widget);
-int s3dw_label_event_click(s3dw_widget *widget, unsigned long oid);
+int s3dw_label_event_click(s3dw_widget *widget, uint32_t oid);
 int s3dw_label_event_key(s3dw_widget *widget, struct s3d_key_event *keys);
 
 /* input.c */
@@ -77,8 +77,8 @@
 void s3dw_input_erase(s3dw_widget *widget);
 void s3dw_input_show(s3dw_widget *widget);
 void s3dw_input_hide(s3dw_widget *widget);
-unsigned long s3dw_input_draw_string(s3dw_widget *widget);
-int s3dw_input_event_click(s3dw_widget *widget, unsigned long oid);
+uint32_t s3dw_input_draw_string(s3dw_widget *widget);
+int s3dw_input_event_click(s3dw_widget *widget, uint32_t oid);
 int s3dw_input_event_key(s3dw_widget *widget, struct s3d_key_event *keys);
 
 /* style.c */

Modified: trunk/libs3dw/surface.c
===================================================================
--- trunk/libs3dw/surface.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/surface.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -46,7 +46,7 @@
 		0,1,1
 	};
 	float sver[8*3], tver[8*3];
-	unsigned long polygon[10*4]={
+	uint32_t polygon[10*4]={
 		0,1,2,0,
 		0,2,3,0,
 		1,5,6,0,
@@ -58,7 +58,7 @@
 		5,4,7,0,
 		5,7,6,0
 	};
-	unsigned long tpol[10*4];
+	uint32_t tpol[10*4];
 	int i;
 
 	widget->oid=s3d_new_object();
@@ -180,7 +180,7 @@
 	return(0);
 }
 /* test widgets of the surface for clicks */
-int s3dw_surface_event_click(s3dw_widget *widget, unsigned long oid)
+int s3dw_surface_event_click(s3dw_widget *widget, uint32_t oid)
 {
 	s3dw_surface *surface=(s3dw_surface *)widget;
 	if (widget->oid==oid)

Modified: trunk/libs3dw/widget.c
===================================================================
--- trunk/libs3dw/widget.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/libs3dw/widget.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -47,7 +47,7 @@
 	return(widget);
 }
 /* widget clicked, call specific function and check kids */
-int s3dw_widget_event_click(s3dw_widget *widget, unsigned long oid)
+int s3dw_widget_event_click(s3dw_widget *widget, uint32_t oid)
 {
 	int i;
 	s3dprintf(VLOW,"processing click event for widget %010p of type %d, oid %d (%d), subobjects: %d",widget,widget->type, widget->oid, oid, widget->nobj);

Modified: trunk/server/Makefile.am
===================================================================
--- trunk/server/Makefile.am	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/server/Makefile.am	2006-10-15 18:14:48 UTC (rev 446)
@@ -19,6 +19,6 @@
 	shm.c shm_ringbuf.c tcp.c user.c
 
 s3d_LDADD=	@LIBM@ @GL_LIBS@ ${MAYBE_SDL_LIBS} ${MAYBE_GLUT_LIBS}
-s3d_CFLAGS=	@GL_CFLAGS@ ${MAYBE_SDL_CFLAGS} ${MAYBE_GLUT_CFLAGS} -I$(top_srcdir)/libs3d
+s3d_CFLAGS=	@GL_CFLAGS@ ${MAYBE_SDL_CFLAGS} ${MAYBE_GLUT_CFLAGS} ${DEVEL_CFLAGS} -I$(top_srcdir)/libs3d
 
 noinst_HEADERS=	config.h global.h proto.h

Modified: trunk/server/global.h
===================================================================
--- trunk/server/global.h	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/server/global.h	2006-10-15 18:14:48 UTC (rev 446)
@@ -228,7 +228,7 @@
 int shm_readn(struct buf_t *rb,uint8_t *buf, int n);
 int shm_prot_com_in(struct t_process *p);
 /* shm_ringbuf.c */
-void ringbuf_init(char *data,unsigned long init_size);
+void ringbuf_init(char *data,uint32_t init_size);
 int shm_write(struct buf_t *rb,char *buf, int n);
 int shm_read(struct buf_t *rb,char *buf, int n);
 /*  proto.c */

Modified: trunk/server/mcp.c
===================================================================
--- trunk/server/mcp.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/server/mcp.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -87,7 +87,7 @@
 /* tells the mcp that some program vanished ... */
 int mcp_del_object(uint32_t mcp_oid)
 {
-	unsigned long oid=htonl(mcp_oid);
+	uint32_t oid=htonl(mcp_oid);
 	if (mcp_oid==focus_oid)
 	{
 		s3dprintf(MED,"lost the focus of mcp-oid %d",mcp_oid);

Modified: trunk/server/object.c
===================================================================
--- trunk/server/object.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/server/object.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -36,7 +36,7 @@
 extern int focus_oid;
 
 
-static void obj_update_tex(struct t_tex *tex,unsigned short x,unsigned short y,unsigned short w,unsigned short h,unsigned char *pixbuf);
+static void obj_update_tex(struct t_tex *tex,u_int16_t x,u_int16_t y,u_int16_t w,u_int16_t h,u_int8_t *pixbuf);
 void obj_sys_update(struct t_process *p, uint32_t oid);
 
 /*  debugging function for objects, prints out some stuff known about it... */
@@ -871,7 +871,7 @@
 	return(0);
 }
 /* the interal texture updating function ... this is for opengl*/
-static void obj_update_tex(struct t_tex *tex,unsigned short x,unsigned short y,unsigned short w,unsigned short h,unsigned char *pixbuf)
+static void obj_update_tex(struct t_tex *tex,u_int16_t x,u_int16_t y,u_int16_t w,u_int16_t h,u_int8_t *pixbuf)
 {
 	GLuint t;
 	if ((t=tex->gl_texnum)!=-1)

Modified: trunk/server/shm_ringbuf.c
===================================================================
--- trunk/server/shm_ringbuf.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/server/shm_ringbuf.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -101,7 +101,7 @@
 	if (rb->start>=rb->bufsize) rb->start-=rb->bufsize;
 	return(mn);
 }
-void ringbuf_init(char *data,unsigned long init_size)
+void ringbuf_init(char *data,uint32_t init_size)
 {
 	struct buf_t *ringbuf=(struct buf_t *)data;
 /*	ringbuf=malloc(init_size); */

Modified: trunk/server/user.c
===================================================================
--- trunk/server/user.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/server/user.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -55,7 +55,7 @@
 	}
 	return(0);
 }
-void user_key(unsigned short key, unsigned short unicode, unsigned short mod, int state)
+void user_key(uint16_t key, uint16_t unicode, uint16_t mod, int state)
 {
 	event_key_pressed(key,unicode,mod,state);
 }

Modified: trunk/server/user_glut.c
===================================================================
--- trunk/server/user_glut.c	2006-10-01 20:09:26 UTC (rev 445)
+++ trunk/server/user_glut.c	2006-10-15 18:14:48 UTC (rev 446)
@@ -26,7 +26,7 @@
 #include <GL/glut.h> 	 /*  all the glut functions */
 #include <s3d_keysym.h> /* our very own (haha) keysyms */
 /*  local prototypes */
-void keyboard(unsigned char key, int x, int y);
+void keyboard(uint8_t key, int x, int y);
 void special(int skey, int x, int y);
 void mouse_motion(int x, int y);
 void passive_mouse_motion(int x, int y);
@@ -43,14 +43,14 @@
 	return(0);
 }
 
-void keyboard(unsigned char key, int x, int y)
+void keyboard(uint8_t key, int x, int y)
 {
 	user_key(key,key,0,0);
 	user_key(key,key,0,1);
 }
 void special(int skey, int x, int y)
 {
-	unsigned short mkey;
+	uint16_t mkey;
 	switch (skey) /* handle special keys */
 	{
 		case GLUT_KEY_F1:		mkey=S3DK_F1;	break;



From dotslash at mail.berlios.de  Thu Oct 19 18:11:33 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Thu, 19 Oct 2006 18:11:33 +0200
Subject: [S3d-svn] r447 - in trunk: . swig
Message-ID: <200610191611.k9JGBXNb000078@sheep.berlios.de>

Author: dotslash
Date: 2006-10-19 18:11:31 +0200 (Thu, 19 Oct 2006)
New Revision: 447

Added:
   trunk/swig/
   trunk/swig/Makefile
   trunk/swig/s3d.i
   trunk/swig/s3d_wrap.c
Modified:
   trunk/
Log:
 r1086 at kero:  dotslash | 2006-10-19 18:11:09 +0200
 - add swig for python export



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1084
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1086

Added: trunk/swig/Makefile
===================================================================
--- trunk/swig/Makefile	2006-10-15 18:14:48 UTC (rev 446)
+++ trunk/swig/Makefile	2006-10-19 16:11:31 UTC (rev 447)
@@ -0,0 +1,11 @@
+PYTHON_MOD=s3d.so
+MODS=$(PYTHON_MOD)
+
+default:	all
+all:		$(MODS)
+$(PYTHON_MOD):	s3d.i
+	 swig -python s3d.i
+	 gcc -fPIC -c s3d_wrap.c -I/usr/include/python2.3/
+	 gcc -shared s3d_wrap.o -ls3d -o $(PYTHON_MOD)
+clean:
+	rm -f $(MODS) *.o *.py s3d_wrap.c

Added: trunk/swig/s3d.i
===================================================================
--- trunk/swig/s3d.i	2006-10-15 18:14:48 UTC (rev 446)
+++ trunk/swig/s3d.i	2006-10-19 16:11:31 UTC (rev 447)
@@ -0,0 +1,8 @@
+%module s3d
+%{
+#include <s3d.h>
+#include <s3d_keysym.h>
+%}
+
+%include "../libs3d/s3d.h"
+%include "../libs3d/s3d_keysym.h"

Added: trunk/swig/s3d_wrap.c
===================================================================
--- trunk/swig/s3d_wrap.c	2006-10-15 18:14:48 UTC (rev 446)
+++ trunk/swig/s3d_wrap.c	2006-10-19 16:11:31 UTC (rev 447)
@@ -0,0 +1,6861 @@
+/* ----------------------------------------------------------------------------
+ * This file was automatically generated by SWIG (http://www.swig.org).
+ * Version 1.3.24
+ * 
+ * This file is not intended to be easily readable and contains a number of 
+ * coding conventions designed to improve portability and efficiency. Do not make
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
+ * ----------------------------------------------------------------------------- */
+
+#define SWIGPYTHON
+
+#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
+#  if defined(__SUNPRO_CC) 
+#    define SWIG_TEMPLATE_DISAMBIGUATOR template
+#  else
+#    define SWIG_TEMPLATE_DISAMBIGUATOR 
+#  endif
+#endif
+
+
+#include <Python.h>
+
+/***********************************************************************
+ * swigrun.swg
+ *
+ *     This file contains generic CAPI SWIG runtime support for pointer
+ *     type checking.
+ *
+ ************************************************************************/
+
+/* This should only be incremented when either the layout of swig_type_info changes,
+   or for whatever reason, the runtime changes incompatibly */
+#define SWIG_RUNTIME_VERSION "1"
+
+/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
+#ifdef SWIG_TYPE_TABLE
+#define SWIG_QUOTE_STRING(x) #x
+#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
+#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
+#else
+#define SWIG_TYPE_TABLE_NAME
+#endif
+
+#include <string.h>
+
+#ifndef SWIGINLINE
+#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
+#  define SWIGINLINE inline
+#else
+#  define SWIGINLINE
+#endif
+#endif
+
+/*
+  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
+  creating a static or dynamic library from the swig runtime code.
+  In 99.9% of the cases, swig just needs to declare them as 'static'.
+  
+  But only do this if is strictly necessary, ie, if you have problems
+  with your compiler or so.
+*/
+#ifndef SWIGRUNTIME
+#define SWIGRUNTIME static
+#endif
+#ifndef SWIGRUNTIMEINLINE
+#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef void *(*swig_converter_func)(void *);
+typedef struct swig_type_info *(*swig_dycast_func)(void **);
+
+typedef struct swig_type_info {
+  const char             *name;
+  swig_converter_func     converter;
+  const char             *str;
+  void                   *clientdata;
+  swig_dycast_func        dcast;
+  struct swig_type_info  *next;
+  struct swig_type_info  *prev;
+} swig_type_info;
+
+/* 
+  Compare two type names skipping the space characters, therefore
+  "char*" == "char *" and "Class<int>" == "Class<int >", etc.
+
+  Return 0 when the two name types are equivalent, as in
+  strncmp, but skipping ' '.
+*/
+SWIGRUNTIME int
+SWIG_TypeNameComp(const char *f1, const char *l1,
+		  const char *f2, const char *l2) {
+  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
+    while ((*f1 == ' ') && (f1 != l1)) ++f1;
+    while ((*f2 == ' ') && (f2 != l2)) ++f2;
+    if (*f1 != *f2) return *f1 - *f2;
+  }
+  return (l1 - f1) - (l2 - f2);
+}
+
+/*
+  Check type equivalence in a name list like <name1>|<name2>|...
+*/
+SWIGRUNTIME int
+SWIG_TypeEquiv(const char *nb, const char *tb) {
+  int equiv = 0;
+  const char* te = tb + strlen(tb);
+  const char* ne = nb;
+  while (!equiv && *ne) {
+    for (nb = ne; *ne; ++ne) {
+      if (*ne == '|') break;
+    }
+    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
+    if (*ne) ++ne;
+  }
+  return equiv;
+}
+
+/*
+  Register a type mapping with the type-checking
+*/
+SWIGRUNTIME swig_type_info *
+SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
+  swig_type_info *tc, *head, *ret, *next;
+  /* Check to see if this type has already been registered */
+  tc = *tl;
+  while (tc) {
+    /* check simple type equivalence */
+    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
+    /* check full type equivalence, resolving typedefs */
+    if (!typeequiv) {
+      /* only if tc is not a typedef (no '|' on it) */
+      if (tc->str && ti->str && !strstr(tc->str,"|")) {
+	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
+      }
+    }
+    if (typeequiv) {
+      /* Already exists in the table.  Just add additional types to the list */
+      if (ti->clientdata) tc->clientdata = ti->clientdata;
+      head = tc;
+      next = tc->next;
+      goto l1;
+    }
+    tc = tc->prev;
+  }
+  head = ti;
+  next = 0;
+
+  /* Place in list */
+  ti->prev = *tl;
+  *tl = ti;
+
+  /* Build linked lists */
+  l1:
+  ret = head;
+  tc = ti + 1;
+  /* Patch up the rest of the links */
+  while (tc->name) {
+    head->next = tc;
+    tc->prev = head;
+    head = tc;
+    tc++;
+  }
+  if (next) next->prev = head;
+  head->next = next;
+
+  return ret;
+}
+
+/*
+  Check the typename
+*/
+SWIGRUNTIME swig_type_info *
+SWIG_TypeCheck(const char *c, swig_type_info *ty) {
+  swig_type_info *s;
+  if (!ty) return 0;        /* Void pointer */
+  s = ty->next;             /* First element always just a name */
+  do {
+    if (strcmp(s->name,c) == 0) {
+      if (s == ty->next) return s;
+      /* Move s to the top of the linked list */
+      s->prev->next = s->next;
+      if (s->next) {
+        s->next->prev = s->prev;
+      }
+      /* Insert s as second element in the list */
+      s->next = ty->next;
+      if (ty->next) ty->next->prev = s;
+      ty->next = s;
+      s->prev = ty;
+      return s;
+    }
+    s = s->next;
+  } while (s && (s != ty->next));
+  return 0;
+}
+
+/*
+  Cast a pointer up an inheritance hierarchy
+*/
+SWIGRUNTIMEINLINE void *
+SWIG_TypeCast(swig_type_info *ty, void *ptr) {
+  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
+}
+
+/* 
+   Dynamic pointer casting. Down an inheritance hierarchy
+*/
+SWIGRUNTIME swig_type_info *
+SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
+  swig_type_info *lastty = ty;
+  if (!ty || !ty->dcast) return ty;
+  while (ty && (ty->dcast)) {
+    ty = (*ty->dcast)(ptr);
+    if (ty) lastty = ty;
+  }
+  return lastty;
+}
+
+/*
+  Return the name associated with this type
+*/
+SWIGRUNTIMEINLINE const char *
+SWIG_TypeName(const swig_type_info *ty) {
+  return ty->name;
+}
+
+/*
+  Return the pretty name associated with this type,
+  that is an unmangled type name in a form presentable to the user.
+*/
+SWIGRUNTIME const char *
+SWIG_TypePrettyName(const swig_type_info *type) {
+  /* The "str" field contains the equivalent pretty names of the
+     type, separated by vertical-bar characters.  We choose
+     to print the last name, as it is often (?) the most
+     specific. */
+  if (type->str != NULL) {
+    const char *last_name = type->str;
+    const char *s;
+    for (s = type->str; *s; s++)
+      if (*s == '|') last_name = s+1;
+    return last_name;
+  }
+  else
+    return type->name;
+}
+
+/*
+  Search for a swig_type_info structure
+*/
+SWIGRUNTIME swig_type_info *
+SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
+  swig_type_info *ty = tl;
+  while (ty) {
+    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
+    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
+    ty = ty->prev;
+  }
+  return 0;
+}
+
+/* 
+   Set the clientdata field for a type
+*/
+SWIGRUNTIME void
+SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
+  swig_type_info *tc, *equiv;
+  if (ti->clientdata) return;
+  /* if (ti->clientdata == clientdata) return; */
+  ti->clientdata = clientdata;
+  equiv = ti->next;
+  while (equiv) {
+    if (!equiv->converter) {
+      tc = tl;
+      while (tc) {
+        if ((strcmp(tc->name, equiv->name) == 0))
+          SWIG_TypeClientDataTL(tl,tc,clientdata);
+        tc = tc->prev;
+      }
+    }
+    equiv = equiv->next;
+  }
+}
+
+/* 
+   Pack binary data into a string
+*/
+SWIGRUNTIME char *
+SWIG_PackData(char *c, void *ptr, size_t sz) {
+  static char hex[17] = "0123456789abcdef";
+  unsigned char *u = (unsigned char *) ptr;
+  const unsigned char *eu =  u + sz;
+  register unsigned char uu;
+  for (; u != eu; ++u) {
+    uu = *u;
+    *(c++) = hex[(uu & 0xf0) >> 4];
+    *(c++) = hex[uu & 0xf];
+  }
+  return c;
+}
+
+/* 
+   Unpack binary data from a string
+*/
+SWIGRUNTIME const char *
+SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
+  register unsigned char *u = (unsigned char *) ptr;
+  register const unsigned char *eu =  u + sz;
+  for (; u != eu; ++u) {
+    register int d = *(c++);
+    register unsigned char uu = 0;
+    if ((d >= '0') && (d <= '9'))
+      uu = ((d - '0') << 4);
+    else if ((d >= 'a') && (d <= 'f'))
+      uu = ((d - ('a'-10)) << 4);
+    else 
+      return (char *) 0;
+    d = *(c++);
+    if ((d >= '0') && (d <= '9'))
+      uu |= (d - '0');
+    else if ((d >= 'a') && (d <= 'f'))
+      uu |= (d - ('a'-10));
+    else 
+      return (char *) 0;
+    *u = uu;
+  }
+  return c;
+}
+
+/*
+  This function will propagate the clientdata field of type to any new
+  swig_type_info structures that have been added into the list of
+  equivalent types.  It is like calling SWIG_TypeClientData(type,
+  clientdata) a second time.
+*/
+SWIGRUNTIME void
+SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
+  swig_type_info *equiv = type->next;
+  swig_type_info *tc;
+  if (!type->clientdata) return;
+  while (equiv) {
+    if (!equiv->converter) {
+      tc = tl;
+      while (tc) {
+        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
+          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
+        tc = tc->prev;
+      }
+    }
+    equiv = equiv->next;
+  }
+}
+
+/* 
+   Pack 'void *' into a string buffer.
+*/
+SWIGRUNTIME char *
+SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
+  char *r = buff;
+  if ((2*sizeof(void *) + 2) > bsz) return 0;
+  *(r++) = '_';
+  r = SWIG_PackData(r,&ptr,sizeof(void *));
+  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
+  strcpy(r,name);
+  return buff;
+}
+
+SWIGRUNTIME const char *
+SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
+  if (*c != '_') {
+    if (strcmp(c,"NULL") == 0) {
+      *ptr = (void *) 0;
+      return name;
+    } else {
+      return 0;
+    }
+  }
+  return SWIG_UnpackData(++c,ptr,sizeof(void *));
+}
+
+SWIGRUNTIME char *
+SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
+  char *r = buff;
+  size_t lname = (name ? strlen(name) : 0);
+  if ((2*sz + 2 + lname) > bsz) return 0;
+  *(r++) = '_';
+  r = SWIG_PackData(r,ptr,sz);
+  if (lname) {
+    strncpy(r,name,lname+1);
+  } else {
+    *r = 0;
+  }
+  return buff;
+}
+
+SWIGRUNTIME const char *
+SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
+  if (*c != '_') {
+    if (strcmp(c,"NULL") == 0) {
+      memset(ptr,0,sz);
+      return name;
+    } else {
+      return 0;
+    }
+  }
+  return SWIG_UnpackData(++c,ptr,sz);
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+/***********************************************************************
+ * common.swg
+ *
+ *     This file contains generic SWIG runtime support for pointer
+ *     type checking as well as a few commonly used macros to control
+ *     external linkage.
+ *
+ * Author : David Beazley (beazley at cs.uchicago.edu)
+ *
+ * Copyright (c) 1999-2000, The University of Chicago
+ * 
+ * This file may be freely redistributed without license or fee provided
+ * this copyright message remains intact.
+ ************************************************************************/
+
+
+#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
+#  if !defined(STATIC_LINKED)
+#    define SWIGEXPORT(a) __declspec(dllexport) a
+#  else
+#    define SWIGEXPORT(a) a
+#  endif
+#else
+#  define SWIGEXPORT(a) a
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+/*************************************************************************/
+
+
+/* The static type info list */
+
+static swig_type_info *swig_type_list = 0;
+static swig_type_info **swig_type_list_handle = &swig_type_list;
+  
+
+/* Register a type mapping with the type-checking */
+static swig_type_info *
+SWIG_TypeRegister(swig_type_info *ti) {
+  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
+}
+
+/* Search for a swig_type_info structure */
+static swig_type_info *
+SWIG_TypeQuery(const char *name) {
+  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
+}
+
+/* Set the clientdata field for a type */
+static void
+SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
+  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
+}
+
+/* This function will propagate the clientdata field of type to
+* any new swig_type_info structures that have been added into the list
+* of equivalent types.  It is like calling
+* SWIG_TypeClientData(type, clientdata) a second time.
+*/
+static void
+SWIG_PropagateClientData(swig_type_info *type) {
+  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+/* -----------------------------------------------------------------------------
+ * SWIG API. Portion that goes into the runtime
+ * ----------------------------------------------------------------------------- */
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* -----------------------------------------------------------------------------
+ * for internal method declarations
+ * ----------------------------------------------------------------------------- */
+
+#ifndef SWIGINTERN
+#define SWIGINTERN static 
+#endif
+
+#ifndef SWIGINTERNSHORT
+#ifdef __cplusplus
+#define SWIGINTERNSHORT static inline 
+#else /* C case */
+#define SWIGINTERNSHORT static 
+#endif /* __cplusplus */
+#endif
+
+
+/*
+  Exception handling in wrappers
+*/
+#define SWIG_fail                goto fail
+#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
+#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
+#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
+#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
+#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)
+
+/*
+  Contract support
+*/
+#define SWIG_contract_assert(expr, msg) \
+ if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else
+
+/* -----------------------------------------------------------------------------
+ * Constant declarations
+ * ----------------------------------------------------------------------------- */
+
+/* Constant Types */
+#define SWIG_PY_INT     1
+#define SWIG_PY_FLOAT   2
+#define SWIG_PY_STRING  3
+#define SWIG_PY_POINTER 4
+#define SWIG_PY_BINARY  5
+
+/* Constant information structure */
+typedef struct swig_const_info {
+    int type;
+    char *name;
+    long lvalue;
+    double dvalue;
+    void   *pvalue;
+    swig_type_info **ptype;
+} swig_const_info;
+
+
+/* -----------------------------------------------------------------------------
+ * Alloc. memory flags
+ * ----------------------------------------------------------------------------- */
+#define SWIG_OLDOBJ  1
+#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
+#define SWIG_PYSTR   SWIG_NEWOBJ + 1
+
+#ifdef __cplusplus
+}
+#endif
+
+
+/***********************************************************************
+ * pyrun.swg
+ *
+ *     This file contains the runtime support for Python modules
+ *     and includes code for managing global variables and pointer
+ *     type checking.
+ *
+ * Author : David Beazley (beazley at cs.uchicago.edu)
+ ************************************************************************/
+
+/* Common SWIG API */
+#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
+#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
+#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
+ 
+
+/* Python-specific SWIG API */
+#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
+#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)
+
+
+/* -----------------------------------------------------------------------------
+ * Pointer declarations
+ * ----------------------------------------------------------------------------- */
+/*
+  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
+  C/C++ pointers in the python side. Very useful for debugging, but
+  not always safe.
+*/
+#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
+#  define SWIG_COBJECT_TYPES
+#endif
+
+/* Flags for pointer conversion */
+#define SWIG_POINTER_EXCEPTION     0x1
+#define SWIG_POINTER_DISOWN        0x2
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* -----------------------------------------------------------------------------
+ * Create a new pointer string 
+ * ----------------------------------------------------------------------------- */
+
+#ifndef SWIG_BUFFER_SIZE
+#define SWIG_BUFFER_SIZE 1024
+#endif
+
+#if defined(SWIG_COBJECT_TYPES)
+#if !defined(SWIG_COBJECT_PYTHON)
+/* -----------------------------------------------------------------------------
+ * Implements a simple Swig Object type, and use it instead of PyCObject
+ * ----------------------------------------------------------------------------- */
+
+typedef struct {
+  PyObject_HEAD
+  void *ptr;
+  const char *desc;
+} PySwigObject;
+
+/* Declarations for objects of type PySwigObject */
+
+SWIGRUNTIME int
+PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
+{
+  char result[SWIG_BUFFER_SIZE];
+  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
+    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
+    return 0; 
+  } else {
+    return 1; 
+  }
+}
+  
+SWIGRUNTIME PyObject *
+PySwigObject_repr(PySwigObject *v)
+{
+  char result[SWIG_BUFFER_SIZE];
+  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
+    PyString_FromFormat("<Swig Object at %s>", result) : 0;
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_str(PySwigObject *v)
+{
+  char result[SWIG_BUFFER_SIZE];
+  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
+    PyString_FromString(result) : 0;
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_long(PySwigObject *v)
+{
+  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_oct(PySwigObject *v)
+{
+  char buf[100];
+  unsigned long x = (unsigned long)v->ptr;
+  if (x == 0)
+    strcpy(buf, "0");
+  else
+    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
+  return PyString_FromString(buf);
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_hex(PySwigObject *v)
+{
+  char buf[100];
+  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
+  return PyString_FromString(buf);
+}
+
+SWIGRUNTIME int
+PySwigObject_compare(PySwigObject *v, PySwigObject *w)
+{
+  int c = strcmp(v->desc, w->desc);
+  if (c) {
+    return c;
+  } else {
+    void *i = v->ptr;
+    void *j = w->ptr;
+    return (i < j) ? -1 : (i > j) ? 1 : 0;
+  }
+}
+
+SWIGRUNTIME void
+PySwigObject_dealloc(PySwigObject *self)
+{
+  PyObject_DEL(self);
+}
+
+SWIGRUNTIME PyTypeObject*
+PySwigObject_GetType() {
+  static char PySwigObject_Type__doc__[] = 
+    "Swig object carries a C/C++ instance pointer";
+  
+  static PyNumberMethods PySwigObject_as_number = {
+    (binaryfunc)0, /*nb_add*/
+    (binaryfunc)0, /*nb_subtract*/
+    (binaryfunc)0, /*nb_multiply*/
+    (binaryfunc)0, /*nb_divide*/
+    (binaryfunc)0, /*nb_remainder*/
+    (binaryfunc)0, /*nb_divmod*/
+    (ternaryfunc)0,/*nb_power*/
+    (unaryfunc)0,  /*nb_negative*/
+    (unaryfunc)0,  /*nb_positive*/
+    (unaryfunc)0,  /*nb_absolute*/
+    (inquiry)0,    /*nb_nonzero*/
+    0,		   /*nb_invert*/
+    0,		   /*nb_lshift*/
+    0,		   /*nb_rshift*/
+    0,		   /*nb_and*/
+    0,		   /*nb_xor*/
+    0,		   /*nb_or*/
+    (coercion)0,   /*nb_coerce*/
+    (unaryfunc)PySwigObject_long, /*nb_int*/
+    (unaryfunc)PySwigObject_long, /*nb_long*/
+    (unaryfunc)0,                 /*nb_float*/
+    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
+    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
+#if PY_VERSION_HEX >= 0x02000000
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
+#endif
+  };
+
+  static int type_init = 0;  
+  static PyTypeObject PySwigObject_Type;
+
+  if (!type_init) {
+    PyTypeObject tmp = {
+    PyObject_HEAD_INIT(&PyType_Type)
+    0,					/*ob_size*/
+    "PySwigObject",			/*tp_name*/
+    sizeof(PySwigObject),		/*tp_basicsize*/
+    0,					/*tp_itemsize*/
+    /* methods */
+    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
+    (printfunc)PySwigObject_print,	/*tp_print*/
+    (getattrfunc)0,			/*tp_getattr*/
+    (setattrfunc)0,			/*tp_setattr*/
+    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
+    (reprfunc)PySwigObject_repr,	/*tp_repr*/
+    &PySwigObject_as_number,	        /*tp_as_number*/
+    0,					/*tp_as_sequence*/
+    0,					/*tp_as_mapping*/
+    (hashfunc)0,			/*tp_hash*/
+    (ternaryfunc)0,			/*tp_call*/
+    (reprfunc)PySwigObject_str,		/*tp_str*/
+    /* Space for future expansion */
+    0L,0L,0L,0L,
+    PySwigObject_Type__doc__, 	        /* Documentation string */
+#if PY_VERSION_HEX >= 0x02000000
+    0,                                  /* tp_traverse */
+    0,                                  /* tp_clear */
+#endif
+#if PY_VERSION_HEX >= 0x02010000
+    0,                                  /* tp_richcompare */
+    0,                                  /* tp_weaklistoffset */
+#endif
+#if PY_VERSION_HEX >= 0x02020000
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
+#endif
+#if PY_VERSION_HEX >= 0x02030000
+    0,                                  /* tp_del */
+#endif
+#ifdef COUNT_ALLOCS
+    0,0,0,0                             /* tp_alloc -> tp_next */
+#endif
+    };
+
+    PySwigObject_Type = tmp;
+    type_init = 1;
+  }
+
+  return &PySwigObject_Type;
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
+{
+  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
+  if (self == NULL) return NULL;
+  self->ptr = ptr;
+  self->desc = desc;
+  return (PyObject *)self;
+}
+
+SWIGRUNTIMEINLINE void *
+PySwigObject_AsVoidPtr(PyObject *self)
+{
+  return ((PySwigObject *)self)->ptr;
+}
+
+SWIGRUNTIMEINLINE const char *
+PySwigObject_GetDesc(PyObject *self)
+{
+  return ((PySwigObject *)self)->desc;
+}
+
+SWIGRUNTIMEINLINE int
+PySwigObject_Check(PyObject *op) {
+  return ((op)->ob_type == PySwigObject_GetType()) 
+    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
+}
+
+/* -----------------------------------------------------------------------------
+ * Implements a simple Swig Packed type, and use it instead of string
+ * ----------------------------------------------------------------------------- */
+
+typedef struct {
+  PyObject_HEAD
+  void *pack;
+  const char *desc;
+  size_t size;
+} PySwigPacked;
+
+SWIGRUNTIME int
+PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
+{
+  char result[SWIG_BUFFER_SIZE];
+  fputs("<Swig Packed ", fp); 
+  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
+    fputs("at ", fp); 
+    fputs(result, fp); 
+  }
+  fputs(v->desc,fp); 
+  fputs(">", fp);
+  return 0; 
+}
+  
+SWIGRUNTIME PyObject *
+PySwigPacked_repr(PySwigPacked *v)
+{
+  char result[SWIG_BUFFER_SIZE];
+  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
+    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
+  } else {
+    return PyString_FromFormat("<Swig Packed %s>", v->desc);
+  }  
+}
+
+SWIGRUNTIME PyObject *
+PySwigPacked_str(PySwigPacked *v)
+{
+  char result[SWIG_BUFFER_SIZE];
+  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
+    return PyString_FromFormat("%s%s", result, v->desc);
+  } else {
+    return PyString_FromFormat("%s", v->desc);
+  }  
+}
+
+SWIGRUNTIME int
+PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
+{
+  int c = strcmp(v->desc, w->desc);
+  if (c) {
+    return c;
+  } else {
+    size_t i = v->size;
+    size_t j = w->size;
+    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
+    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
+  }
+}
+
+SWIGRUNTIME void
+PySwigPacked_dealloc(PySwigPacked *self)
+{
+  free(self->pack);
+  PyObject_DEL(self);
+}
+
+SWIGRUNTIME PyTypeObject*
+PySwigPacked_GetType() {
+  static char PySwigPacked_Type__doc__[] = 
+    "Swig object carries a C/C++ instance pointer";
+  static int type_init = 0;
+  
+  static PyTypeObject PySwigPacked_Type;
+  if (!type_init) {
+    PyTypeObject tmp = {
+    PyObject_HEAD_INIT(&PyType_Type)
+    0,					/*ob_size*/
+    "PySwigPacked",			/*tp_name*/
+    sizeof(PySwigPacked),		/*tp_basicsize*/
+    0,					/*tp_itemsize*/
+    /* methods */
+    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
+    (printfunc)PySwigPacked_print,	/*tp_print*/
+    (getattrfunc)0,			/*tp_getattr*/
+    (setattrfunc)0,			/*tp_setattr*/
+    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
+    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
+    0,	                                /*tp_as_number*/
+    0,					/*tp_as_sequence*/
+    0,					/*tp_as_mapping*/
+    (hashfunc)0,			/*tp_hash*/
+    (ternaryfunc)0,			/*tp_call*/
+    (reprfunc)PySwigPacked_str,		/*tp_str*/
+    /* Space for future expansion */
+    0L,0L,0L,0L,
+    PySwigPacked_Type__doc__, 	        /* Documentation string */
+#if PY_VERSION_HEX >= 0x02000000
+    0,                                  /* tp_traverse */
+    0,                                  /* tp_clear */
+#endif
+#if PY_VERSION_HEX >= 0x02010000
+    0,                                  /* tp_richcompare */
+    0,                                  /* tp_weaklistoffset */
+#endif
+#if PY_VERSION_HEX >= 0x02020000         
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
+#endif
+#if PY_VERSION_HEX >= 0x02030000
+    0,                                  /* tp_del */
+#endif
+#ifdef COUNT_ALLOCS
+    0,0,0,0                             /* tp_alloc -> tp_next */
+#endif
+    };
+
+    PySwigPacked_Type = tmp;
+    type_init = 1;
+  }
+  
+      
+
+  return &PySwigPacked_Type;
+}
+
+SWIGRUNTIME PyObject *
+PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
+{
+  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
+  if (self == NULL) {
+    return NULL;
+  } else {
+    void *pack = malloc(size);
+    memcpy(pack, ptr, size);
+    self->pack = pack;
+    self->desc = desc;
+    self->size = size;
+    return (PyObject *) self;
+  }
+}
+
+SWIGRUNTIMEINLINE const char *
+PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
+{
+  PySwigPacked *self = (PySwigPacked *)obj;
+  if (self->size != size) return 0;
+  memcpy(ptr, self->pack, size);
+  return self->desc;
+}
+
+SWIGRUNTIMEINLINE const char *
+PySwigPacked_GetDesc(PyObject *self)
+{
+  return ((PySwigPacked *)self)->desc;
+}
+
+SWIGRUNTIMEINLINE int
+PySwigPacked_Check(PyObject *op) {
+  return ((op)->ob_type == PySwigPacked_GetType()) 
+    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
+}
+
+#else
+/* -----------------------------------------------------------------------------
+ * Use the old Python PyCObject instead of PySwigObject
+ * ----------------------------------------------------------------------------- */
+
+#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
+#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
+#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
+#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)
+
+#endif
+
+#endif
+
+/* -----------------------------------------------------------------------------
+ * errors manipulation
+ * ----------------------------------------------------------------------------- */
+
+SWIGRUNTIME void
+SWIG_Python_TypeError(const char *type, PyObject *obj)
+{
+  if (type) {
+#if defined(SWIG_COBJECT_TYPES)
+    if (PySwigObject_Check(obj)) {
+      const char *otype = (const char *) PySwigObject_GetDesc(obj);
+      if (otype) {
+	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
+		     type, otype);
+	return;
+      }
+    } else 
+#endif      
+    {
+      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
+      if (otype) {
+	PyObject *str = PyObject_Str(obj);
+	const char *cstr = str ? PyString_AsString(str) : 0;
+	if (cstr) {
+	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
+		       type, otype, cstr);
+	} else {
+	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
+		       type, otype);
+	}
+	Py_DECREF(str);
+	return;
+      }
+    }   
+    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
+  } else {
+    PyErr_Format(PyExc_TypeError, "unexpected type is received");
+  }
+}
+
+SWIGRUNTIMEINLINE void
+SWIG_Python_NullRef(const char *type)
+{
+  if (type) {
+    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
+  } else {
+    PyErr_Format(PyExc_TypeError, "null reference was received");
+  }
+}
+
+SWIGRUNTIME int
+SWIG_Python_AddErrMesg(const char* mesg, int infront)
+{
+  if (PyErr_Occurred()) {
+    PyObject *type = 0;
+    PyObject *value = 0;
+    PyObject *traceback = 0;
+    PyErr_Fetch(&type, &value, &traceback);
+    if (value) {
+      PyObject *old_str = PyObject_Str(value);
+      Py_XINCREF(type);
+      PyErr_Clear();
+      if (infront) {
+	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
+      } else {
+	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
+      }
+      Py_DECREF(old_str);
+    }
+    return 1;
+  } else {
+    return 0;
+  }
+}
+
+SWIGRUNTIME int
+SWIG_Python_ArgFail(int argnum)
+{
+  if (PyErr_Occurred()) {
+    /* add information about failing argument */
+    char mesg[256];
+    sprintf(mesg, "argument number %d:", argnum);
+    return SWIG_Python_AddErrMesg(mesg, 1);
+  } else {
+    return 0;
+  }
+}
+
+
+/* -----------------------------------------------------------------------------
+ * pointers/data manipulation
+ * ----------------------------------------------------------------------------- */
+
+/* Convert a pointer value */
+SWIGRUNTIME int
+SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
+  swig_type_info *tc;
+  const char *c = 0;
+  static PyObject *SWIG_this = 0;
+  int    newref = 0;
+  PyObject  *pyobj = 0;
+  void *vptr;
+  
+  if (!obj) return 0;
+  if (obj == Py_None) {
+    *ptr = 0;
+    return 0;
+  }
+
+#ifdef SWIG_COBJECT_TYPES
+  if (!(PySwigObject_Check(obj))) {
+    if (!SWIG_this)
+      SWIG_this = PyString_FromString("this");
+    pyobj = obj;
+    obj = PyObject_GetAttr(obj,SWIG_this);
+    newref = 1;
+    if (!obj) goto type_error;
+    if (!PySwigObject_Check(obj)) {
+      Py_DECREF(obj);
+      goto type_error;
+    }
+  }  
+  vptr = PySwigObject_AsVoidPtr(obj);
+  c = (const char *) PySwigObject_GetDesc(obj);
+  if (newref) { Py_DECREF(obj); }
+  goto type_check;
+#else
+  if (!(PyString_Check(obj))) {
+    if (!SWIG_this)
+      SWIG_this = PyString_FromString("this");
+    pyobj = obj;
+    obj = PyObject_GetAttr(obj,SWIG_this);
+    newref = 1;
+    if (!obj) goto type_error;
+    if (!PyString_Check(obj)) {
+      Py_DECREF(obj);
+      goto type_error;
+    }
+  } 
+  c = PyString_AS_STRING(obj);
+  /* Pointer values must start with leading underscore */
+  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
+  if (newref) { Py_DECREF(obj); }
+  if (!c) goto type_error;
+#endif
+
+type_check:
+
+  if (ty) {
+    tc = SWIG_TypeCheck(c,ty);
+    if (!tc) goto type_error;
+    *ptr = SWIG_TypeCast(tc,vptr);
+  } else {
+    *ptr = vptr;
+  }
+
+  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
+    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
+  }
+  return 0;
+
+type_error:
+  PyErr_Clear();
+  if (pyobj && !obj) {    
+    obj = pyobj;
+    if (PyCFunction_Check(obj)) {
+      /* here we get the method pointer for callbacks */
+      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
+      c = doc ? strstr(doc, "swig_ptr: ") : 0;
+      if (c) {
+	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
+	if (!c) goto type_error;
+	goto type_check;
+      }
+    }
+  }
+  if (flags & SWIG_POINTER_EXCEPTION) {
+    if (ty) {
+      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
+    } else {
+      SWIG_Python_TypeError("C/C++ pointer", obj);
+    }
+  }
+  return -1;
+}
+
+/* Convert a pointer value, signal an exception on a type mismatch */
+SWIGRUNTIME void *
+SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
+  void *result;
+  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
+    PyErr_Clear();
+    if (flags & SWIG_POINTER_EXCEPTION) {
+      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
+      SWIG_Python_ArgFail(argnum);
+    }
+  }
+  return result;
+}
+
+/* Convert a packed value value */
+SWIGRUNTIME int
+SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
+  swig_type_info *tc;
+  const char *c = 0;
+
+#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
+  c = PySwigPacked_UnpackData(obj, ptr, sz);
+#else
+  if ((!obj) || (!PyString_Check(obj))) goto type_error;
+  c = PyString_AS_STRING(obj);
+  /* Pointer values must start with leading underscore */
+  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
+#endif
+  if (!c) goto type_error;
+  if (ty) {
+    tc = SWIG_TypeCheck(c,ty);
+    if (!tc) goto type_error;
+  }
+  return 0;
+
+type_error:
+  PyErr_Clear();
+  if (flags & SWIG_POINTER_EXCEPTION) {
+    if (ty) {
+      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
+    } else {
+      SWIG_Python_TypeError("C/C++ packed data", obj);
+    }
+  }
+  return -1;
+}  
+
+/* Create a new array object */
+SWIGRUNTIME PyObject *
+SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
+  PyObject *robj = 0;
+  if (!ptr) {
+    Py_INCREF(Py_None);
+    return Py_None;
+  }
+#ifdef SWIG_COBJECT_TYPES
+  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
+#else
+  {
+    char result[SWIG_BUFFER_SIZE];
+    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
+      PyString_FromString(result) : 0;
+  }
+#endif
+  if (!robj || (robj == Py_None)) return robj;
+  if (type->clientdata) {
+    PyObject *inst;
+    PyObject *args = Py_BuildValue((char*)"(O)", robj);
+    Py_DECREF(robj);
+    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
+    Py_DECREF(args);
+    if (inst) {
+      if (own) {
+        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
+      }
+      robj = inst;
+    }
+  }
+  return robj;
+}
+
+SWIGRUNTIME PyObject *
+SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
+  PyObject *robj = 0;
+  if (!ptr) {
+    Py_INCREF(Py_None);
+    return Py_None;
+  }
+#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
+  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
+#else
+  {
+    char result[SWIG_BUFFER_SIZE];
+    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
+      PyString_FromString(result) : 0;
+  }
+#endif
+  return robj;
+}
+
+/* -----------------------------------------------------------------------------*
+ *  Get type list 
+ * -----------------------------------------------------------------------------*/
+
+#ifdef SWIG_LINK_RUNTIME
+void *SWIG_ReturnGlobalTypeList(void *);
+#endif
+
+SWIGRUNTIME swig_type_info **
+SWIG_Python_GetTypeListHandle() {
+  static void *type_pointer = (void *)0;
+  /* first check if module already created */
+  if (!type_pointer) {
+#ifdef SWIG_LINK_RUNTIME
+    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
+#else
+    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
+				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
+    if (PyErr_Occurred()) {
+      PyErr_Clear();
+      type_pointer = (void *)0;
+    }
+  }
+#endif
+  return (swig_type_info **) type_pointer;
+}
+
+/*
+  Search for a swig_type_info structure
+ */
+SWIGRUNTIMEINLINE swig_type_info *
+SWIG_Python_GetTypeList() {
+  swig_type_info **tlh = SWIG_Python_GetTypeListHandle();
+  return tlh ? *tlh : (swig_type_info*)0;
+}
+
+#define SWIG_Runtime_GetTypeList SWIG_Python_GetTypeList 
+
+#ifdef __cplusplus
+}
+#endif
+
+
+/* -------- TYPES TABLE (BEGIN) -------- */
+
+#define  SWIGTYPE_p_s3d_key_event swig_types[0] 
+#define  SWIGTYPE_size_t swig_types[1] 
+#define  SWIGTYPE_p_mcp_object swig_types[2] 
+#define  SWIGTYPE_p_uint16_t swig_types[3] 
+#define  SWIGTYPE_p_uint32_t swig_types[4] 
+#define  SWIGTYPE_p_s3d_obj_info swig_types[5] 
+#define  SWIGTYPE_p_s3d_evt swig_types[6] 
+#define  SWIGTYPE_p_float swig_types[7] 
+#define  SWIGTYPE_p_f___void swig_types[8] 
+#define  SWIGTYPE_p_f_p_struct_s3d_evt__int swig_types[9] 
+#define  SWIGTYPE_p_p_p_char swig_types[10] 
+#define  SWIGTYPE_p_char swig_types[11] 
+#define  SWIGTYPE_p_p_char swig_types[12] 
+#define  SWIGTYPE_ptrdiff_t swig_types[13] 
+#define  SWIGTYPE_p_s3d_but_info swig_types[14] 
+#define  SWIGTYPE_p_uint8_t swig_types[15] 
+#define  SWIGTYPE_p_S3DKey swig_types[16] 
+#define  SWIGTYPE_p_int swig_types[17] 
+#define  SWIGTYPE_p_S3DMod swig_types[18] 
+static swig_type_info *swig_types[20];
+
+/* -------- TYPES TABLE (END) -------- */
+
+
+/*-----------------------------------------------
+              @(target):= _s3d.so
+  ------------------------------------------------*/
+#define SWIG_init    init_s3d
+
+#define SWIG_name    "_s3d"
+
+#include <s3d.h>
+#include <s3d_keysym.h>
+
+
+#include <limits.h>
+
+
+SWIGINTERN int
+  SWIG_CheckLongInRange(long value, long min_value, long max_value,
+			const char *errmsg)
+{
+  if (value < min_value) {
+    if (errmsg) {
+      PyErr_Format(PyExc_OverflowError, 
+		   "value %ld is less than '%s' minimum %ld", 
+		   value, errmsg, min_value);
+    }
+    return 0;    
+  } else if (value > max_value) {
+    if (errmsg) {
+      PyErr_Format(PyExc_OverflowError,
+		   "value %ld is greater than '%s' maximum %ld", 
+		   value, errmsg, max_value);
+    }
+    return 0;
+  }
+  return 1;
+}
+
+
+SWIGINTERN int
+  SWIG_AsVal_long(PyObject * obj, long* val)
+{
+  if (PyInt_Check(obj)) {
+    if (val) *val = PyInt_AS_LONG(obj);
+    return 1;
+  }
+  if (PyLong_Check(obj)) {
+    long v = PyLong_AsLong(obj);
+    if (!PyErr_Occurred()) {
+      if (val) *val = v;
+      return 1;
+    } else {
+      if (!val) PyErr_Clear();
+      return 0;
+    }
+  }
+  if (val) {
+    SWIG_type_error("long", obj);
+  }
+  return 0;
+ }
+
+
+#if INT_MAX != LONG_MAX
+SWIGINTERN int
+  SWIG_AsVal_int(PyObject *obj, int *val)
+{ 
+  const char* errmsg = val ? "int" : (char*)0;
+  long v;
+  if (SWIG_AsVal_long(obj, &v)) {
+    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
+      if (val) *val = (int)(v);
+      return 1;
+    } else {
+      return 0;
+    }
+  } else {
+    PyErr_Clear();
+  }
+  if (val) {
+    SWIG_type_error(errmsg, obj);
+  }
+  return 0;    
+}
+#else
+SWIGINTERNSHORT int
+  SWIG_AsVal_int(PyObject *obj, int *val)
+{
+  return SWIG_AsVal_long(obj,(long*)val);
+}
+#endif
+
+
+SWIGINTERNSHORT int
+SWIG_As_int(PyObject* obj)
+{
+  int v;
+  if (!SWIG_AsVal_int(obj, &v)) {
+    /*
+      this is needed to make valgrind/purify happier. 
+     */
+    memset((void*)&v, 0, sizeof(int));
+  }
+  return v;
+}
+
+  
+SWIGINTERNSHORT int
+SWIG_Check_int(PyObject* obj)
+{
+  return SWIG_AsVal_int(obj, (int*)0);
+}
+
+
+  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
+#define SWIG_From_int PyInt_FromLong
+/*@@*/
+
+
+/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
+SWIGINTERN int
+SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
+{
+  static swig_type_info* pchar_info = 0;
+  char* vptr = 0;
+  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
+  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
+    if (cptr) *cptr = vptr;
+    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
+    return SWIG_OLDOBJ;
+  } else {
+    PyErr_Clear();
+    if (PyString_Check(obj)) {
+      if (cptr) {
+	*cptr = PyString_AS_STRING(obj);
+	if (psize) {
+	  *psize = PyString_GET_SIZE(obj) + 1;
+	}
+      }
+      return SWIG_PYSTR;
+    }
+  }
+  if (cptr) {
+    SWIG_type_error("char *", obj);
+  }
+  return 0;
+}
+
+
+SWIGINTERNSHORT int
+SWIG_AsCharPtr(PyObject *obj, char **val)
+{
+  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
+    return 1;
+  }
+  if (val) {
+    PyErr_Clear();
+    SWIG_type_error("char *", obj);
+  }
+  return 0;
+}
+
+
+SWIGINTERN PyObject *
+SWIG_FromCharPtr(const char* cptr)
+{ 
+  if (cptr) {
+    size_t size = strlen(cptr);
+    if (size > INT_MAX) {
+      return SWIG_NewPointerObj((char*)(cptr), 
+				SWIG_TypeQuery("char *"), 0);
+    } else {
+      if (size != 0) {
+	return PyString_FromStringAndSize(cptr, size);
+      } else {
+	return PyString_FromString(cptr);
+      }
+    }
+  }
+  Py_INCREF(Py_None);
+  return Py_None;
+}
+
+
+#include <float.h>
+SWIGINTERN int
+  SWIG_CheckDoubleInRange(double value, double min_value, 
+			  double max_value, const char* errmsg)
+{
+  if (value < min_value) {
+    if (errmsg) {
+      PyErr_Format(PyExc_OverflowError, 
+		   "value %g is less than %s minimum %g", 
+		   value, errmsg, min_value);
+    }
+    return 0;
+  } else if (value > max_value) {
+    if (errmsg) {
+      PyErr_Format(PyExc_OverflowError, 
+		   "value %g is greater than %s maximum %g", 
+		   value, errmsg, max_value);
+    }
+    return 0;
+  }
+  return 1;
+}
+
+
+SWIGINTERN int
+  SWIG_AsVal_double(PyObject *obj, double *val)
+{
+  if (PyFloat_Check(obj)) {
+    if (val) *val = PyFloat_AS_DOUBLE(obj);
+    return 1;
+  }  
+  if (PyInt_Check(obj)) {
+    if (val) *val = PyInt_AS_LONG(obj);
+    return 1;
+  }
+  if (PyLong_Check(obj)) {
+    double v = PyLong_AsDouble(obj);
+    if (!PyErr_Occurred()) {
+      if (val) *val = v;
+      return 1;
+    } else {
+      if (!val) PyErr_Clear();
+      return 0;
+    }
+  }
+  if (val) {
+    SWIG_type_error("double", obj);
+  }
+  return 0;
+}
+
+
+SWIGINTERN int
+  SWIG_AsVal_float(PyObject *obj, float *val)
+{
+  const char* errmsg = val ? "float" : (char*)0;
+  double v;
+  if (SWIG_AsVal_double(obj, &v)) {
+    if (SWIG_CheckDoubleInRange(v, -FLT_MAX, FLT_MAX, errmsg)) {
+      if (val) *val = (float)(v);
+      return 1;
+    } else {
+      return 0;
+    }
+  } else {
+    PyErr_Clear();
+  }
+  if (val) {
+    SWIG_type_error(errmsg, obj);
+  }
+  return 0;
+}
+
+
+SWIGINTERNSHORT float
+SWIG_As_float(PyObject* obj)
+{
+  float v;
+  if (!SWIG_AsVal_float(obj, &v)) {
+    /*
+      this is needed to make valgrind/purify happier. 
+     */
+    memset((void*)&v, 0, sizeof(float));
+  }
+  return v;
+}
+
+  
+SWIGINTERNSHORT int
+SWIG_Check_float(PyObject* obj)
+{
+  return SWIG_AsVal_float(obj, (float*)0);
+}
+
+
+  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
+#define SWIG_From_float PyFloat_FromDouble
+/*@@*/
+
+
+SWIGINTERN int
+SWIG_AsCharArray(PyObject *obj, char *val, size_t size)
+{ 
+  char* cptr; size_t csize;  
+  if (SWIG_AsCharPtrAndSize(obj, &cptr, &csize)) {
+    /* in C you can do:        
+
+         char x[5] = "hello"; 
+
+        ie, assing the array using an extra '0' char.
+    */
+    if ((csize == size + 1) && !(cptr[csize-1])) --csize;
+    if (csize <= size) {
+      if (val) {
+	if (csize) memcpy(val, cptr, csize);
+	if (csize < size) memset(val + csize, 0, size - csize);
+      }
+      return 1;
+    }
+  }
+  if (val) {
+    PyErr_Format(PyExc_TypeError,
+		 "a char array of maximum size %lu is expected", 
+		 (unsigned long) size);
+  }
+  return 0;
+}
+
+
+SWIGINTERNSHORT PyObject *
+SWIG_FromCharArray(const char* carray, size_t size)
+{
+  if (size > INT_MAX) {
+    return Py_None;    
+  } else {
+    return PyString_FromStringAndSize(carray, (int)(size));
+  }
+}
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+static PyObject *_wrap_s3d_evt_event_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    uint8_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_evt_event_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint8_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint8_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->event = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_evt_event_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    uint8_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_evt_event_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->event);
+    
+    {
+        uint8_t * resultptr;
+        resultptr = (uint8_t *) malloc(sizeof(uint8_t));
+        memmove(resultptr, &result, sizeof(uint8_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint8_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_evt_length_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    int arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_evt_length_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (int)(SWIG_As_int(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->length = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_evt_length_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_evt_length_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (int) ((arg1)->length);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_evt_buf_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    char *arg2 = (char *) 0 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_evt_buf_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
+        SWIG_arg_fail(2);SWIG_fail;
+    }
+    {
+        if (arg1->buf) free((char*)arg1->buf);
+        if (arg2) {
+            arg1->buf = (char *) malloc(strlen(arg2)+1);
+            strcpy((char*)arg1->buf,arg2);
+        } else {
+            arg1->buf = 0;
+        }
+    }
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_evt_buf_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    char *result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_evt_buf_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (char *) ((arg1)->buf);
+    
+    resultobj = SWIG_FromCharPtr(result);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_evt_next_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    struct s3d_evt *arg2 = (struct s3d_evt *) 0 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_evt_next_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    if (arg1) (arg1)->next = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_evt_next_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    struct s3d_evt *result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_evt_next_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (struct s3d_evt *) ((arg1)->next);
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_evt, 0);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_new_s3d_evt(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":new_s3d_evt")) goto fail;
+    result = (struct s3d_evt *)(struct s3d_evt *) calloc(1, sizeof(struct s3d_evt));
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_evt, 1);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_delete_s3d_evt(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:delete_s3d_evt",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    free((char *) arg1);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject * s3d_evt_swigregister(PyObject *self, PyObject *args) {
+    PyObject *obj;
+    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
+    SWIG_TypeClientData(SWIGTYPE_p_s3d_evt, obj);
+    Py_INCREF(obj);
+    return Py_BuildValue((char *)"");
+}
+static PyObject *_wrap_mcp_object_object_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    uint32_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_object_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->object = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_object_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    uint32_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_object_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->object);
+    
+    {
+        uint32_t * resultptr;
+        resultptr = (uint32_t *) malloc(sizeof(uint32_t));
+        memmove(resultptr, &result, sizeof(uint32_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint32_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_trans_x_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_trans_x_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->trans_x = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_trans_x_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_trans_x_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->trans_x);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_trans_y_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_trans_y_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->trans_y = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_trans_y_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_trans_y_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->trans_y);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_trans_z_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_trans_z_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->trans_z = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_trans_z_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_trans_z_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->trans_z);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_r_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_r_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->r = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_r_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_r_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->r);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_name_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    char *arg2 ;
+    char temp2[256] ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_name_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        if (!SWIG_AsCharArray(obj1, temp2, 256)) {
+            SWIG_arg_fail(2);SWIG_fail;
+        }
+        arg2 = temp2;
+    }
+    {
+        if (arg2) memcpy(arg1->name,arg2,256*sizeof(char));
+        else memset(arg1->name,0,256*sizeof(char));
+    }
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_mcp_object_name_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    char *result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_name_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (char *)(char *) ((arg1)->name);
+    
+    {
+        size_t size = 256;
+#ifndef SWIG_PRESERVE_CARRAY_SIZE
+        while (size && (result[size - 1] == '\0')) --size;
+#endif
+        resultobj = SWIG_FromCharArray(result, size);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_new_mcp_object(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":new_mcp_object")) goto fail;
+    result = (struct mcp_object *)(struct mcp_object *) calloc(1, sizeof(struct mcp_object));
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_mcp_object, 1);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_delete_mcp_object(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:delete_mcp_object",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    free((char *) arg1);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject * mcp_object_swigregister(PyObject *self, PyObject *args) {
+    PyObject *obj;
+    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
+    SWIG_TypeClientData(SWIGTYPE_p_mcp_object, obj);
+    Py_INCREF(obj);
+    return Py_BuildValue((char *)"");
+}
+static PyObject *_wrap_s3d_obj_info_object_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    uint32_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_object_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->object = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_object_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    uint32_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_object_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->object);
+    
+    {
+        uint32_t * resultptr;
+        resultptr = (uint32_t *) malloc(sizeof(uint32_t));
+        memmove(resultptr, &result, sizeof(uint32_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint32_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_flags_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    uint32_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_flags_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->flags = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_flags_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    uint32_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_flags_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->flags);
+    
+    {
+        uint32_t * resultptr;
+        resultptr = (uint32_t *) malloc(sizeof(uint32_t));
+        memmove(resultptr, &result, sizeof(uint32_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint32_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_trans_x_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_trans_x_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->trans_x = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_trans_x_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_trans_x_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->trans_x);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_trans_y_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_trans_y_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->trans_y = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_trans_y_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_trans_y_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->trans_y);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_trans_z_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_trans_z_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->trans_z = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_trans_z_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_trans_z_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->trans_z);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_rot_x_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_rot_x_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->rot_x = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_rot_x_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_rot_x_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->rot_x);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_rot_y_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_rot_y_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->rot_y = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_rot_y_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_rot_y_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->rot_y);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_rot_z_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_rot_z_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->rot_z = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_rot_z_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_rot_z_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->rot_z);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_scale_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_scale_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->scale = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_scale_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_scale_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->scale);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_r_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_r_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    if (arg1) (arg1)->r = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_r_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_r_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float) ((arg1)->r);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_name_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    char *arg2 ;
+    char temp2[256] ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_name_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        if (!SWIG_AsCharArray(obj1, temp2, 256)) {
+            SWIG_arg_fail(2);SWIG_fail;
+        }
+        arg2 = temp2;
+    }
+    {
+        if (arg2) memcpy(arg1->name,arg2,256*sizeof(char));
+        else memset(arg1->name,0,256*sizeof(char));
+    }
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_obj_info_name_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    char *result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_name_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (char *)(char *) ((arg1)->name);
+    
+    {
+        size_t size = 256;
+#ifndef SWIG_PRESERVE_CARRAY_SIZE
+        while (size && (result[size - 1] == '\0')) --size;
+#endif
+        resultobj = SWIG_FromCharArray(result, size);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_new_s3d_obj_info(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":new_s3d_obj_info")) goto fail;
+    result = (struct s3d_obj_info *)(struct s3d_obj_info *) calloc(1, sizeof(struct s3d_obj_info));
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_obj_info, 1);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_delete_s3d_obj_info(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:delete_s3d_obj_info",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    free((char *) arg1);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject * s3d_obj_info_swigregister(PyObject *self, PyObject *args) {
+    PyObject *obj;
+    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
+    SWIG_TypeClientData(SWIGTYPE_p_s3d_obj_info, obj);
+    Py_INCREF(obj);
+    return Py_BuildValue((char *)"");
+}
+static PyObject *_wrap_s3d_but_info_button_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
+    uint8_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_but_info_button_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint8_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint8_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->button = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_but_info_button_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
+    uint8_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_but_info_button_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->button);
+    
+    {
+        uint8_t * resultptr;
+        resultptr = (uint8_t *) malloc(sizeof(uint8_t));
+        memmove(resultptr, &result, sizeof(uint8_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint8_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_but_info_state_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
+    uint8_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_but_info_state_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint8_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint8_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->state = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_but_info_state_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
+    uint8_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_but_info_state_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->state);
+    
+    {
+        uint8_t * resultptr;
+        resultptr = (uint8_t *) malloc(sizeof(uint8_t));
+        memmove(resultptr, &result, sizeof(uint8_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint8_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_new_s3d_but_info(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_but_info *result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":new_s3d_but_info")) goto fail;
+    result = (struct s3d_but_info *)(struct s3d_but_info *) calloc(1, sizeof(struct s3d_but_info));
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_but_info, 1);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_delete_s3d_but_info(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:delete_s3d_but_info",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    free((char *) arg1);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject * s3d_but_info_swigregister(PyObject *self, PyObject *args) {
+    PyObject *obj;
+    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
+    SWIG_TypeClientData(SWIGTYPE_p_s3d_but_info, obj);
+    Py_INCREF(obj);
+    return Py_BuildValue((char *)"");
+}
+static PyObject *_wrap_s3d_key_event_keysym_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    uint16_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_key_event_keysym_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->keysym = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_key_event_keysym_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    uint16_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_key_event_keysym_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->keysym);
+    
+    {
+        uint16_t * resultptr;
+        resultptr = (uint16_t *) malloc(sizeof(uint16_t));
+        memmove(resultptr, &result, sizeof(uint16_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint16_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_key_event_unicode_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    uint16_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_key_event_unicode_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->unicode = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_key_event_unicode_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    uint16_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_key_event_unicode_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->unicode);
+    
+    {
+        uint16_t * resultptr;
+        resultptr = (uint16_t *) malloc(sizeof(uint16_t));
+        memmove(resultptr, &result, sizeof(uint16_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint16_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_key_event_modifier_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    uint16_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_key_event_modifier_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->modifier = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_key_event_modifier_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    uint16_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_key_event_modifier_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->modifier);
+    
+    {
+        uint16_t * resultptr;
+        resultptr = (uint16_t *) malloc(sizeof(uint16_t));
+        memmove(resultptr, &result, sizeof(uint16_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint16_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_key_event_state_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    uint16_t arg2 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_key_event_state_set",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    if (arg1) (arg1)->state = arg2;
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_key_event_state_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    uint16_t result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_key_event_state_get",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result =  ((arg1)->state);
+    
+    {
+        uint16_t * resultptr;
+        resultptr = (uint16_t *) malloc(sizeof(uint16_t));
+        memmove(resultptr, &result, sizeof(uint16_t));
+        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint16_t, 1);
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_new_s3d_key_event(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":new_s3d_key_event")) goto fail;
+    result = (struct s3d_key_event *)(struct s3d_key_event *) calloc(1, sizeof(struct s3d_key_event));
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_key_event, 1);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_delete_s3d_key_event(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:delete_s3d_key_event",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    free((char *) arg1);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject * s3d_key_event_swigregister(PyObject *self, PyObject *args) {
+    PyObject *obj;
+    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
+    SWIG_TypeClientData(SWIGTYPE_p_s3d_key_event, obj);
+    Py_INCREF(obj);
+    return Py_BuildValue((char *)"");
+}
+static PyObject *_wrap_s3d_usage(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    
+    if(!PyArg_ParseTuple(args,(char *)":s3d_usage")) goto fail;
+    s3d_usage();
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_init(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int *arg1 = (int *) 0 ;
+    char ***arg2 = (char ***) 0 ;
+    char *arg3 = (char *) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_init",&obj0,&obj1,&obj2)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_p_char, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
+        SWIG_arg_fail(3);SWIG_fail;
+    }
+    result = (int)s3d_init(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_quit(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":s3d_quit")) goto fail;
+    result = (int)s3d_quit();
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_mainloop(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    void (*arg1)() = (void (*)()) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_mainloop",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_f___void, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (int)s3d_mainloop(arg1);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_vertex(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_push_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    result = (int)s3d_push_vertex(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_vertices(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_vertices",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_push_vertices(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_material(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    float arg5 ;
+    float arg6 ;
+    float arg7 ;
+    float arg8 ;
+    float arg9 ;
+    float arg10 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    PyObject * obj4 = 0 ;
+    PyObject * obj5 = 0 ;
+    PyObject * obj6 = 0 ;
+    PyObject * obj7 = 0 ;
+    PyObject * obj8 = 0 ;
+    PyObject * obj9 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:s3d_push_material",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    {
+        arg5 = (float)(SWIG_As_float(obj4)); 
+        if (SWIG_arg_fail(5)) SWIG_fail;
+    }
+    {
+        arg6 = (float)(SWIG_As_float(obj5)); 
+        if (SWIG_arg_fail(6)) SWIG_fail;
+    }
+    {
+        arg7 = (float)(SWIG_As_float(obj6)); 
+        if (SWIG_arg_fail(7)) SWIG_fail;
+    }
+    {
+        arg8 = (float)(SWIG_As_float(obj7)); 
+        if (SWIG_arg_fail(8)) SWIG_fail;
+    }
+    {
+        arg9 = (float)(SWIG_As_float(obj8)); 
+        if (SWIG_arg_fail(9)) SWIG_fail;
+    }
+    {
+        arg10 = (float)(SWIG_As_float(obj9)); 
+        if (SWIG_arg_fail(10)) SWIG_fail;
+    }
+    result = (int)s3d_push_material(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_material(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    float arg5 ;
+    float arg6 ;
+    float arg7 ;
+    float arg8 ;
+    float arg9 ;
+    float arg10 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    PyObject * obj4 = 0 ;
+    PyObject * obj5 = 0 ;
+    PyObject * obj6 = 0 ;
+    PyObject * obj7 = 0 ;
+    PyObject * obj8 = 0 ;
+    PyObject * obj9 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:s3d_pep_material",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    {
+        arg5 = (float)(SWIG_As_float(obj4)); 
+        if (SWIG_arg_fail(5)) SWIG_fail;
+    }
+    {
+        arg6 = (float)(SWIG_As_float(obj5)); 
+        if (SWIG_arg_fail(6)) SWIG_fail;
+    }
+    {
+        arg7 = (float)(SWIG_As_float(obj6)); 
+        if (SWIG_arg_fail(7)) SWIG_fail;
+    }
+    {
+        arg8 = (float)(SWIG_As_float(obj7)); 
+        if (SWIG_arg_fail(8)) SWIG_fail;
+    }
+    {
+        arg9 = (float)(SWIG_As_float(obj8)); 
+        if (SWIG_arg_fail(9)) SWIG_fail;
+    }
+    {
+        arg10 = (float)(SWIG_As_float(obj9)); 
+        if (SWIG_arg_fail(10)) SWIG_fail;
+    }
+    result = (int)s3d_pep_material(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_material_a(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    float arg5 ;
+    float arg6 ;
+    float arg7 ;
+    float arg8 ;
+    float arg9 ;
+    float arg10 ;
+    float arg11 ;
+    float arg12 ;
+    float arg13 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    PyObject * obj4 = 0 ;
+    PyObject * obj5 = 0 ;
+    PyObject * obj6 = 0 ;
+    PyObject * obj7 = 0 ;
+    PyObject * obj8 = 0 ;
+    PyObject * obj9 = 0 ;
+    PyObject * obj10 = 0 ;
+    PyObject * obj11 = 0 ;
+    PyObject * obj12 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:s3d_push_material_a",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    {
+        arg5 = (float)(SWIG_As_float(obj4)); 
+        if (SWIG_arg_fail(5)) SWIG_fail;
+    }
+    {
+        arg6 = (float)(SWIG_As_float(obj5)); 
+        if (SWIG_arg_fail(6)) SWIG_fail;
+    }
+    {
+        arg7 = (float)(SWIG_As_float(obj6)); 
+        if (SWIG_arg_fail(7)) SWIG_fail;
+    }
+    {
+        arg8 = (float)(SWIG_As_float(obj7)); 
+        if (SWIG_arg_fail(8)) SWIG_fail;
+    }
+    {
+        arg9 = (float)(SWIG_As_float(obj8)); 
+        if (SWIG_arg_fail(9)) SWIG_fail;
+    }
+    {
+        arg10 = (float)(SWIG_As_float(obj9)); 
+        if (SWIG_arg_fail(10)) SWIG_fail;
+    }
+    {
+        arg11 = (float)(SWIG_As_float(obj10)); 
+        if (SWIG_arg_fail(11)) SWIG_fail;
+    }
+    {
+        arg12 = (float)(SWIG_As_float(obj11)); 
+        if (SWIG_arg_fail(12)) SWIG_fail;
+    }
+    {
+        arg13 = (float)(SWIG_As_float(obj12)); 
+        if (SWIG_arg_fail(13)) SWIG_fail;
+    }
+    result = (int)s3d_push_material_a(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_materials_a(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_materials_a",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_push_materials_a(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_material_a(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    float arg5 ;
+    float arg6 ;
+    float arg7 ;
+    float arg8 ;
+    float arg9 ;
+    float arg10 ;
+    float arg11 ;
+    float arg12 ;
+    float arg13 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    PyObject * obj4 = 0 ;
+    PyObject * obj5 = 0 ;
+    PyObject * obj6 = 0 ;
+    PyObject * obj7 = 0 ;
+    PyObject * obj8 = 0 ;
+    PyObject * obj9 = 0 ;
+    PyObject * obj10 = 0 ;
+    PyObject * obj11 = 0 ;
+    PyObject * obj12 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:s3d_pep_material_a",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    {
+        arg5 = (float)(SWIG_As_float(obj4)); 
+        if (SWIG_arg_fail(5)) SWIG_fail;
+    }
+    {
+        arg6 = (float)(SWIG_As_float(obj5)); 
+        if (SWIG_arg_fail(6)) SWIG_fail;
+    }
+    {
+        arg7 = (float)(SWIG_As_float(obj6)); 
+        if (SWIG_arg_fail(7)) SWIG_fail;
+    }
+    {
+        arg8 = (float)(SWIG_As_float(obj7)); 
+        if (SWIG_arg_fail(8)) SWIG_fail;
+    }
+    {
+        arg9 = (float)(SWIG_As_float(obj8)); 
+        if (SWIG_arg_fail(9)) SWIG_fail;
+    }
+    {
+        arg10 = (float)(SWIG_As_float(obj9)); 
+        if (SWIG_arg_fail(10)) SWIG_fail;
+    }
+    {
+        arg11 = (float)(SWIG_As_float(obj10)); 
+        if (SWIG_arg_fail(11)) SWIG_fail;
+    }
+    {
+        arg12 = (float)(SWIG_As_float(obj11)); 
+        if (SWIG_arg_fail(12)) SWIG_fail;
+    }
+    {
+        arg13 = (float)(SWIG_As_float(obj12)); 
+        if (SWIG_arg_fail(13)) SWIG_fail;
+    }
+    result = (int)s3d_pep_material_a(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_materials_a(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_materials_a",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_pep_materials_a(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_load_materials_a(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint32_t arg3 ;
+    uint16_t arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_load_materials_a",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        arg4 = *argp;
+    }
+    result = (int)s3d_load_materials_a(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_polygon(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    uint32_t arg3 ;
+    uint32_t arg4 ;
+    uint32_t arg5 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    PyObject * obj4 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOOO:s3d_push_polygon",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        arg4 = *argp;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(5)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(5)) SWIG_fail;
+        arg5 = *argp;
+    }
+    result = (int)s3d_push_polygon(arg1,arg2,arg3,arg4,arg5);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_polygons(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t *arg2 = (uint32_t *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_polygons",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_push_polygons(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_line(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    uint32_t arg3 ;
+    uint32_t arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_push_line",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        arg4 = *argp;
+    }
+    result = (int)s3d_push_line(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_lines(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t *arg2 = (uint32_t *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_lines",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_push_lines(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_texture(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint16_t arg2 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_texture",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_push_texture(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_textures(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint16_t *arg2 = (uint16_t *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_textures",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_push_textures(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pop_vertex(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_vertex",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    result = (int)s3d_pop_vertex(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pop_polygon(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_polygon",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    result = (int)s3d_pop_polygon(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pop_material(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_material",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    result = (int)s3d_pop_material(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pop_texture(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_texture",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    result = (int)s3d_pop_texture(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pop_line(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_line",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    result = (int)s3d_pop_line(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_line_normals(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_line_normals",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_pep_line_normals(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_polygon_normals(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_polygon_normals",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_pep_polygon_normals(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_polygon_tex_coord(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    float arg5 ;
+    float arg6 ;
+    float arg7 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    PyObject * obj4 = 0 ;
+    PyObject * obj5 = 0 ;
+    PyObject * obj6 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:s3d_pep_polygon_tex_coord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    {
+        arg5 = (float)(SWIG_As_float(obj4)); 
+        if (SWIG_arg_fail(5)) SWIG_fail;
+    }
+    {
+        arg6 = (float)(SWIG_As_float(obj5)); 
+        if (SWIG_arg_fail(6)) SWIG_fail;
+    }
+    {
+        arg7 = (float)(SWIG_As_float(obj6)); 
+        if (SWIG_arg_fail(7)) SWIG_fail;
+    }
+    result = (int)s3d_pep_polygon_tex_coord(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_polygon_tex_coords(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_polygon_tex_coords",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_pep_polygon_tex_coords(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_material_texture(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pep_material_texture",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    result = (int)s3d_pep_material_texture(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_vertex(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_pep_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    result = (int)s3d_pep_vertex(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_vertices(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_vertices",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_pep_vertices(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_line(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    int arg2 ;
+    int arg3 ;
+    int arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_pep_line",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (int)(SWIG_As_int(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (int)(SWIG_As_int(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (int)(SWIG_As_int(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    result = (int)s3d_pep_line(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pep_lines(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t *arg2 = (uint32_t *) 0 ;
+    uint16_t arg3 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_lines",&obj0,&obj1,&obj2)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    result = (int)s3d_pep_lines(arg1,arg2,arg3);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_load_line_normals(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint32_t arg3 ;
+    uint16_t arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_load_line_normals",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        arg4 = *argp;
+    }
+    result = (int)s3d_load_line_normals(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_load_polygon_normals(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint32_t arg3 ;
+    uint16_t arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_load_polygon_normals",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        arg4 = *argp;
+    }
+    result = (int)s3d_load_polygon_normals(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_load_polygon_tex_coords(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float *arg2 = (float *) 0 ;
+    uint32_t arg3 ;
+    uint16_t arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_load_polygon_tex_coords",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        arg4 = *argp;
+    }
+    result = (int)s3d_load_polygon_tex_coords(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_load_texture(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    uint16_t arg3 ;
+    uint16_t arg4 ;
+    uint16_t arg5 ;
+    uint16_t arg6 ;
+    uint8_t *arg7 = (uint8_t *) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    PyObject * obj4 = 0 ;
+    PyObject * obj5 = 0 ;
+    PyObject * obj6 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:s3d_load_texture",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(3)) SWIG_fail;
+        arg3 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(4)) SWIG_fail;
+        arg4 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(5)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(5)) SWIG_fail;
+        arg5 = *argp;
+    }
+    {
+        uint16_t * argp;
+        SWIG_Python_ConvertPtr(obj5, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(6)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint16_t");
+        }
+        if (SWIG_arg_fail(6)) SWIG_fail;
+        arg6 = *argp;
+    }
+    SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(7)) SWIG_fail;
+    result = (int)s3d_load_texture(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_new_object(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":s3d_new_object")) goto fail;
+    result = (int)s3d_new_object();
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_del_object(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_del_object",&obj0)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    result = (int)s3d_del_object(arg1);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_clone(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_clone",&obj0)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    result = (int)s3d_clone(arg1);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_clone_target(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    int arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_clone_target",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (int)(SWIG_As_int(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    result = (int)s3d_clone_target(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_link(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    int arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_link",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (int)(SWIG_As_int(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    result = (int)s3d_link(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_unlink(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_unlink",&obj0)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    result = (int)s3d_unlink(arg1);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_flags_on(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_flags_on",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    result = (int)s3d_flags_on(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_flags_off(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    uint32_t arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_flags_off",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        uint32_t * argp;
+        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint32_t");
+        }
+        if (SWIG_arg_fail(2)) SWIG_fail;
+        arg2 = *argp;
+    }
+    result = (int)s3d_flags_off(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_translate(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_translate",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    result = (int)s3d_translate(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_rotate(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    float arg3 ;
+    float arg4 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    PyObject * obj3 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_rotate",&obj0,&obj1,&obj2,&obj3)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    {
+        arg3 = (float)(SWIG_As_float(obj2)); 
+        if (SWIG_arg_fail(3)) SWIG_fail;
+    }
+    {
+        arg4 = (float)(SWIG_As_float(obj3)); 
+        if (SWIG_arg_fail(4)) SWIG_fail;
+    }
+    result = (int)s3d_rotate(arg1,arg2,arg3,arg4);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_scale(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    float arg2 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_scale",&obj0,&obj1)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    {
+        arg2 = (float)(SWIG_As_float(obj1)); 
+        if (SWIG_arg_fail(2)) SWIG_fail;
+    }
+    result = (int)s3d_scale(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_import_model_file(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    char *arg1 = (char *) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_import_model_file",&obj0)) goto fail;
+    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
+        SWIG_arg_fail(1);SWIG_fail;
+    }
+    result = (int)s3d_import_model_file(arg1);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_open_file(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    char *arg1 = (char *) 0 ;
+    char **arg2 = (char **) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_open_file",&obj0,&obj1)) goto fail;
+    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
+        SWIG_arg_fail(1);SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_char, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    result = (int)s3d_open_file(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_select_font(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    char *arg1 = (char *) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_select_font",&obj0)) goto fail;
+    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
+        SWIG_arg_fail(1);SWIG_fail;
+    }
+    result = (int)s3d_select_font(arg1);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_draw_string(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    char *arg1 = (char *) 0 ;
+    float *arg2 = (float *) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_draw_string",&obj0,&obj1)) goto fail;
+    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
+        SWIG_arg_fail(1);SWIG_fail;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    result = (int)s3d_draw_string(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_vector_length(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    float *arg1 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_vector_length",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (float)s3d_vector_length(arg1);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_vector_dot_product(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    float *arg1 ;
+    float *arg2 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_vector_dot_product",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    result = (float)s3d_vector_dot_product(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_vector_substract(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    float *arg1 ;
+    float *arg2 ;
+    float *arg3 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    PyObject * obj2 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_vector_substract",&obj0,&obj1,&obj2)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(3)) SWIG_fail;
+    s3d_vector_substract(arg1,arg2,arg3);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_vector_angle(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    float *arg1 ;
+    float *arg2 ;
+    float result;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_vector_angle",&obj0,&obj1)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    result = (float)s3d_vector_angle(arg1,arg2);
+    
+    {
+        resultobj = SWIG_From_float((float)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_push_event(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_push_event",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    s3d_push_event(arg1);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_pop_event(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":s3d_pop_event")) goto fail;
+    result = (struct s3d_evt *)s3d_pop_event();
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_evt, 0);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_find_event(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    uint8_t arg1 ;
+    struct s3d_evt *result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_find_event",&obj0)) goto fail;
+    {
+        uint8_t * argp;
+        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint8_t");
+        }
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        arg1 = *argp;
+    }
+    result = (struct s3d_evt *)s3d_find_event(arg1);
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_evt, 0);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_delete_event(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_delete_event",&obj0)) goto fail;
+    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(1)) SWIG_fail;
+    result = (int)s3d_delete_event(arg1);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_set_callback(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    uint8_t arg1 ;
+    s3d_cb arg2 = (s3d_cb) 0 ;
+    PyObject * obj0 = 0 ;
+    PyObject * obj1 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_set_callback",&obj0,&obj1)) goto fail;
+    {
+        uint8_t * argp;
+        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint8_t");
+        }
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        arg1 = *argp;
+    }
+    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_struct_s3d_evt__int, SWIG_POINTER_EXCEPTION | 0);
+    if (SWIG_arg_fail(2)) SWIG_fail;
+    s3d_set_callback(arg1,arg2);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_clear_callback(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    uint8_t arg1 ;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_clear_callback",&obj0)) goto fail;
+    {
+        uint8_t * argp;
+        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint8_t");
+        }
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        arg1 = *argp;
+    }
+    s3d_clear_callback(arg1);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_ignore_callback(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    uint8_t arg1 ;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_ignore_callback",&obj0)) goto fail;
+    {
+        uint8_t * argp;
+        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint8_t");
+        }
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        arg1 = *argp;
+    }
+    s3d_ignore_callback(arg1);
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_get_callback(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    uint8_t arg1 ;
+    s3d_cb result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_get_callback",&obj0)) goto fail;
+    {
+        uint8_t * argp;
+        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        if (argp == NULL) {
+            SWIG_null_ref("uint8_t");
+        }
+        if (SWIG_arg_fail(1)) SWIG_fail;
+        arg1 = *argp;
+    }
+    result = (s3d_cb)s3d_get_callback(arg1);
+    
+    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_p_struct_s3d_evt__int, 0);
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_process_stack(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    
+    if(!PyArg_ParseTuple(args,(char *)":s3d_process_stack")) goto fail;
+    s3d_process_stack();
+    
+    Py_INCREF(Py_None); resultobj = Py_None;
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_mcp_focus(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg1 ;
+    int result;
+    PyObject * obj0 = 0 ;
+    
+    if(!PyArg_ParseTuple(args,(char *)"O:s3d_mcp_focus",&obj0)) goto fail;
+    {
+        arg1 = (int)(SWIG_As_int(obj0)); 
+        if (SWIG_arg_fail(1)) SWIG_fail;
+    }
+    result = (int)s3d_mcp_focus(arg1);
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyObject *_wrap_s3d_net_check(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int result;
+    
+    if(!PyArg_ParseTuple(args,(char *)":s3d_net_check")) goto fail;
+    result = (int)s3d_net_check();
+    
+    {
+        resultobj = SWIG_From_int((int)(result)); 
+    }
+    return resultobj;
+    fail:
+    return NULL;
+}
+
+
+static PyMethodDef SwigMethods[] = {
+	 { (char *)"s3d_evt_event_set", _wrap_s3d_evt_event_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_evt_event_get", _wrap_s3d_evt_event_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_evt_length_set", _wrap_s3d_evt_length_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_evt_length_get", _wrap_s3d_evt_length_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_evt_buf_set", _wrap_s3d_evt_buf_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_evt_buf_get", _wrap_s3d_evt_buf_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_evt_next_set", _wrap_s3d_evt_next_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_evt_next_get", _wrap_s3d_evt_next_get, METH_VARARGS, NULL},
+	 { (char *)"new_s3d_evt", _wrap_new_s3d_evt, METH_VARARGS, NULL},
+	 { (char *)"delete_s3d_evt", _wrap_delete_s3d_evt, METH_VARARGS, NULL},
+	 { (char *)"s3d_evt_swigregister", s3d_evt_swigregister, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_object_set", _wrap_mcp_object_object_set, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_object_get", _wrap_mcp_object_object_get, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_trans_x_set", _wrap_mcp_object_trans_x_set, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_trans_x_get", _wrap_mcp_object_trans_x_get, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_trans_y_set", _wrap_mcp_object_trans_y_set, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_trans_y_get", _wrap_mcp_object_trans_y_get, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_trans_z_set", _wrap_mcp_object_trans_z_set, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_trans_z_get", _wrap_mcp_object_trans_z_get, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_r_set", _wrap_mcp_object_r_set, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_r_get", _wrap_mcp_object_r_get, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_name_set", _wrap_mcp_object_name_set, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_name_get", _wrap_mcp_object_name_get, METH_VARARGS, NULL},
+	 { (char *)"new_mcp_object", _wrap_new_mcp_object, METH_VARARGS, NULL},
+	 { (char *)"delete_mcp_object", _wrap_delete_mcp_object, METH_VARARGS, NULL},
+	 { (char *)"mcp_object_swigregister", mcp_object_swigregister, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_object_set", _wrap_s3d_obj_info_object_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_object_get", _wrap_s3d_obj_info_object_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_flags_set", _wrap_s3d_obj_info_flags_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_flags_get", _wrap_s3d_obj_info_flags_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_trans_x_set", _wrap_s3d_obj_info_trans_x_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_trans_x_get", _wrap_s3d_obj_info_trans_x_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_trans_y_set", _wrap_s3d_obj_info_trans_y_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_trans_y_get", _wrap_s3d_obj_info_trans_y_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_trans_z_set", _wrap_s3d_obj_info_trans_z_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_trans_z_get", _wrap_s3d_obj_info_trans_z_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_rot_x_set", _wrap_s3d_obj_info_rot_x_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_rot_x_get", _wrap_s3d_obj_info_rot_x_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_rot_y_set", _wrap_s3d_obj_info_rot_y_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_rot_y_get", _wrap_s3d_obj_info_rot_y_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_rot_z_set", _wrap_s3d_obj_info_rot_z_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_rot_z_get", _wrap_s3d_obj_info_rot_z_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_scale_set", _wrap_s3d_obj_info_scale_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_scale_get", _wrap_s3d_obj_info_scale_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_r_set", _wrap_s3d_obj_info_r_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_r_get", _wrap_s3d_obj_info_r_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_name_set", _wrap_s3d_obj_info_name_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_name_get", _wrap_s3d_obj_info_name_get, METH_VARARGS, NULL},
+	 { (char *)"new_s3d_obj_info", _wrap_new_s3d_obj_info, METH_VARARGS, NULL},
+	 { (char *)"delete_s3d_obj_info", _wrap_delete_s3d_obj_info, METH_VARARGS, NULL},
+	 { (char *)"s3d_obj_info_swigregister", s3d_obj_info_swigregister, METH_VARARGS, NULL},
+	 { (char *)"s3d_but_info_button_set", _wrap_s3d_but_info_button_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_but_info_button_get", _wrap_s3d_but_info_button_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_but_info_state_set", _wrap_s3d_but_info_state_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_but_info_state_get", _wrap_s3d_but_info_state_get, METH_VARARGS, NULL},
+	 { (char *)"new_s3d_but_info", _wrap_new_s3d_but_info, METH_VARARGS, NULL},
+	 { (char *)"delete_s3d_but_info", _wrap_delete_s3d_but_info, METH_VARARGS, NULL},
+	 { (char *)"s3d_but_info_swigregister", s3d_but_info_swigregister, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_keysym_set", _wrap_s3d_key_event_keysym_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_keysym_get", _wrap_s3d_key_event_keysym_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_unicode_set", _wrap_s3d_key_event_unicode_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_unicode_get", _wrap_s3d_key_event_unicode_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_modifier_set", _wrap_s3d_key_event_modifier_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_modifier_get", _wrap_s3d_key_event_modifier_get, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_state_set", _wrap_s3d_key_event_state_set, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_state_get", _wrap_s3d_key_event_state_get, METH_VARARGS, NULL},
+	 { (char *)"new_s3d_key_event", _wrap_new_s3d_key_event, METH_VARARGS, NULL},
+	 { (char *)"delete_s3d_key_event", _wrap_delete_s3d_key_event, METH_VARARGS, NULL},
+	 { (char *)"s3d_key_event_swigregister", s3d_key_event_swigregister, METH_VARARGS, NULL},
+	 { (char *)"s3d_usage", _wrap_s3d_usage, METH_VARARGS, NULL},
+	 { (char *)"s3d_init", _wrap_s3d_init, METH_VARARGS, NULL},
+	 { (char *)"s3d_quit", _wrap_s3d_quit, METH_VARARGS, NULL},
+	 { (char *)"s3d_mainloop", _wrap_s3d_mainloop, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_vertex", _wrap_s3d_push_vertex, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_vertices", _wrap_s3d_push_vertices, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_material", _wrap_s3d_push_material, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_material", _wrap_s3d_pep_material, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_material_a", _wrap_s3d_push_material_a, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_materials_a", _wrap_s3d_push_materials_a, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_material_a", _wrap_s3d_pep_material_a, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_materials_a", _wrap_s3d_pep_materials_a, METH_VARARGS, NULL},
+	 { (char *)"s3d_load_materials_a", _wrap_s3d_load_materials_a, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_polygon", _wrap_s3d_push_polygon, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_polygons", _wrap_s3d_push_polygons, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_line", _wrap_s3d_push_line, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_lines", _wrap_s3d_push_lines, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_texture", _wrap_s3d_push_texture, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_textures", _wrap_s3d_push_textures, METH_VARARGS, NULL},
+	 { (char *)"s3d_pop_vertex", _wrap_s3d_pop_vertex, METH_VARARGS, NULL},
+	 { (char *)"s3d_pop_polygon", _wrap_s3d_pop_polygon, METH_VARARGS, NULL},
+	 { (char *)"s3d_pop_material", _wrap_s3d_pop_material, METH_VARARGS, NULL},
+	 { (char *)"s3d_pop_texture", _wrap_s3d_pop_texture, METH_VARARGS, NULL},
+	 { (char *)"s3d_pop_line", _wrap_s3d_pop_line, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_line_normals", _wrap_s3d_pep_line_normals, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_polygon_normals", _wrap_s3d_pep_polygon_normals, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_polygon_tex_coord", _wrap_s3d_pep_polygon_tex_coord, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_polygon_tex_coords", _wrap_s3d_pep_polygon_tex_coords, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_material_texture", _wrap_s3d_pep_material_texture, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_vertex", _wrap_s3d_pep_vertex, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_vertices", _wrap_s3d_pep_vertices, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_line", _wrap_s3d_pep_line, METH_VARARGS, NULL},
+	 { (char *)"s3d_pep_lines", _wrap_s3d_pep_lines, METH_VARARGS, NULL},
+	 { (char *)"s3d_load_line_normals", _wrap_s3d_load_line_normals, METH_VARARGS, NULL},
+	 { (char *)"s3d_load_polygon_normals", _wrap_s3d_load_polygon_normals, METH_VARARGS, NULL},
+	 { (char *)"s3d_load_polygon_tex_coords", _wrap_s3d_load_polygon_tex_coords, METH_VARARGS, NULL},
+	 { (char *)"s3d_load_texture", _wrap_s3d_load_texture, METH_VARARGS, NULL},
+	 { (char *)"s3d_new_object", _wrap_s3d_new_object, METH_VARARGS, NULL},
+	 { (char *)"s3d_del_object", _wrap_s3d_del_object, METH_VARARGS, NULL},
+	 { (char *)"s3d_clone", _wrap_s3d_clone, METH_VARARGS, NULL},
+	 { (char *)"s3d_clone_target", _wrap_s3d_clone_target, METH_VARARGS, NULL},
+	 { (char *)"s3d_link", _wrap_s3d_link, METH_VARARGS, NULL},
+	 { (char *)"s3d_unlink", _wrap_s3d_unlink, METH_VARARGS, NULL},
+	 { (char *)"s3d_flags_on", _wrap_s3d_flags_on, METH_VARARGS, NULL},
+	 { (char *)"s3d_flags_off", _wrap_s3d_flags_off, METH_VARARGS, NULL},
+	 { (char *)"s3d_translate", _wrap_s3d_translate, METH_VARARGS, NULL},
+	 { (char *)"s3d_rotate", _wrap_s3d_rotate, METH_VARARGS, NULL},
+	 { (char *)"s3d_scale", _wrap_s3d_scale, METH_VARARGS, NULL},
+	 { (char *)"s3d_import_model_file", _wrap_s3d_import_model_file, METH_VARARGS, NULL},
+	 { (char *)"s3d_open_file", _wrap_s3d_open_file, METH_VARARGS, NULL},
+	 { (char *)"s3d_select_font", _wrap_s3d_select_font, METH_VARARGS, NULL},
+	 { (char *)"s3d_draw_string", _wrap_s3d_draw_string, METH_VARARGS, NULL},
+	 { (char *)"s3d_vector_length", _wrap_s3d_vector_length, METH_VARARGS, NULL},
+	 { (char *)"s3d_vector_dot_product", _wrap_s3d_vector_dot_product, METH_VARARGS, NULL},
+	 { (char *)"s3d_vector_substract", _wrap_s3d_vector_substract, METH_VARARGS, NULL},
+	 { (char *)"s3d_vector_angle", _wrap_s3d_vector_angle, METH_VARARGS, NULL},
+	 { (char *)"s3d_push_event", _wrap_s3d_push_event, METH_VARARGS, NULL},
+	 { (char *)"s3d_pop_event", _wrap_s3d_pop_event, METH_VARARGS, NULL},
+	 { (char *)"s3d_find_event", _wrap_s3d_find_event, METH_VARARGS, NULL},
+	 { (char *)"s3d_delete_event", _wrap_s3d_delete_event, METH_VARARGS, NULL},
+	 { (char *)"s3d_set_callback", _wrap_s3d_set_callback, METH_VARARGS, NULL},
+	 { (char *)"s3d_clear_callback", _wrap_s3d_clear_callback, METH_VARARGS, NULL},
+	 { (char *)"s3d_ignore_callback", _wrap_s3d_ignore_callback, METH_VARARGS, NULL},
+	 { (char *)"s3d_get_callback", _wrap_s3d_get_callback, METH_VARARGS, NULL},
+	 { (char *)"s3d_process_stack", _wrap_s3d_process_stack, METH_VARARGS, NULL},
+	 { (char *)"s3d_mcp_focus", _wrap_s3d_mcp_focus, METH_VARARGS, NULL},
+	 { (char *)"s3d_net_check", _wrap_s3d_net_check, METH_VARARGS, NULL},
+	 { NULL, NULL, 0, NULL }
+};
+
+
+/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */
+
+static swig_type_info _swigt__p_s3d_key_event[] = {{"_p_s3d_key_event", 0, "s3d_key_event *", 0, 0, 0, 0},{"_p_s3d_key_event", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_mcp_object[] = {{"_p_mcp_object", 0, "mcp_object *", 0, 0, 0, 0},{"_p_mcp_object", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_uint16_t[] = {{"_p_uint16_t", 0, "uint16_t *", 0, 0, 0, 0},{"_p_uint16_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_uint32_t[] = {{"_p_uint32_t", 0, "uint32_t *", 0, 0, 0, 0},{"_p_uint32_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_s3d_obj_info[] = {{"_p_s3d_obj_info", 0, "s3d_obj_info *", 0, 0, 0, 0},{"_p_s3d_obj_info", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_s3d_evt[] = {{"_p_s3d_evt", 0, "struct s3d_evt *", 0, 0, 0, 0},{"_p_s3d_evt", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_float[] = {{"_p_float", 0, "float *", 0, 0, 0, 0},{"_p_float", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_f___void[] = {{"_p_f___void", 0, "void (*)()", 0, 0, 0, 0},{"_p_f___void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_f_p_struct_s3d_evt__int[] = {{"_p_f_p_struct_s3d_evt__int", 0, "int (*)(struct s3d_evt *)|s3d_cb", 0, 0, 0, 0},{"_p_f_p_struct_s3d_evt__int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_p_p_char[] = {{"_p_p_p_char", 0, "char ***", 0, 0, 0, 0},{"_p_p_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0, 0, 0, 0},{"_p_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_s3d_but_info[] = {{"_p_s3d_but_info", 0, "s3d_but_info *", 0, 0, 0, 0},{"_p_s3d_but_info", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_uint8_t[] = {{"_p_uint8_t", 0, "uint8_t *", 0, 0, 0, 0},{"_p_uint8_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_S3DKey[] = {{"_p_S3DKey", 0, "enum S3DKey *|S3DKey *", 0, 0, 0, 0},{"_p_S3DKey", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+static swig_type_info _swigt__p_S3DMod[] = {{"_p_S3DMod", 0, "enum S3DMod *|S3DMod *", 0, 0, 0, 0},{"_p_S3DMod", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
+
+static swig_type_info *swig_types_initial[] = {
+_swigt__p_s3d_key_event, 
+_swigt__size_t, 
+_swigt__p_mcp_object, 
+_swigt__p_uint16_t, 
+_swigt__p_uint32_t, 
+_swigt__p_s3d_obj_info, 
+_swigt__p_s3d_evt, 
+_swigt__p_float, 
+_swigt__p_f___void, 
+_swigt__p_f_p_struct_s3d_evt__int, 
+_swigt__p_p_p_char, 
+_swigt__p_char, 
+_swigt__p_p_char, 
+_swigt__ptrdiff_t, 
+_swigt__p_s3d_but_info, 
+_swigt__p_uint8_t, 
+_swigt__p_S3DKey, 
+_swigt__p_int, 
+_swigt__p_S3DMod, 
+0
+};
+
+
+/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */
+
+static swig_const_info swig_const_table[] = {
+{0, 0, 0, 0.0, 0, 0}};
+
+#ifdef __cplusplus
+}
+#endif
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+    
+    /* Python-specific SWIG API */
+#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
+#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
+#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
+    
+    /* -----------------------------------------------------------------------------
+     * global variable support code.
+     * ----------------------------------------------------------------------------- */
+    
+    typedef struct swig_globalvar {
+        char       *name;                  /* Name of global variable */
+        PyObject *(*get_attr)();           /* Return the current value */
+        int       (*set_attr)(PyObject *); /* Set the value */
+        struct swig_globalvar *next;
+    } swig_globalvar;
+    
+    typedef struct swig_varlinkobject {
+        PyObject_HEAD
+        swig_globalvar *vars;
+    } swig_varlinkobject;
+    
+    static PyObject *
+    swig_varlink_repr(swig_varlinkobject *v) {
+        v = v;
+        return PyString_FromString("<Swig global variables>");
+    }
+    
+    static int
+    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
+        swig_globalvar  *var;
+        flags = flags;
+        fprintf(fp,"Swig global variables { ");
+        for (var = v->vars; var; var=var->next) {
+            fprintf(fp,"%s", var->name);
+            if (var->next) fprintf(fp,", ");
+        }
+        fprintf(fp," }\n");
+        return 0;
+    }
+    
+    static PyObject *
+    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
+        swig_globalvar *var = v->vars;
+        while (var) {
+            if (strcmp(var->name,n) == 0) {
+                return (*var->get_attr)();
+            }
+            var = var->next;
+        }
+        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+        return NULL;
+    }
+    
+    static int
+    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
+        swig_globalvar *var = v->vars;
+        while (var) {
+            if (strcmp(var->name,n) == 0) {
+                return (*var->set_attr)(p);
+            }
+            var = var->next;
+        }
+        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+        return 1;
+    }
+    
+    static PyTypeObject varlinktype = {
+        PyObject_HEAD_INIT(0)              
+        0,                                  /* Number of items in variable part (ob_size) */
+        (char *)"swigvarlink",              /* Type name (tp_name) */
+        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
+        0,                                  /* Itemsize (tp_itemsize) */
+        0,                                  /* Deallocator (tp_dealloc) */ 
+        (printfunc) swig_varlink_print,     /* Print (tp_print) */
+        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
+        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
+        0,                                  /* tp_compare */
+        (reprfunc) swig_varlink_repr,       /* tp_repr */
+        0,                                  /* tp_as_number */
+        0,                                  /* tp_as_sequence */
+        0,                                  /* tp_as_mapping */
+        0,                                  /* tp_hash */
+        0,                                  /* tp_call */
+        0,                                  /* tp_str */
+        0,                                  /* tp_getattro */
+        0,                                  /* tp_setattro */
+        0,                                  /* tp_as_buffer */
+        0,                                  /* tp_flags */
+        0,                                  /* tp_doc */
+#if PY_VERSION_HEX >= 0x02000000
+        0,                                  /* tp_traverse */
+        0,                                  /* tp_clear */
+#endif
+#if PY_VERSION_HEX >= 0x02010000
+        0,                                  /* tp_richcompare */
+        0,                                  /* tp_weaklistoffset */
+#endif
+#if PY_VERSION_HEX >= 0x02020000
+        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
+#endif
+#if PY_VERSION_HEX >= 0x02030000
+        0,                                  /* tp_del */
+#endif
+#ifdef COUNT_ALLOCS
+        0,0,0,0                             /* tp_alloc -> tp_next */
+#endif
+    };
+    
+    /* Create a variable linking object for use later */
+    static PyObject *
+    SWIG_Python_newvarlink(void) {
+        swig_varlinkobject *result = 0;
+        result = PyMem_NEW(swig_varlinkobject,1);
+        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
+        result->ob_type = &varlinktype;
+        result->vars = 0;
+        result->ob_refcnt = 0;
+        Py_XINCREF((PyObject *) result);
+        return ((PyObject*) result);
+    }
+    
+    static void
+    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
+        swig_varlinkobject *v;
+        swig_globalvar *gv;
+        v= (swig_varlinkobject *) p;
+        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
+        gv->name = (char *) malloc(strlen(name)+1);
+        strcpy(gv->name,name);
+        gv->get_attr = get_attr;
+        gv->set_attr = set_attr;
+        gv->next = v->vars;
+        v->vars = gv;
+    }
+    
+    /* -----------------------------------------------------------------------------
+     * constants/methods manipulation
+     * ----------------------------------------------------------------------------- */
+    
+    /* Install Constants */
+    static void
+    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
+        PyObject *obj = 0;
+        size_t i;
+        for (i = 0; constants[i].type; i++) {
+            switch(constants[i].type) {
+                case SWIG_PY_INT:
+                obj = PyInt_FromLong(constants[i].lvalue);
+                break;
+                case SWIG_PY_FLOAT:
+                obj = PyFloat_FromDouble(constants[i].dvalue);
+                break;
+                case SWIG_PY_STRING:
+                if (constants[i].pvalue) {
+                    obj = PyString_FromString((char *) constants[i].pvalue);
+                } else {
+                    Py_INCREF(Py_None);
+                    obj = Py_None;
+                }
+                break;
+                case SWIG_PY_POINTER:
+                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
+                break;
+                case SWIG_PY_BINARY:
+                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
+                break;
+                default:
+                obj = 0;
+                break;
+            }
+            if (obj) {
+                PyDict_SetItemString(d,constants[i].name,obj);
+                Py_DECREF(obj);
+            }
+        }
+    }
+    
+    /* -----------------------------------------------------------------------------*/
+    /* Fix SwigMethods to carry the callback ptrs when needed */
+    /* -----------------------------------------------------------------------------*/
+    
+    static void
+    SWIG_Python_FixMethods(PyMethodDef *methods,
+    swig_const_info *const_table,
+    swig_type_info **types,
+    swig_type_info **types_initial) {
+        size_t i;
+        for (i = 0; methods[i].ml_name; ++i) {
+            char *c = methods[i].ml_doc;
+            if (c && (c = strstr(c, "swig_ptr: "))) {
+                int j;
+                swig_const_info *ci = 0;
+                char *name = c + 10;
+                for (j = 0; const_table[j].type; j++) {
+                    if (strncmp(const_table[j].name, name, 
+                    strlen(const_table[j].name)) == 0) {
+                        ci = &(const_table[j]);
+                        break;
+                    }
+                }
+                if (ci) {
+                    size_t shift = (ci->ptype) - types;
+                    swig_type_info *ty = types_initial[shift];
+                    size_t ldoc = (c - methods[i].ml_doc);
+                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
+                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
+                    char *buff = ndoc;
+                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
+                    strncpy(buff, methods[i].ml_doc, ldoc);
+                    buff += ldoc;
+                    strncpy(buff, "swig_ptr: ", 10);
+                    buff += 10;
+                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
+                    methods[i].ml_doc = ndoc;
+                }
+            }
+        }
+    }
+    
+    /* -----------------------------------------------------------------------------*
+     *  Initialize type list
+     * -----------------------------------------------------------------------------*/
+    
+#if PY_MAJOR_VERSION < 2
+    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
+    is copied out of Python/modsupport.c in python version 2.3.4 */
+    static int
+    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
+    {
+        PyObject *dict;
+        if (!PyModule_Check(m)) {
+            PyErr_SetString(PyExc_TypeError,
+            "PyModule_AddObject() needs module as first arg");
+            return -1;
+        }
+        if (!o) {
+            PyErr_SetString(PyExc_TypeError,
+            "PyModule_AddObject() needs non-NULL value");
+            return -1;
+        }
+        
+        dict = PyModule_GetDict(m);
+        if (dict == NULL) {
+            /* Internal error -- modules must have a dict! */
+            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
+            PyModule_GetName(m));
+            return -1;
+        }
+        if (PyDict_SetItemString(dict, name, o))
+        return -1;
+        Py_DECREF(o);
+        return 0;
+    }
+#endif
+    
+    static swig_type_info **
+    SWIG_Python_SetTypeListHandle(swig_type_info **type_list_handle) {
+        static PyMethodDef swig_empty_runtime_method_table[] = {
+            {
+                NULL, NULL, 0, NULL
+            } 
+        };/* Sentinel */
+        
+        PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
+        swig_empty_runtime_method_table);
+        PyObject *pointer = PyCObject_FromVoidPtr((void *) type_list_handle, NULL);
+        if (pointer && module) {
+            PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
+        }
+        return type_list_handle;
+    } 
+    
+    static swig_type_info **
+    SWIG_Python_LookupTypePointer(swig_type_info **type_list_handle) {
+        swig_type_info **type_pointer;
+        
+        /* first check if module already created */
+        type_pointer = SWIG_Python_GetTypeListHandle();
+        if (type_pointer) {
+            return type_pointer;
+        } else {
+            /* create a new module and variable */
+            return SWIG_Python_SetTypeListHandle(type_list_handle);
+        }
+    }
+    
+#ifdef __cplusplus
+}
+#endif
+
+/* -----------------------------------------------------------------------------*
+ *  Partial Init method
+ * -----------------------------------------------------------------------------*/
+
+#ifdef SWIG_LINK_RUNTIME
+#ifdef __cplusplus
+extern "C"
+#endif
+SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
+#endif
+
+#ifdef __cplusplus
+extern "C"
+#endif
+SWIGEXPORT(void) SWIG_init(void) {
+    static PyObject *SWIG_globals = 0; 
+    static int       typeinit = 0;
+    PyObject *m, *d;
+    int       i;
+    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
+    
+    /* Fix SwigMethods to carry the callback ptrs when needed */
+    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
+    
+    m = Py_InitModule((char *) SWIG_name, SwigMethods);
+    d = PyModule_GetDict(m);
+    
+    if (!typeinit) {
+#ifdef SWIG_LINK_RUNTIME
+        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
+#else
+#  ifndef SWIG_STATIC_RUNTIME
+        swig_type_list_handle = SWIG_Python_LookupTypePointer(swig_type_list_handle);
+#  endif
+#endif
+        for (i = 0; swig_types_initial[i]; i++) {
+            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
+        }
+        typeinit = 1;
+    }
+    SWIG_InstallConstants(d,swig_const_table);
+    
+    {
+        PyDict_SetItemString(d,"S3D_EVENT_OBJ_CLICK", SWIG_From_int((int)(1))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_EVENT_KEY", SWIG_From_int((int)(2))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_EVENT_KEYDOWN", SWIG_From_int((int)(2))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_EVENT_MBUTTON", SWIG_From_int((int)(3))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_EVENT_KEYUP", SWIG_From_int((int)(4))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_EVENT_NEW_OBJECT", SWIG_From_int((int)(16))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_EVENT_OBJ_INFO", SWIG_From_int((int)(17))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_EVENT_QUIT", SWIG_From_int((int)(255))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_MCP_OBJECT", SWIG_From_int((int)(32))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_MCP_DEL_OBJECT", SWIG_From_int((int)(33))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_PORT", SWIG_From_int((int)(6066))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_OF_VISIBLE", SWIG_From_int((int)(0x00000001))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_OF_SELECTABLE", SWIG_From_int((int)(0x00000002))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_OF_POINTABLE", SWIG_From_int((int)(0x00000004))); 
+    }
+    {
+        PyDict_SetItemString(d,"MCP_NEW_OBJECT", SWIG_From_int((int)(1))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_UNKNOWN", SWIG_From_int((int)(S3DK_UNKNOWN))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_FIRST", SWIG_From_int((int)(S3DK_FIRST))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_BACKSPACE", SWIG_From_int((int)(S3DK_BACKSPACE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_TAB", SWIG_From_int((int)(S3DK_TAB))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_CLEAR", SWIG_From_int((int)(S3DK_CLEAR))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RETURN", SWIG_From_int((int)(S3DK_RETURN))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_PAUSE", SWIG_From_int((int)(S3DK_PAUSE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_ESCAPE", SWIG_From_int((int)(S3DK_ESCAPE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_SPACE", SWIG_From_int((int)(S3DK_SPACE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_EXCLAIM", SWIG_From_int((int)(S3DK_EXCLAIM))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_QUOTEDBL", SWIG_From_int((int)(S3DK_QUOTEDBL))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_HASH", SWIG_From_int((int)(S3DK_HASH))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_DOLLAR", SWIG_From_int((int)(S3DK_DOLLAR))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_AMPERSAND", SWIG_From_int((int)(S3DK_AMPERSAND))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_QUOTE", SWIG_From_int((int)(S3DK_QUOTE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LEFTPAREN", SWIG_From_int((int)(S3DK_LEFTPAREN))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RIGHTPAREN", SWIG_From_int((int)(S3DK_RIGHTPAREN))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_ASTERISK", SWIG_From_int((int)(S3DK_ASTERISK))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_PLUS", SWIG_From_int((int)(S3DK_PLUS))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_COMMA", SWIG_From_int((int)(S3DK_COMMA))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_MINUS", SWIG_From_int((int)(S3DK_MINUS))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_PERIOD", SWIG_From_int((int)(S3DK_PERIOD))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_SLASH", SWIG_From_int((int)(S3DK_SLASH))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_0", SWIG_From_int((int)(S3DK_0))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_1", SWIG_From_int((int)(S3DK_1))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_2", SWIG_From_int((int)(S3DK_2))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_3", SWIG_From_int((int)(S3DK_3))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_4", SWIG_From_int((int)(S3DK_4))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_5", SWIG_From_int((int)(S3DK_5))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_6", SWIG_From_int((int)(S3DK_6))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_7", SWIG_From_int((int)(S3DK_7))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_8", SWIG_From_int((int)(S3DK_8))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_9", SWIG_From_int((int)(S3DK_9))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_COLON", SWIG_From_int((int)(S3DK_COLON))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_SEMICOLON", SWIG_From_int((int)(S3DK_SEMICOLON))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LESS", SWIG_From_int((int)(S3DK_LESS))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_EQUALS", SWIG_From_int((int)(S3DK_EQUALS))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_GREATER", SWIG_From_int((int)(S3DK_GREATER))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_QUESTION", SWIG_From_int((int)(S3DK_QUESTION))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_AT", SWIG_From_int((int)(S3DK_AT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LEFTBRACKET", SWIG_From_int((int)(S3DK_LEFTBRACKET))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_BACKSLASH", SWIG_From_int((int)(S3DK_BACKSLASH))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RIGHTBRACKET", SWIG_From_int((int)(S3DK_RIGHTBRACKET))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_CARET", SWIG_From_int((int)(S3DK_CARET))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_UNDERSCORE", SWIG_From_int((int)(S3DK_UNDERSCORE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_BACKQUOTE", SWIG_From_int((int)(S3DK_BACKQUOTE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_a", SWIG_From_int((int)(S3DK_a))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_b", SWIG_From_int((int)(S3DK_b))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_c", SWIG_From_int((int)(S3DK_c))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_d", SWIG_From_int((int)(S3DK_d))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_e", SWIG_From_int((int)(S3DK_e))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_f", SWIG_From_int((int)(S3DK_f))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_g", SWIG_From_int((int)(S3DK_g))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_h", SWIG_From_int((int)(S3DK_h))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_i", SWIG_From_int((int)(S3DK_i))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_j", SWIG_From_int((int)(S3DK_j))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_k", SWIG_From_int((int)(S3DK_k))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_l", SWIG_From_int((int)(S3DK_l))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_m", SWIG_From_int((int)(S3DK_m))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_n", SWIG_From_int((int)(S3DK_n))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_o", SWIG_From_int((int)(S3DK_o))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_p", SWIG_From_int((int)(S3DK_p))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_q", SWIG_From_int((int)(S3DK_q))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_r", SWIG_From_int((int)(S3DK_r))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_s", SWIG_From_int((int)(S3DK_s))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_t", SWIG_From_int((int)(S3DK_t))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_u", SWIG_From_int((int)(S3DK_u))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_v", SWIG_From_int((int)(S3DK_v))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_w", SWIG_From_int((int)(S3DK_w))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_x", SWIG_From_int((int)(S3DK_x))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_y", SWIG_From_int((int)(S3DK_y))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_z", SWIG_From_int((int)(S3DK_z))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_DELETE", SWIG_From_int((int)(S3DK_DELETE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_0", SWIG_From_int((int)(S3DK_WORLD_0))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_1", SWIG_From_int((int)(S3DK_WORLD_1))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_2", SWIG_From_int((int)(S3DK_WORLD_2))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_3", SWIG_From_int((int)(S3DK_WORLD_3))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_4", SWIG_From_int((int)(S3DK_WORLD_4))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_5", SWIG_From_int((int)(S3DK_WORLD_5))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_6", SWIG_From_int((int)(S3DK_WORLD_6))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_7", SWIG_From_int((int)(S3DK_WORLD_7))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_8", SWIG_From_int((int)(S3DK_WORLD_8))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_9", SWIG_From_int((int)(S3DK_WORLD_9))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_10", SWIG_From_int((int)(S3DK_WORLD_10))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_11", SWIG_From_int((int)(S3DK_WORLD_11))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_12", SWIG_From_int((int)(S3DK_WORLD_12))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_13", SWIG_From_int((int)(S3DK_WORLD_13))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_14", SWIG_From_int((int)(S3DK_WORLD_14))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_15", SWIG_From_int((int)(S3DK_WORLD_15))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_16", SWIG_From_int((int)(S3DK_WORLD_16))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_17", SWIG_From_int((int)(S3DK_WORLD_17))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_18", SWIG_From_int((int)(S3DK_WORLD_18))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_19", SWIG_From_int((int)(S3DK_WORLD_19))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_20", SWIG_From_int((int)(S3DK_WORLD_20))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_21", SWIG_From_int((int)(S3DK_WORLD_21))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_22", SWIG_From_int((int)(S3DK_WORLD_22))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_23", SWIG_From_int((int)(S3DK_WORLD_23))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_24", SWIG_From_int((int)(S3DK_WORLD_24))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_25", SWIG_From_int((int)(S3DK_WORLD_25))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_26", SWIG_From_int((int)(S3DK_WORLD_26))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_27", SWIG_From_int((int)(S3DK_WORLD_27))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_28", SWIG_From_int((int)(S3DK_WORLD_28))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_29", SWIG_From_int((int)(S3DK_WORLD_29))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_30", SWIG_From_int((int)(S3DK_WORLD_30))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_31", SWIG_From_int((int)(S3DK_WORLD_31))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_32", SWIG_From_int((int)(S3DK_WORLD_32))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_33", SWIG_From_int((int)(S3DK_WORLD_33))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_34", SWIG_From_int((int)(S3DK_WORLD_34))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_35", SWIG_From_int((int)(S3DK_WORLD_35))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_36", SWIG_From_int((int)(S3DK_WORLD_36))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_37", SWIG_From_int((int)(S3DK_WORLD_37))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_38", SWIG_From_int((int)(S3DK_WORLD_38))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_39", SWIG_From_int((int)(S3DK_WORLD_39))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_40", SWIG_From_int((int)(S3DK_WORLD_40))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_41", SWIG_From_int((int)(S3DK_WORLD_41))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_42", SWIG_From_int((int)(S3DK_WORLD_42))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_43", SWIG_From_int((int)(S3DK_WORLD_43))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_44", SWIG_From_int((int)(S3DK_WORLD_44))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_45", SWIG_From_int((int)(S3DK_WORLD_45))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_46", SWIG_From_int((int)(S3DK_WORLD_46))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_47", SWIG_From_int((int)(S3DK_WORLD_47))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_48", SWIG_From_int((int)(S3DK_WORLD_48))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_49", SWIG_From_int((int)(S3DK_WORLD_49))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_50", SWIG_From_int((int)(S3DK_WORLD_50))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_51", SWIG_From_int((int)(S3DK_WORLD_51))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_52", SWIG_From_int((int)(S3DK_WORLD_52))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_53", SWIG_From_int((int)(S3DK_WORLD_53))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_54", SWIG_From_int((int)(S3DK_WORLD_54))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_55", SWIG_From_int((int)(S3DK_WORLD_55))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_56", SWIG_From_int((int)(S3DK_WORLD_56))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_57", SWIG_From_int((int)(S3DK_WORLD_57))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_58", SWIG_From_int((int)(S3DK_WORLD_58))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_59", SWIG_From_int((int)(S3DK_WORLD_59))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_60", SWIG_From_int((int)(S3DK_WORLD_60))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_61", SWIG_From_int((int)(S3DK_WORLD_61))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_62", SWIG_From_int((int)(S3DK_WORLD_62))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_63", SWIG_From_int((int)(S3DK_WORLD_63))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_64", SWIG_From_int((int)(S3DK_WORLD_64))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_65", SWIG_From_int((int)(S3DK_WORLD_65))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_66", SWIG_From_int((int)(S3DK_WORLD_66))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_67", SWIG_From_int((int)(S3DK_WORLD_67))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_68", SWIG_From_int((int)(S3DK_WORLD_68))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_69", SWIG_From_int((int)(S3DK_WORLD_69))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_70", SWIG_From_int((int)(S3DK_WORLD_70))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_71", SWIG_From_int((int)(S3DK_WORLD_71))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_72", SWIG_From_int((int)(S3DK_WORLD_72))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_73", SWIG_From_int((int)(S3DK_WORLD_73))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_74", SWIG_From_int((int)(S3DK_WORLD_74))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_75", SWIG_From_int((int)(S3DK_WORLD_75))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_76", SWIG_From_int((int)(S3DK_WORLD_76))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_77", SWIG_From_int((int)(S3DK_WORLD_77))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_78", SWIG_From_int((int)(S3DK_WORLD_78))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_79", SWIG_From_int((int)(S3DK_WORLD_79))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_80", SWIG_From_int((int)(S3DK_WORLD_80))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_81", SWIG_From_int((int)(S3DK_WORLD_81))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_82", SWIG_From_int((int)(S3DK_WORLD_82))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_83", SWIG_From_int((int)(S3DK_WORLD_83))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_84", SWIG_From_int((int)(S3DK_WORLD_84))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_85", SWIG_From_int((int)(S3DK_WORLD_85))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_86", SWIG_From_int((int)(S3DK_WORLD_86))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_87", SWIG_From_int((int)(S3DK_WORLD_87))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_88", SWIG_From_int((int)(S3DK_WORLD_88))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_89", SWIG_From_int((int)(S3DK_WORLD_89))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_90", SWIG_From_int((int)(S3DK_WORLD_90))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_91", SWIG_From_int((int)(S3DK_WORLD_91))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_92", SWIG_From_int((int)(S3DK_WORLD_92))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_93", SWIG_From_int((int)(S3DK_WORLD_93))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_94", SWIG_From_int((int)(S3DK_WORLD_94))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_WORLD_95", SWIG_From_int((int)(S3DK_WORLD_95))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP0", SWIG_From_int((int)(S3DK_KP0))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP1", SWIG_From_int((int)(S3DK_KP1))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP2", SWIG_From_int((int)(S3DK_KP2))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP3", SWIG_From_int((int)(S3DK_KP3))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP4", SWIG_From_int((int)(S3DK_KP4))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP5", SWIG_From_int((int)(S3DK_KP5))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP6", SWIG_From_int((int)(S3DK_KP6))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP7", SWIG_From_int((int)(S3DK_KP7))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP8", SWIG_From_int((int)(S3DK_KP8))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP9", SWIG_From_int((int)(S3DK_KP9))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP_PERIOD", SWIG_From_int((int)(S3DK_KP_PERIOD))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP_DIVIDE", SWIG_From_int((int)(S3DK_KP_DIVIDE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP_MULTIPLY", SWIG_From_int((int)(S3DK_KP_MULTIPLY))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP_MINUS", SWIG_From_int((int)(S3DK_KP_MINUS))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP_PLUS", SWIG_From_int((int)(S3DK_KP_PLUS))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP_ENTER", SWIG_From_int((int)(S3DK_KP_ENTER))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_KP_EQUALS", SWIG_From_int((int)(S3DK_KP_EQUALS))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_UP", SWIG_From_int((int)(S3DK_UP))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_DOWN", SWIG_From_int((int)(S3DK_DOWN))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RIGHT", SWIG_From_int((int)(S3DK_RIGHT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LEFT", SWIG_From_int((int)(S3DK_LEFT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_INSERT", SWIG_From_int((int)(S3DK_INSERT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_HOME", SWIG_From_int((int)(S3DK_HOME))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_END", SWIG_From_int((int)(S3DK_END))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_PAGEUP", SWIG_From_int((int)(S3DK_PAGEUP))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_PAGEDOWN", SWIG_From_int((int)(S3DK_PAGEDOWN))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F1", SWIG_From_int((int)(S3DK_F1))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F2", SWIG_From_int((int)(S3DK_F2))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F3", SWIG_From_int((int)(S3DK_F3))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F4", SWIG_From_int((int)(S3DK_F4))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F5", SWIG_From_int((int)(S3DK_F5))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F6", SWIG_From_int((int)(S3DK_F6))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F7", SWIG_From_int((int)(S3DK_F7))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F8", SWIG_From_int((int)(S3DK_F8))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F9", SWIG_From_int((int)(S3DK_F9))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F10", SWIG_From_int((int)(S3DK_F10))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F11", SWIG_From_int((int)(S3DK_F11))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F12", SWIG_From_int((int)(S3DK_F12))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F13", SWIG_From_int((int)(S3DK_F13))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F14", SWIG_From_int((int)(S3DK_F14))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_F15", SWIG_From_int((int)(S3DK_F15))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_NUMLOCK", SWIG_From_int((int)(S3DK_NUMLOCK))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_CAPSLOCK", SWIG_From_int((int)(S3DK_CAPSLOCK))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_SCROLLOCK", SWIG_From_int((int)(S3DK_SCROLLOCK))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RSHIFT", SWIG_From_int((int)(S3DK_RSHIFT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LSHIFT", SWIG_From_int((int)(S3DK_LSHIFT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RCTRL", SWIG_From_int((int)(S3DK_RCTRL))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LCTRL", SWIG_From_int((int)(S3DK_LCTRL))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RALT", SWIG_From_int((int)(S3DK_RALT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LALT", SWIG_From_int((int)(S3DK_LALT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RMETA", SWIG_From_int((int)(S3DK_RMETA))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LMETA", SWIG_From_int((int)(S3DK_LMETA))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LSUPER", SWIG_From_int((int)(S3DK_LSUPER))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_RSUPER", SWIG_From_int((int)(S3DK_RSUPER))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_MODE", SWIG_From_int((int)(S3DK_MODE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_COMPOSE", SWIG_From_int((int)(S3DK_COMPOSE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_HELP", SWIG_From_int((int)(S3DK_HELP))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_PRINT", SWIG_From_int((int)(S3DK_PRINT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_SYSREQ", SWIG_From_int((int)(S3DK_SYSREQ))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_BREAK", SWIG_From_int((int)(S3DK_BREAK))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_MENU", SWIG_From_int((int)(S3DK_MENU))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_POWER", SWIG_From_int((int)(S3DK_POWER))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_EURO", SWIG_From_int((int)(S3DK_EURO))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_UNDO", SWIG_From_int((int)(S3DK_UNDO))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3DK_LAST", SWIG_From_int((int)(S3DK_LAST))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_NONE", SWIG_From_int((int)(S3D_KMOD_NONE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_LSHIFT", SWIG_From_int((int)(S3D_KMOD_LSHIFT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_RSHIFT", SWIG_From_int((int)(S3D_KMOD_RSHIFT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_LCTRL", SWIG_From_int((int)(S3D_KMOD_LCTRL))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_RCTRL", SWIG_From_int((int)(S3D_KMOD_RCTRL))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_LALT", SWIG_From_int((int)(S3D_KMOD_LALT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_RALT", SWIG_From_int((int)(S3D_KMOD_RALT))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_LMETA", SWIG_From_int((int)(S3D_KMOD_LMETA))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_RMETA", SWIG_From_int((int)(S3D_KMOD_RMETA))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_NUM", SWIG_From_int((int)(S3D_KMOD_NUM))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_CAPS", SWIG_From_int((int)(S3D_KMOD_CAPS))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_MODE", SWIG_From_int((int)(S3D_KMOD_MODE))); 
+    }
+    {
+        PyDict_SetItemString(d,"S3D_KMOD_RESERVED", SWIG_From_int((int)(S3D_KMOD_RESERVED))); 
+    }
+}
+



From dotslash at mail.berlios.de  Thu Oct 19 18:36:21 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Thu, 19 Oct 2006 18:36:21 +0200
Subject: [S3d-svn] r448 - in trunk: . swig
Message-ID: <200610191636.k9JGaLMf020740@sheep.berlios.de>

Author: dotslash
Date: 2006-10-19 18:36:20 +0200 (Thu, 19 Oct 2006)
New Revision: 448

Removed:
   trunk/swig/s3d_wrap.c
Modified:
   trunk/
   trunk/swig/Makefile
Log:
 r1088 at kero:  dotslash | 2006-10-19 18:36:05 +0200
 - now it works ...



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1086
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1088

Modified: trunk/swig/Makefile
===================================================================
--- trunk/swig/Makefile	2006-10-19 16:11:31 UTC (rev 447)
+++ trunk/swig/Makefile	2006-10-19 16:36:20 UTC (rev 448)
@@ -1,4 +1,4 @@
-PYTHON_MOD=s3d.so
+PYTHON_MOD=_s3d.so
 MODS=$(PYTHON_MOD)
 
 default:	all

Deleted: trunk/swig/s3d_wrap.c
===================================================================
--- trunk/swig/s3d_wrap.c	2006-10-19 16:11:31 UTC (rev 447)
+++ trunk/swig/s3d_wrap.c	2006-10-19 16:36:20 UTC (rev 448)
@@ -1,6861 +0,0 @@
-/* ----------------------------------------------------------------------------
- * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 1.3.24
- * 
- * This file is not intended to be easily readable and contains a number of 
- * coding conventions designed to improve portability and efficiency. Do not make
- * changes to this file unless you know what you are doing--modify the SWIG 
- * interface file instead. 
- * ----------------------------------------------------------------------------- */
-
-#define SWIGPYTHON
-
-#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
-#  if defined(__SUNPRO_CC) 
-#    define SWIG_TEMPLATE_DISAMBIGUATOR template
-#  else
-#    define SWIG_TEMPLATE_DISAMBIGUATOR 
-#  endif
-#endif
-
-
-#include <Python.h>
-
-/***********************************************************************
- * swigrun.swg
- *
- *     This file contains generic CAPI SWIG runtime support for pointer
- *     type checking.
- *
- ************************************************************************/
-
-/* This should only be incremented when either the layout of swig_type_info changes,
-   or for whatever reason, the runtime changes incompatibly */
-#define SWIG_RUNTIME_VERSION "1"
-
-/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
-#ifdef SWIG_TYPE_TABLE
-#define SWIG_QUOTE_STRING(x) #x
-#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
-#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
-#else
-#define SWIG_TYPE_TABLE_NAME
-#endif
-
-#include <string.h>
-
-#ifndef SWIGINLINE
-#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
-#  define SWIGINLINE inline
-#else
-#  define SWIGINLINE
-#endif
-#endif
-
-/*
-  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
-  creating a static or dynamic library from the swig runtime code.
-  In 99.9% of the cases, swig just needs to declare them as 'static'.
-  
-  But only do this if is strictly necessary, ie, if you have problems
-  with your compiler or so.
-*/
-#ifndef SWIGRUNTIME
-#define SWIGRUNTIME static
-#endif
-#ifndef SWIGRUNTIMEINLINE
-#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
-#endif
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-typedef void *(*swig_converter_func)(void *);
-typedef struct swig_type_info *(*swig_dycast_func)(void **);
-
-typedef struct swig_type_info {
-  const char             *name;
-  swig_converter_func     converter;
-  const char             *str;
-  void                   *clientdata;
-  swig_dycast_func        dcast;
-  struct swig_type_info  *next;
-  struct swig_type_info  *prev;
-} swig_type_info;
-
-/* 
-  Compare two type names skipping the space characters, therefore
-  "char*" == "char *" and "Class<int>" == "Class<int >", etc.
-
-  Return 0 when the two name types are equivalent, as in
-  strncmp, but skipping ' '.
-*/
-SWIGRUNTIME int
-SWIG_TypeNameComp(const char *f1, const char *l1,
-		  const char *f2, const char *l2) {
-  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
-    while ((*f1 == ' ') && (f1 != l1)) ++f1;
-    while ((*f2 == ' ') && (f2 != l2)) ++f2;
-    if (*f1 != *f2) return *f1 - *f2;
-  }
-  return (l1 - f1) - (l2 - f2);
-}
-
-/*
-  Check type equivalence in a name list like <name1>|<name2>|...
-*/
-SWIGRUNTIME int
-SWIG_TypeEquiv(const char *nb, const char *tb) {
-  int equiv = 0;
-  const char* te = tb + strlen(tb);
-  const char* ne = nb;
-  while (!equiv && *ne) {
-    for (nb = ne; *ne; ++ne) {
-      if (*ne == '|') break;
-    }
-    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
-    if (*ne) ++ne;
-  }
-  return equiv;
-}
-
-/*
-  Register a type mapping with the type-checking
-*/
-SWIGRUNTIME swig_type_info *
-SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
-  swig_type_info *tc, *head, *ret, *next;
-  /* Check to see if this type has already been registered */
-  tc = *tl;
-  while (tc) {
-    /* check simple type equivalence */
-    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
-    /* check full type equivalence, resolving typedefs */
-    if (!typeequiv) {
-      /* only if tc is not a typedef (no '|' on it) */
-      if (tc->str && ti->str && !strstr(tc->str,"|")) {
-	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
-      }
-    }
-    if (typeequiv) {
-      /* Already exists in the table.  Just add additional types to the list */
-      if (ti->clientdata) tc->clientdata = ti->clientdata;
-      head = tc;
-      next = tc->next;
-      goto l1;
-    }
-    tc = tc->prev;
-  }
-  head = ti;
-  next = 0;
-
-  /* Place in list */
-  ti->prev = *tl;
-  *tl = ti;
-
-  /* Build linked lists */
-  l1:
-  ret = head;
-  tc = ti + 1;
-  /* Patch up the rest of the links */
-  while (tc->name) {
-    head->next = tc;
-    tc->prev = head;
-    head = tc;
-    tc++;
-  }
-  if (next) next->prev = head;
-  head->next = next;
-
-  return ret;
-}
-
-/*
-  Check the typename
-*/
-SWIGRUNTIME swig_type_info *
-SWIG_TypeCheck(const char *c, swig_type_info *ty) {
-  swig_type_info *s;
-  if (!ty) return 0;        /* Void pointer */
-  s = ty->next;             /* First element always just a name */
-  do {
-    if (strcmp(s->name,c) == 0) {
-      if (s == ty->next) return s;
-      /* Move s to the top of the linked list */
-      s->prev->next = s->next;
-      if (s->next) {
-        s->next->prev = s->prev;
-      }
-      /* Insert s as second element in the list */
-      s->next = ty->next;
-      if (ty->next) ty->next->prev = s;
-      ty->next = s;
-      s->prev = ty;
-      return s;
-    }
-    s = s->next;
-  } while (s && (s != ty->next));
-  return 0;
-}
-
-/*
-  Cast a pointer up an inheritance hierarchy
-*/
-SWIGRUNTIMEINLINE void *
-SWIG_TypeCast(swig_type_info *ty, void *ptr) {
-  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
-}
-
-/* 
-   Dynamic pointer casting. Down an inheritance hierarchy
-*/
-SWIGRUNTIME swig_type_info *
-SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
-  swig_type_info *lastty = ty;
-  if (!ty || !ty->dcast) return ty;
-  while (ty && (ty->dcast)) {
-    ty = (*ty->dcast)(ptr);
-    if (ty) lastty = ty;
-  }
-  return lastty;
-}
-
-/*
-  Return the name associated with this type
-*/
-SWIGRUNTIMEINLINE const char *
-SWIG_TypeName(const swig_type_info *ty) {
-  return ty->name;
-}
-
-/*
-  Return the pretty name associated with this type,
-  that is an unmangled type name in a form presentable to the user.
-*/
-SWIGRUNTIME const char *
-SWIG_TypePrettyName(const swig_type_info *type) {
-  /* The "str" field contains the equivalent pretty names of the
-     type, separated by vertical-bar characters.  We choose
-     to print the last name, as it is often (?) the most
-     specific. */
-  if (type->str != NULL) {
-    const char *last_name = type->str;
-    const char *s;
-    for (s = type->str; *s; s++)
-      if (*s == '|') last_name = s+1;
-    return last_name;
-  }
-  else
-    return type->name;
-}
-
-/*
-  Search for a swig_type_info structure
-*/
-SWIGRUNTIME swig_type_info *
-SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
-  swig_type_info *ty = tl;
-  while (ty) {
-    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
-    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
-    ty = ty->prev;
-  }
-  return 0;
-}
-
-/* 
-   Set the clientdata field for a type
-*/
-SWIGRUNTIME void
-SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
-  swig_type_info *tc, *equiv;
-  if (ti->clientdata) return;
-  /* if (ti->clientdata == clientdata) return; */
-  ti->clientdata = clientdata;
-  equiv = ti->next;
-  while (equiv) {
-    if (!equiv->converter) {
-      tc = tl;
-      while (tc) {
-        if ((strcmp(tc->name, equiv->name) == 0))
-          SWIG_TypeClientDataTL(tl,tc,clientdata);
-        tc = tc->prev;
-      }
-    }
-    equiv = equiv->next;
-  }
-}
-
-/* 
-   Pack binary data into a string
-*/
-SWIGRUNTIME char *
-SWIG_PackData(char *c, void *ptr, size_t sz) {
-  static char hex[17] = "0123456789abcdef";
-  unsigned char *u = (unsigned char *) ptr;
-  const unsigned char *eu =  u + sz;
-  register unsigned char uu;
-  for (; u != eu; ++u) {
-    uu = *u;
-    *(c++) = hex[(uu & 0xf0) >> 4];
-    *(c++) = hex[uu & 0xf];
-  }
-  return c;
-}
-
-/* 
-   Unpack binary data from a string
-*/
-SWIGRUNTIME const char *
-SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
-  register unsigned char *u = (unsigned char *) ptr;
-  register const unsigned char *eu =  u + sz;
-  for (; u != eu; ++u) {
-    register int d = *(c++);
-    register unsigned char uu = 0;
-    if ((d >= '0') && (d <= '9'))
-      uu = ((d - '0') << 4);
-    else if ((d >= 'a') && (d <= 'f'))
-      uu = ((d - ('a'-10)) << 4);
-    else 
-      return (char *) 0;
-    d = *(c++);
-    if ((d >= '0') && (d <= '9'))
-      uu |= (d - '0');
-    else if ((d >= 'a') && (d <= 'f'))
-      uu |= (d - ('a'-10));
-    else 
-      return (char *) 0;
-    *u = uu;
-  }
-  return c;
-}
-
-/*
-  This function will propagate the clientdata field of type to any new
-  swig_type_info structures that have been added into the list of
-  equivalent types.  It is like calling SWIG_TypeClientData(type,
-  clientdata) a second time.
-*/
-SWIGRUNTIME void
-SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
-  swig_type_info *equiv = type->next;
-  swig_type_info *tc;
-  if (!type->clientdata) return;
-  while (equiv) {
-    if (!equiv->converter) {
-      tc = tl;
-      while (tc) {
-        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
-          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
-        tc = tc->prev;
-      }
-    }
-    equiv = equiv->next;
-  }
-}
-
-/* 
-   Pack 'void *' into a string buffer.
-*/
-SWIGRUNTIME char *
-SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
-  char *r = buff;
-  if ((2*sizeof(void *) + 2) > bsz) return 0;
-  *(r++) = '_';
-  r = SWIG_PackData(r,&ptr,sizeof(void *));
-  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
-  strcpy(r,name);
-  return buff;
-}
-
-SWIGRUNTIME const char *
-SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
-  if (*c != '_') {
-    if (strcmp(c,"NULL") == 0) {
-      *ptr = (void *) 0;
-      return name;
-    } else {
-      return 0;
-    }
-  }
-  return SWIG_UnpackData(++c,ptr,sizeof(void *));
-}
-
-SWIGRUNTIME char *
-SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
-  char *r = buff;
-  size_t lname = (name ? strlen(name) : 0);
-  if ((2*sz + 2 + lname) > bsz) return 0;
-  *(r++) = '_';
-  r = SWIG_PackData(r,ptr,sz);
-  if (lname) {
-    strncpy(r,name,lname+1);
-  } else {
-    *r = 0;
-  }
-  return buff;
-}
-
-SWIGRUNTIME const char *
-SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
-  if (*c != '_') {
-    if (strcmp(c,"NULL") == 0) {
-      memset(ptr,0,sz);
-      return name;
-    } else {
-      return 0;
-    }
-  }
-  return SWIG_UnpackData(++c,ptr,sz);
-}
-
-#ifdef __cplusplus
-}
-#endif
-
-/***********************************************************************
- * common.swg
- *
- *     This file contains generic SWIG runtime support for pointer
- *     type checking as well as a few commonly used macros to control
- *     external linkage.
- *
- * Author : David Beazley (beazley at cs.uchicago.edu)
- *
- * Copyright (c) 1999-2000, The University of Chicago
- * 
- * This file may be freely redistributed without license or fee provided
- * this copyright message remains intact.
- ************************************************************************/
-
-
-#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
-#  if !defined(STATIC_LINKED)
-#    define SWIGEXPORT(a) __declspec(dllexport) a
-#  else
-#    define SWIGEXPORT(a) a
-#  endif
-#else
-#  define SWIGEXPORT(a) a
-#endif
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-
-/*************************************************************************/
-
-
-/* The static type info list */
-
-static swig_type_info *swig_type_list = 0;
-static swig_type_info **swig_type_list_handle = &swig_type_list;
-  
-
-/* Register a type mapping with the type-checking */
-static swig_type_info *
-SWIG_TypeRegister(swig_type_info *ti) {
-  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
-}
-
-/* Search for a swig_type_info structure */
-static swig_type_info *
-SWIG_TypeQuery(const char *name) {
-  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
-}
-
-/* Set the clientdata field for a type */
-static void
-SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
-  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
-}
-
-/* This function will propagate the clientdata field of type to
-* any new swig_type_info structures that have been added into the list
-* of equivalent types.  It is like calling
-* SWIG_TypeClientData(type, clientdata) a second time.
-*/
-static void
-SWIG_PropagateClientData(swig_type_info *type) {
-  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
-}
-
-#ifdef __cplusplus
-}
-#endif
-
-/* -----------------------------------------------------------------------------
- * SWIG API. Portion that goes into the runtime
- * ----------------------------------------------------------------------------- */
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/* -----------------------------------------------------------------------------
- * for internal method declarations
- * ----------------------------------------------------------------------------- */
-
-#ifndef SWIGINTERN
-#define SWIGINTERN static 
-#endif
-
-#ifndef SWIGINTERNSHORT
-#ifdef __cplusplus
-#define SWIGINTERNSHORT static inline 
-#else /* C case */
-#define SWIGINTERNSHORT static 
-#endif /* __cplusplus */
-#endif
-
-
-/*
-  Exception handling in wrappers
-*/
-#define SWIG_fail                goto fail
-#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
-#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
-#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
-#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
-#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)
-
-/*
-  Contract support
-*/
-#define SWIG_contract_assert(expr, msg) \
- if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else
-
-/* -----------------------------------------------------------------------------
- * Constant declarations
- * ----------------------------------------------------------------------------- */
-
-/* Constant Types */
-#define SWIG_PY_INT     1
-#define SWIG_PY_FLOAT   2
-#define SWIG_PY_STRING  3
-#define SWIG_PY_POINTER 4
-#define SWIG_PY_BINARY  5
-
-/* Constant information structure */
-typedef struct swig_const_info {
-    int type;
-    char *name;
-    long lvalue;
-    double dvalue;
-    void   *pvalue;
-    swig_type_info **ptype;
-} swig_const_info;
-
-
-/* -----------------------------------------------------------------------------
- * Alloc. memory flags
- * ----------------------------------------------------------------------------- */
-#define SWIG_OLDOBJ  1
-#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
-#define SWIG_PYSTR   SWIG_NEWOBJ + 1
-
-#ifdef __cplusplus
-}
-#endif
-
-
-/***********************************************************************
- * pyrun.swg
- *
- *     This file contains the runtime support for Python modules
- *     and includes code for managing global variables and pointer
- *     type checking.
- *
- * Author : David Beazley (beazley at cs.uchicago.edu)
- ************************************************************************/
-
-/* Common SWIG API */
-#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
-#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
-#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
- 
-
-/* Python-specific SWIG API */
-#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
-#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)
-
-
-/* -----------------------------------------------------------------------------
- * Pointer declarations
- * ----------------------------------------------------------------------------- */
-/*
-  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
-  C/C++ pointers in the python side. Very useful for debugging, but
-  not always safe.
-*/
-#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
-#  define SWIG_COBJECT_TYPES
-#endif
-
-/* Flags for pointer conversion */
-#define SWIG_POINTER_EXCEPTION     0x1
-#define SWIG_POINTER_DISOWN        0x2
-
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/* -----------------------------------------------------------------------------
- * Create a new pointer string 
- * ----------------------------------------------------------------------------- */
-
-#ifndef SWIG_BUFFER_SIZE
-#define SWIG_BUFFER_SIZE 1024
-#endif
-
-#if defined(SWIG_COBJECT_TYPES)
-#if !defined(SWIG_COBJECT_PYTHON)
-/* -----------------------------------------------------------------------------
- * Implements a simple Swig Object type, and use it instead of PyCObject
- * ----------------------------------------------------------------------------- */
-
-typedef struct {
-  PyObject_HEAD
-  void *ptr;
-  const char *desc;
-} PySwigObject;
-
-/* Declarations for objects of type PySwigObject */
-
-SWIGRUNTIME int
-PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
-{
-  char result[SWIG_BUFFER_SIZE];
-  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
-    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
-    return 0; 
-  } else {
-    return 1; 
-  }
-}
-  
-SWIGRUNTIME PyObject *
-PySwigObject_repr(PySwigObject *v)
-{
-  char result[SWIG_BUFFER_SIZE];
-  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
-    PyString_FromFormat("<Swig Object at %s>", result) : 0;
-}
-
-SWIGRUNTIME PyObject *
-PySwigObject_str(PySwigObject *v)
-{
-  char result[SWIG_BUFFER_SIZE];
-  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
-    PyString_FromString(result) : 0;
-}
-
-SWIGRUNTIME PyObject *
-PySwigObject_long(PySwigObject *v)
-{
-  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
-}
-
-SWIGRUNTIME PyObject *
-PySwigObject_oct(PySwigObject *v)
-{
-  char buf[100];
-  unsigned long x = (unsigned long)v->ptr;
-  if (x == 0)
-    strcpy(buf, "0");
-  else
-    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
-  return PyString_FromString(buf);
-}
-
-SWIGRUNTIME PyObject *
-PySwigObject_hex(PySwigObject *v)
-{
-  char buf[100];
-  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
-  return PyString_FromString(buf);
-}
-
-SWIGRUNTIME int
-PySwigObject_compare(PySwigObject *v, PySwigObject *w)
-{
-  int c = strcmp(v->desc, w->desc);
-  if (c) {
-    return c;
-  } else {
-    void *i = v->ptr;
-    void *j = w->ptr;
-    return (i < j) ? -1 : (i > j) ? 1 : 0;
-  }
-}
-
-SWIGRUNTIME void
-PySwigObject_dealloc(PySwigObject *self)
-{
-  PyObject_DEL(self);
-}
-
-SWIGRUNTIME PyTypeObject*
-PySwigObject_GetType() {
-  static char PySwigObject_Type__doc__[] = 
-    "Swig object carries a C/C++ instance pointer";
-  
-  static PyNumberMethods PySwigObject_as_number = {
-    (binaryfunc)0, /*nb_add*/
-    (binaryfunc)0, /*nb_subtract*/
-    (binaryfunc)0, /*nb_multiply*/
-    (binaryfunc)0, /*nb_divide*/
-    (binaryfunc)0, /*nb_remainder*/
-    (binaryfunc)0, /*nb_divmod*/
-    (ternaryfunc)0,/*nb_power*/
-    (unaryfunc)0,  /*nb_negative*/
-    (unaryfunc)0,  /*nb_positive*/
-    (unaryfunc)0,  /*nb_absolute*/
-    (inquiry)0,    /*nb_nonzero*/
-    0,		   /*nb_invert*/
-    0,		   /*nb_lshift*/
-    0,		   /*nb_rshift*/
-    0,		   /*nb_and*/
-    0,		   /*nb_xor*/
-    0,		   /*nb_or*/
-    (coercion)0,   /*nb_coerce*/
-    (unaryfunc)PySwigObject_long, /*nb_int*/
-    (unaryfunc)PySwigObject_long, /*nb_long*/
-    (unaryfunc)0,                 /*nb_float*/
-    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
-    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
-#if PY_VERSION_HEX >= 0x02000000
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
-#endif
-  };
-
-  static int type_init = 0;  
-  static PyTypeObject PySwigObject_Type;
-
-  if (!type_init) {
-    PyTypeObject tmp = {
-    PyObject_HEAD_INIT(&PyType_Type)
-    0,					/*ob_size*/
-    "PySwigObject",			/*tp_name*/
-    sizeof(PySwigObject),		/*tp_basicsize*/
-    0,					/*tp_itemsize*/
-    /* methods */
-    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
-    (printfunc)PySwigObject_print,	/*tp_print*/
-    (getattrfunc)0,			/*tp_getattr*/
-    (setattrfunc)0,			/*tp_setattr*/
-    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
-    (reprfunc)PySwigObject_repr,	/*tp_repr*/
-    &PySwigObject_as_number,	        /*tp_as_number*/
-    0,					/*tp_as_sequence*/
-    0,					/*tp_as_mapping*/
-    (hashfunc)0,			/*tp_hash*/
-    (ternaryfunc)0,			/*tp_call*/
-    (reprfunc)PySwigObject_str,		/*tp_str*/
-    /* Space for future expansion */
-    0L,0L,0L,0L,
-    PySwigObject_Type__doc__, 	        /* Documentation string */
-#if PY_VERSION_HEX >= 0x02000000
-    0,                                  /* tp_traverse */
-    0,                                  /* tp_clear */
-#endif
-#if PY_VERSION_HEX >= 0x02010000
-    0,                                  /* tp_richcompare */
-    0,                                  /* tp_weaklistoffset */
-#endif
-#if PY_VERSION_HEX >= 0x02020000
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
-#endif
-#if PY_VERSION_HEX >= 0x02030000
-    0,                                  /* tp_del */
-#endif
-#ifdef COUNT_ALLOCS
-    0,0,0,0                             /* tp_alloc -> tp_next */
-#endif
-    };
-
-    PySwigObject_Type = tmp;
-    type_init = 1;
-  }
-
-  return &PySwigObject_Type;
-}
-
-SWIGRUNTIME PyObject *
-PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
-{
-  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
-  if (self == NULL) return NULL;
-  self->ptr = ptr;
-  self->desc = desc;
-  return (PyObject *)self;
-}
-
-SWIGRUNTIMEINLINE void *
-PySwigObject_AsVoidPtr(PyObject *self)
-{
-  return ((PySwigObject *)self)->ptr;
-}
-
-SWIGRUNTIMEINLINE const char *
-PySwigObject_GetDesc(PyObject *self)
-{
-  return ((PySwigObject *)self)->desc;
-}
-
-SWIGRUNTIMEINLINE int
-PySwigObject_Check(PyObject *op) {
-  return ((op)->ob_type == PySwigObject_GetType()) 
-    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
-}
-
-/* -----------------------------------------------------------------------------
- * Implements a simple Swig Packed type, and use it instead of string
- * ----------------------------------------------------------------------------- */
-
-typedef struct {
-  PyObject_HEAD
-  void *pack;
-  const char *desc;
-  size_t size;
-} PySwigPacked;
-
-SWIGRUNTIME int
-PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
-{
-  char result[SWIG_BUFFER_SIZE];
-  fputs("<Swig Packed ", fp); 
-  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
-    fputs("at ", fp); 
-    fputs(result, fp); 
-  }
-  fputs(v->desc,fp); 
-  fputs(">", fp);
-  return 0; 
-}
-  
-SWIGRUNTIME PyObject *
-PySwigPacked_repr(PySwigPacked *v)
-{
-  char result[SWIG_BUFFER_SIZE];
-  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
-    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
-  } else {
-    return PyString_FromFormat("<Swig Packed %s>", v->desc);
-  }  
-}
-
-SWIGRUNTIME PyObject *
-PySwigPacked_str(PySwigPacked *v)
-{
-  char result[SWIG_BUFFER_SIZE];
-  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
-    return PyString_FromFormat("%s%s", result, v->desc);
-  } else {
-    return PyString_FromFormat("%s", v->desc);
-  }  
-}
-
-SWIGRUNTIME int
-PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
-{
-  int c = strcmp(v->desc, w->desc);
-  if (c) {
-    return c;
-  } else {
-    size_t i = v->size;
-    size_t j = w->size;
-    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
-    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
-  }
-}
-
-SWIGRUNTIME void
-PySwigPacked_dealloc(PySwigPacked *self)
-{
-  free(self->pack);
-  PyObject_DEL(self);
-}
-
-SWIGRUNTIME PyTypeObject*
-PySwigPacked_GetType() {
-  static char PySwigPacked_Type__doc__[] = 
-    "Swig object carries a C/C++ instance pointer";
-  static int type_init = 0;
-  
-  static PyTypeObject PySwigPacked_Type;
-  if (!type_init) {
-    PyTypeObject tmp = {
-    PyObject_HEAD_INIT(&PyType_Type)
-    0,					/*ob_size*/
-    "PySwigPacked",			/*tp_name*/
-    sizeof(PySwigPacked),		/*tp_basicsize*/
-    0,					/*tp_itemsize*/
-    /* methods */
-    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
-    (printfunc)PySwigPacked_print,	/*tp_print*/
-    (getattrfunc)0,			/*tp_getattr*/
-    (setattrfunc)0,			/*tp_setattr*/
-    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
-    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
-    0,	                                /*tp_as_number*/
-    0,					/*tp_as_sequence*/
-    0,					/*tp_as_mapping*/
-    (hashfunc)0,			/*tp_hash*/
-    (ternaryfunc)0,			/*tp_call*/
-    (reprfunc)PySwigPacked_str,		/*tp_str*/
-    /* Space for future expansion */
-    0L,0L,0L,0L,
-    PySwigPacked_Type__doc__, 	        /* Documentation string */
-#if PY_VERSION_HEX >= 0x02000000
-    0,                                  /* tp_traverse */
-    0,                                  /* tp_clear */
-#endif
-#if PY_VERSION_HEX >= 0x02010000
-    0,                                  /* tp_richcompare */
-    0,                                  /* tp_weaklistoffset */
-#endif
-#if PY_VERSION_HEX >= 0x02020000         
-    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
-#endif
-#if PY_VERSION_HEX >= 0x02030000
-    0,                                  /* tp_del */
-#endif
-#ifdef COUNT_ALLOCS
-    0,0,0,0                             /* tp_alloc -> tp_next */
-#endif
-    };
-
-    PySwigPacked_Type = tmp;
-    type_init = 1;
-  }
-  
-      
-
-  return &PySwigPacked_Type;
-}
-
-SWIGRUNTIME PyObject *
-PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
-{
-  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
-  if (self == NULL) {
-    return NULL;
-  } else {
-    void *pack = malloc(size);
-    memcpy(pack, ptr, size);
-    self->pack = pack;
-    self->desc = desc;
-    self->size = size;
-    return (PyObject *) self;
-  }
-}
-
-SWIGRUNTIMEINLINE const char *
-PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
-{
-  PySwigPacked *self = (PySwigPacked *)obj;
-  if (self->size != size) return 0;
-  memcpy(ptr, self->pack, size);
-  return self->desc;
-}
-
-SWIGRUNTIMEINLINE const char *
-PySwigPacked_GetDesc(PyObject *self)
-{
-  return ((PySwigPacked *)self)->desc;
-}
-
-SWIGRUNTIMEINLINE int
-PySwigPacked_Check(PyObject *op) {
-  return ((op)->ob_type == PySwigPacked_GetType()) 
-    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
-}
-
-#else
-/* -----------------------------------------------------------------------------
- * Use the old Python PyCObject instead of PySwigObject
- * ----------------------------------------------------------------------------- */
-
-#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
-#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
-#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
-#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)
-
-#endif
-
-#endif
-
-/* -----------------------------------------------------------------------------
- * errors manipulation
- * ----------------------------------------------------------------------------- */
-
-SWIGRUNTIME void
-SWIG_Python_TypeError(const char *type, PyObject *obj)
-{
-  if (type) {
-#if defined(SWIG_COBJECT_TYPES)
-    if (PySwigObject_Check(obj)) {
-      const char *otype = (const char *) PySwigObject_GetDesc(obj);
-      if (otype) {
-	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
-		     type, otype);
-	return;
-      }
-    } else 
-#endif      
-    {
-      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
-      if (otype) {
-	PyObject *str = PyObject_Str(obj);
-	const char *cstr = str ? PyString_AsString(str) : 0;
-	if (cstr) {
-	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
-		       type, otype, cstr);
-	} else {
-	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
-		       type, otype);
-	}
-	Py_DECREF(str);
-	return;
-      }
-    }   
-    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
-  } else {
-    PyErr_Format(PyExc_TypeError, "unexpected type is received");
-  }
-}
-
-SWIGRUNTIMEINLINE void
-SWIG_Python_NullRef(const char *type)
-{
-  if (type) {
-    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
-  } else {
-    PyErr_Format(PyExc_TypeError, "null reference was received");
-  }
-}
-
-SWIGRUNTIME int
-SWIG_Python_AddErrMesg(const char* mesg, int infront)
-{
-  if (PyErr_Occurred()) {
-    PyObject *type = 0;
-    PyObject *value = 0;
-    PyObject *traceback = 0;
-    PyErr_Fetch(&type, &value, &traceback);
-    if (value) {
-      PyObject *old_str = PyObject_Str(value);
-      Py_XINCREF(type);
-      PyErr_Clear();
-      if (infront) {
-	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
-      } else {
-	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
-      }
-      Py_DECREF(old_str);
-    }
-    return 1;
-  } else {
-    return 0;
-  }
-}
-
-SWIGRUNTIME int
-SWIG_Python_ArgFail(int argnum)
-{
-  if (PyErr_Occurred()) {
-    /* add information about failing argument */
-    char mesg[256];
-    sprintf(mesg, "argument number %d:", argnum);
-    return SWIG_Python_AddErrMesg(mesg, 1);
-  } else {
-    return 0;
-  }
-}
-
-
-/* -----------------------------------------------------------------------------
- * pointers/data manipulation
- * ----------------------------------------------------------------------------- */
-
-/* Convert a pointer value */
-SWIGRUNTIME int
-SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
-  swig_type_info *tc;
-  const char *c = 0;
-  static PyObject *SWIG_this = 0;
-  int    newref = 0;
-  PyObject  *pyobj = 0;
-  void *vptr;
-  
-  if (!obj) return 0;
-  if (obj == Py_None) {
-    *ptr = 0;
-    return 0;
-  }
-
-#ifdef SWIG_COBJECT_TYPES
-  if (!(PySwigObject_Check(obj))) {
-    if (!SWIG_this)
-      SWIG_this = PyString_FromString("this");
-    pyobj = obj;
-    obj = PyObject_GetAttr(obj,SWIG_this);
-    newref = 1;
-    if (!obj) goto type_error;
-    if (!PySwigObject_Check(obj)) {
-      Py_DECREF(obj);
-      goto type_error;
-    }
-  }  
-  vptr = PySwigObject_AsVoidPtr(obj);
-  c = (const char *) PySwigObject_GetDesc(obj);
-  if (newref) { Py_DECREF(obj); }
-  goto type_check;
-#else
-  if (!(PyString_Check(obj))) {
-    if (!SWIG_this)
-      SWIG_this = PyString_FromString("this");
-    pyobj = obj;
-    obj = PyObject_GetAttr(obj,SWIG_this);
-    newref = 1;
-    if (!obj) goto type_error;
-    if (!PyString_Check(obj)) {
-      Py_DECREF(obj);
-      goto type_error;
-    }
-  } 
-  c = PyString_AS_STRING(obj);
-  /* Pointer values must start with leading underscore */
-  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
-  if (newref) { Py_DECREF(obj); }
-  if (!c) goto type_error;
-#endif
-
-type_check:
-
-  if (ty) {
-    tc = SWIG_TypeCheck(c,ty);
-    if (!tc) goto type_error;
-    *ptr = SWIG_TypeCast(tc,vptr);
-  } else {
-    *ptr = vptr;
-  }
-
-  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
-    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
-  }
-  return 0;
-
-type_error:
-  PyErr_Clear();
-  if (pyobj && !obj) {    
-    obj = pyobj;
-    if (PyCFunction_Check(obj)) {
-      /* here we get the method pointer for callbacks */
-      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
-      c = doc ? strstr(doc, "swig_ptr: ") : 0;
-      if (c) {
-	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
-	if (!c) goto type_error;
-	goto type_check;
-      }
-    }
-  }
-  if (flags & SWIG_POINTER_EXCEPTION) {
-    if (ty) {
-      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
-    } else {
-      SWIG_Python_TypeError("C/C++ pointer", obj);
-    }
-  }
-  return -1;
-}
-
-/* Convert a pointer value, signal an exception on a type mismatch */
-SWIGRUNTIME void *
-SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
-  void *result;
-  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
-    PyErr_Clear();
-    if (flags & SWIG_POINTER_EXCEPTION) {
-      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
-      SWIG_Python_ArgFail(argnum);
-    }
-  }
-  return result;
-}
-
-/* Convert a packed value value */
-SWIGRUNTIME int
-SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
-  swig_type_info *tc;
-  const char *c = 0;
-
-#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
-  c = PySwigPacked_UnpackData(obj, ptr, sz);
-#else
-  if ((!obj) || (!PyString_Check(obj))) goto type_error;
-  c = PyString_AS_STRING(obj);
-  /* Pointer values must start with leading underscore */
-  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
-#endif
-  if (!c) goto type_error;
-  if (ty) {
-    tc = SWIG_TypeCheck(c,ty);
-    if (!tc) goto type_error;
-  }
-  return 0;
-
-type_error:
-  PyErr_Clear();
-  if (flags & SWIG_POINTER_EXCEPTION) {
-    if (ty) {
-      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
-    } else {
-      SWIG_Python_TypeError("C/C++ packed data", obj);
-    }
-  }
-  return -1;
-}  
-
-/* Create a new array object */
-SWIGRUNTIME PyObject *
-SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
-  PyObject *robj = 0;
-  if (!ptr) {
-    Py_INCREF(Py_None);
-    return Py_None;
-  }
-#ifdef SWIG_COBJECT_TYPES
-  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
-#else
-  {
-    char result[SWIG_BUFFER_SIZE];
-    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
-      PyString_FromString(result) : 0;
-  }
-#endif
-  if (!robj || (robj == Py_None)) return robj;
-  if (type->clientdata) {
-    PyObject *inst;
-    PyObject *args = Py_BuildValue((char*)"(O)", robj);
-    Py_DECREF(robj);
-    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
-    Py_DECREF(args);
-    if (inst) {
-      if (own) {
-        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
-      }
-      robj = inst;
-    }
-  }
-  return robj;
-}
-
-SWIGRUNTIME PyObject *
-SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
-  PyObject *robj = 0;
-  if (!ptr) {
-    Py_INCREF(Py_None);
-    return Py_None;
-  }
-#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
-  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
-#else
-  {
-    char result[SWIG_BUFFER_SIZE];
-    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
-      PyString_FromString(result) : 0;
-  }
-#endif
-  return robj;
-}
-
-/* -----------------------------------------------------------------------------*
- *  Get type list 
- * -----------------------------------------------------------------------------*/
-
-#ifdef SWIG_LINK_RUNTIME
-void *SWIG_ReturnGlobalTypeList(void *);
-#endif
-
-SWIGRUNTIME swig_type_info **
-SWIG_Python_GetTypeListHandle() {
-  static void *type_pointer = (void *)0;
-  /* first check if module already created */
-  if (!type_pointer) {
-#ifdef SWIG_LINK_RUNTIME
-    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
-#else
-    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
-				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
-    if (PyErr_Occurred()) {
-      PyErr_Clear();
-      type_pointer = (void *)0;
-    }
-  }
-#endif
-  return (swig_type_info **) type_pointer;
-}
-
-/*
-  Search for a swig_type_info structure
- */
-SWIGRUNTIMEINLINE swig_type_info *
-SWIG_Python_GetTypeList() {
-  swig_type_info **tlh = SWIG_Python_GetTypeListHandle();
-  return tlh ? *tlh : (swig_type_info*)0;
-}
-
-#define SWIG_Runtime_GetTypeList SWIG_Python_GetTypeList 
-
-#ifdef __cplusplus
-}
-#endif
-
-
-/* -------- TYPES TABLE (BEGIN) -------- */
-
-#define  SWIGTYPE_p_s3d_key_event swig_types[0] 
-#define  SWIGTYPE_size_t swig_types[1] 
-#define  SWIGTYPE_p_mcp_object swig_types[2] 
-#define  SWIGTYPE_p_uint16_t swig_types[3] 
-#define  SWIGTYPE_p_uint32_t swig_types[4] 
-#define  SWIGTYPE_p_s3d_obj_info swig_types[5] 
-#define  SWIGTYPE_p_s3d_evt swig_types[6] 
-#define  SWIGTYPE_p_float swig_types[7] 
-#define  SWIGTYPE_p_f___void swig_types[8] 
-#define  SWIGTYPE_p_f_p_struct_s3d_evt__int swig_types[9] 
-#define  SWIGTYPE_p_p_p_char swig_types[10] 
-#define  SWIGTYPE_p_char swig_types[11] 
-#define  SWIGTYPE_p_p_char swig_types[12] 
-#define  SWIGTYPE_ptrdiff_t swig_types[13] 
-#define  SWIGTYPE_p_s3d_but_info swig_types[14] 
-#define  SWIGTYPE_p_uint8_t swig_types[15] 
-#define  SWIGTYPE_p_S3DKey swig_types[16] 
-#define  SWIGTYPE_p_int swig_types[17] 
-#define  SWIGTYPE_p_S3DMod swig_types[18] 
-static swig_type_info *swig_types[20];
-
-/* -------- TYPES TABLE (END) -------- */
-
-
-/*-----------------------------------------------
-              @(target):= _s3d.so
-  ------------------------------------------------*/
-#define SWIG_init    init_s3d
-
-#define SWIG_name    "_s3d"
-
-#include <s3d.h>
-#include <s3d_keysym.h>
-
-
-#include <limits.h>
-
-
-SWIGINTERN int
-  SWIG_CheckLongInRange(long value, long min_value, long max_value,
-			const char *errmsg)
-{
-  if (value < min_value) {
-    if (errmsg) {
-      PyErr_Format(PyExc_OverflowError, 
-		   "value %ld is less than '%s' minimum %ld", 
-		   value, errmsg, min_value);
-    }
-    return 0;    
-  } else if (value > max_value) {
-    if (errmsg) {
-      PyErr_Format(PyExc_OverflowError,
-		   "value %ld is greater than '%s' maximum %ld", 
-		   value, errmsg, max_value);
-    }
-    return 0;
-  }
-  return 1;
-}
-
-
-SWIGINTERN int
-  SWIG_AsVal_long(PyObject * obj, long* val)
-{
-  if (PyInt_Check(obj)) {
-    if (val) *val = PyInt_AS_LONG(obj);
-    return 1;
-  }
-  if (PyLong_Check(obj)) {
-    long v = PyLong_AsLong(obj);
-    if (!PyErr_Occurred()) {
-      if (val) *val = v;
-      return 1;
-    } else {
-      if (!val) PyErr_Clear();
-      return 0;
-    }
-  }
-  if (val) {
-    SWIG_type_error("long", obj);
-  }
-  return 0;
- }
-
-
-#if INT_MAX != LONG_MAX
-SWIGINTERN int
-  SWIG_AsVal_int(PyObject *obj, int *val)
-{ 
-  const char* errmsg = val ? "int" : (char*)0;
-  long v;
-  if (SWIG_AsVal_long(obj, &v)) {
-    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
-      if (val) *val = (int)(v);
-      return 1;
-    } else {
-      return 0;
-    }
-  } else {
-    PyErr_Clear();
-  }
-  if (val) {
-    SWIG_type_error(errmsg, obj);
-  }
-  return 0;    
-}
-#else
-SWIGINTERNSHORT int
-  SWIG_AsVal_int(PyObject *obj, int *val)
-{
-  return SWIG_AsVal_long(obj,(long*)val);
-}
-#endif
-
-
-SWIGINTERNSHORT int
-SWIG_As_int(PyObject* obj)
-{
-  int v;
-  if (!SWIG_AsVal_int(obj, &v)) {
-    /*
-      this is needed to make valgrind/purify happier. 
-     */
-    memset((void*)&v, 0, sizeof(int));
-  }
-  return v;
-}
-
-  
-SWIGINTERNSHORT int
-SWIG_Check_int(PyObject* obj)
-{
-  return SWIG_AsVal_int(obj, (int*)0);
-}
-
-
-  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
-#define SWIG_From_int PyInt_FromLong
-/*@@*/
-
-
-/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
-SWIGINTERN int
-SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
-{
-  static swig_type_info* pchar_info = 0;
-  char* vptr = 0;
-  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
-  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
-    if (cptr) *cptr = vptr;
-    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
-    return SWIG_OLDOBJ;
-  } else {
-    PyErr_Clear();
-    if (PyString_Check(obj)) {
-      if (cptr) {
-	*cptr = PyString_AS_STRING(obj);
-	if (psize) {
-	  *psize = PyString_GET_SIZE(obj) + 1;
-	}
-      }
-      return SWIG_PYSTR;
-    }
-  }
-  if (cptr) {
-    SWIG_type_error("char *", obj);
-  }
-  return 0;
-}
-
-
-SWIGINTERNSHORT int
-SWIG_AsCharPtr(PyObject *obj, char **val)
-{
-  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
-    return 1;
-  }
-  if (val) {
-    PyErr_Clear();
-    SWIG_type_error("char *", obj);
-  }
-  return 0;
-}
-
-
-SWIGINTERN PyObject *
-SWIG_FromCharPtr(const char* cptr)
-{ 
-  if (cptr) {
-    size_t size = strlen(cptr);
-    if (size > INT_MAX) {
-      return SWIG_NewPointerObj((char*)(cptr), 
-				SWIG_TypeQuery("char *"), 0);
-    } else {
-      if (size != 0) {
-	return PyString_FromStringAndSize(cptr, size);
-      } else {
-	return PyString_FromString(cptr);
-      }
-    }
-  }
-  Py_INCREF(Py_None);
-  return Py_None;
-}
-
-
-#include <float.h>
-SWIGINTERN int
-  SWIG_CheckDoubleInRange(double value, double min_value, 
-			  double max_value, const char* errmsg)
-{
-  if (value < min_value) {
-    if (errmsg) {
-      PyErr_Format(PyExc_OverflowError, 
-		   "value %g is less than %s minimum %g", 
-		   value, errmsg, min_value);
-    }
-    return 0;
-  } else if (value > max_value) {
-    if (errmsg) {
-      PyErr_Format(PyExc_OverflowError, 
-		   "value %g is greater than %s maximum %g", 
-		   value, errmsg, max_value);
-    }
-    return 0;
-  }
-  return 1;
-}
-
-
-SWIGINTERN int
-  SWIG_AsVal_double(PyObject *obj, double *val)
-{
-  if (PyFloat_Check(obj)) {
-    if (val) *val = PyFloat_AS_DOUBLE(obj);
-    return 1;
-  }  
-  if (PyInt_Check(obj)) {
-    if (val) *val = PyInt_AS_LONG(obj);
-    return 1;
-  }
-  if (PyLong_Check(obj)) {
-    double v = PyLong_AsDouble(obj);
-    if (!PyErr_Occurred()) {
-      if (val) *val = v;
-      return 1;
-    } else {
-      if (!val) PyErr_Clear();
-      return 0;
-    }
-  }
-  if (val) {
-    SWIG_type_error("double", obj);
-  }
-  return 0;
-}
-
-
-SWIGINTERN int
-  SWIG_AsVal_float(PyObject *obj, float *val)
-{
-  const char* errmsg = val ? "float" : (char*)0;
-  double v;
-  if (SWIG_AsVal_double(obj, &v)) {
-    if (SWIG_CheckDoubleInRange(v, -FLT_MAX, FLT_MAX, errmsg)) {
-      if (val) *val = (float)(v);
-      return 1;
-    } else {
-      return 0;
-    }
-  } else {
-    PyErr_Clear();
-  }
-  if (val) {
-    SWIG_type_error(errmsg, obj);
-  }
-  return 0;
-}
-
-
-SWIGINTERNSHORT float
-SWIG_As_float(PyObject* obj)
-{
-  float v;
-  if (!SWIG_AsVal_float(obj, &v)) {
-    /*
-      this is needed to make valgrind/purify happier. 
-     */
-    memset((void*)&v, 0, sizeof(float));
-  }
-  return v;
-}
-
-  
-SWIGINTERNSHORT int
-SWIG_Check_float(PyObject* obj)
-{
-  return SWIG_AsVal_float(obj, (float*)0);
-}
-
-
-  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
-#define SWIG_From_float PyFloat_FromDouble
-/*@@*/
-
-
-SWIGINTERN int
-SWIG_AsCharArray(PyObject *obj, char *val, size_t size)
-{ 
-  char* cptr; size_t csize;  
-  if (SWIG_AsCharPtrAndSize(obj, &cptr, &csize)) {
-    /* in C you can do:        
-
-         char x[5] = "hello"; 
-
-        ie, assing the array using an extra '0' char.
-    */
-    if ((csize == size + 1) && !(cptr[csize-1])) --csize;
-    if (csize <= size) {
-      if (val) {
-	if (csize) memcpy(val, cptr, csize);
-	if (csize < size) memset(val + csize, 0, size - csize);
-      }
-      return 1;
-    }
-  }
-  if (val) {
-    PyErr_Format(PyExc_TypeError,
-		 "a char array of maximum size %lu is expected", 
-		 (unsigned long) size);
-  }
-  return 0;
-}
-
-
-SWIGINTERNSHORT PyObject *
-SWIG_FromCharArray(const char* carray, size_t size)
-{
-  if (size > INT_MAX) {
-    return Py_None;    
-  } else {
-    return PyString_FromStringAndSize(carray, (int)(size));
-  }
-}
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-static PyObject *_wrap_s3d_evt_event_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    uint8_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_evt_event_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint8_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint8_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->event = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_evt_event_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    uint8_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_evt_event_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->event);
-    
-    {
-        uint8_t * resultptr;
-        resultptr = (uint8_t *) malloc(sizeof(uint8_t));
-        memmove(resultptr, &result, sizeof(uint8_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint8_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_evt_length_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    int arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_evt_length_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (int)(SWIG_As_int(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->length = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_evt_length_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_evt_length_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (int) ((arg1)->length);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_evt_buf_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    char *arg2 = (char *) 0 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_evt_buf_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
-        SWIG_arg_fail(2);SWIG_fail;
-    }
-    {
-        if (arg1->buf) free((char*)arg1->buf);
-        if (arg2) {
-            arg1->buf = (char *) malloc(strlen(arg2)+1);
-            strcpy((char*)arg1->buf,arg2);
-        } else {
-            arg1->buf = 0;
-        }
-    }
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_evt_buf_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    char *result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_evt_buf_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (char *) ((arg1)->buf);
-    
-    resultobj = SWIG_FromCharPtr(result);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_evt_next_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    struct s3d_evt *arg2 = (struct s3d_evt *) 0 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_evt_next_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    if (arg1) (arg1)->next = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_evt_next_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    struct s3d_evt *result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_evt_next_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (struct s3d_evt *) ((arg1)->next);
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_evt, 0);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_new_s3d_evt(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":new_s3d_evt")) goto fail;
-    result = (struct s3d_evt *)(struct s3d_evt *) calloc(1, sizeof(struct s3d_evt));
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_evt, 1);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_delete_s3d_evt(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:delete_s3d_evt",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    free((char *) arg1);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject * s3d_evt_swigregister(PyObject *self, PyObject *args) {
-    PyObject *obj;
-    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
-    SWIG_TypeClientData(SWIGTYPE_p_s3d_evt, obj);
-    Py_INCREF(obj);
-    return Py_BuildValue((char *)"");
-}
-static PyObject *_wrap_mcp_object_object_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    uint32_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_object_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->object = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_object_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    uint32_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_object_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->object);
-    
-    {
-        uint32_t * resultptr;
-        resultptr = (uint32_t *) malloc(sizeof(uint32_t));
-        memmove(resultptr, &result, sizeof(uint32_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint32_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_trans_x_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_trans_x_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->trans_x = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_trans_x_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_trans_x_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->trans_x);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_trans_y_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_trans_y_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->trans_y = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_trans_y_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_trans_y_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->trans_y);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_trans_z_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_trans_z_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->trans_z = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_trans_z_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_trans_z_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->trans_z);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_r_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_r_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->r = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_r_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_r_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->r);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_name_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    char *arg2 ;
-    char temp2[256] ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:mcp_object_name_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        if (!SWIG_AsCharArray(obj1, temp2, 256)) {
-            SWIG_arg_fail(2);SWIG_fail;
-        }
-        arg2 = temp2;
-    }
-    {
-        if (arg2) memcpy(arg1->name,arg2,256*sizeof(char));
-        else memset(arg1->name,0,256*sizeof(char));
-    }
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_mcp_object_name_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    char *result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:mcp_object_name_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (char *)(char *) ((arg1)->name);
-    
-    {
-        size_t size = 256;
-#ifndef SWIG_PRESERVE_CARRAY_SIZE
-        while (size && (result[size - 1] == '\0')) --size;
-#endif
-        resultobj = SWIG_FromCharArray(result, size);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_new_mcp_object(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":new_mcp_object")) goto fail;
-    result = (struct mcp_object *)(struct mcp_object *) calloc(1, sizeof(struct mcp_object));
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_mcp_object, 1);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_delete_mcp_object(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct mcp_object *arg1 = (struct mcp_object *) 0 ;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:delete_mcp_object",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_mcp_object, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    free((char *) arg1);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject * mcp_object_swigregister(PyObject *self, PyObject *args) {
-    PyObject *obj;
-    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
-    SWIG_TypeClientData(SWIGTYPE_p_mcp_object, obj);
-    Py_INCREF(obj);
-    return Py_BuildValue((char *)"");
-}
-static PyObject *_wrap_s3d_obj_info_object_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    uint32_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_object_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->object = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_object_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    uint32_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_object_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->object);
-    
-    {
-        uint32_t * resultptr;
-        resultptr = (uint32_t *) malloc(sizeof(uint32_t));
-        memmove(resultptr, &result, sizeof(uint32_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint32_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_flags_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    uint32_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_flags_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->flags = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_flags_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    uint32_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_flags_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->flags);
-    
-    {
-        uint32_t * resultptr;
-        resultptr = (uint32_t *) malloc(sizeof(uint32_t));
-        memmove(resultptr, &result, sizeof(uint32_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint32_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_trans_x_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_trans_x_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->trans_x = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_trans_x_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_trans_x_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->trans_x);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_trans_y_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_trans_y_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->trans_y = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_trans_y_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_trans_y_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->trans_y);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_trans_z_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_trans_z_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->trans_z = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_trans_z_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_trans_z_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->trans_z);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_rot_x_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_rot_x_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->rot_x = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_rot_x_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_rot_x_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->rot_x);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_rot_y_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_rot_y_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->rot_y = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_rot_y_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_rot_y_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->rot_y);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_rot_z_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_rot_z_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->rot_z = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_rot_z_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_rot_z_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->rot_z);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_scale_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_scale_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->scale = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_scale_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_scale_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->scale);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_r_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_r_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    if (arg1) (arg1)->r = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_r_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_r_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float) ((arg1)->r);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_name_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    char *arg2 ;
-    char temp2[256] ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_obj_info_name_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        if (!SWIG_AsCharArray(obj1, temp2, 256)) {
-            SWIG_arg_fail(2);SWIG_fail;
-        }
-        arg2 = temp2;
-    }
-    {
-        if (arg2) memcpy(arg1->name,arg2,256*sizeof(char));
-        else memset(arg1->name,0,256*sizeof(char));
-    }
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_obj_info_name_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    char *result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_obj_info_name_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (char *)(char *) ((arg1)->name);
-    
-    {
-        size_t size = 256;
-#ifndef SWIG_PRESERVE_CARRAY_SIZE
-        while (size && (result[size - 1] == '\0')) --size;
-#endif
-        resultobj = SWIG_FromCharArray(result, size);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_new_s3d_obj_info(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":new_s3d_obj_info")) goto fail;
-    result = (struct s3d_obj_info *)(struct s3d_obj_info *) calloc(1, sizeof(struct s3d_obj_info));
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_obj_info, 1);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_delete_s3d_obj_info(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_obj_info *arg1 = (struct s3d_obj_info *) 0 ;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:delete_s3d_obj_info",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_obj_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    free((char *) arg1);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject * s3d_obj_info_swigregister(PyObject *self, PyObject *args) {
-    PyObject *obj;
-    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
-    SWIG_TypeClientData(SWIGTYPE_p_s3d_obj_info, obj);
-    Py_INCREF(obj);
-    return Py_BuildValue((char *)"");
-}
-static PyObject *_wrap_s3d_but_info_button_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
-    uint8_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_but_info_button_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint8_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint8_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->button = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_but_info_button_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
-    uint8_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_but_info_button_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->button);
-    
-    {
-        uint8_t * resultptr;
-        resultptr = (uint8_t *) malloc(sizeof(uint8_t));
-        memmove(resultptr, &result, sizeof(uint8_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint8_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_but_info_state_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
-    uint8_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_but_info_state_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint8_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint8_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->state = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_but_info_state_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
-    uint8_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_but_info_state_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->state);
-    
-    {
-        uint8_t * resultptr;
-        resultptr = (uint8_t *) malloc(sizeof(uint8_t));
-        memmove(resultptr, &result, sizeof(uint8_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint8_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_new_s3d_but_info(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_but_info *result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":new_s3d_but_info")) goto fail;
-    result = (struct s3d_but_info *)(struct s3d_but_info *) calloc(1, sizeof(struct s3d_but_info));
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_but_info, 1);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_delete_s3d_but_info(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_but_info *arg1 = (struct s3d_but_info *) 0 ;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:delete_s3d_but_info",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_but_info, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    free((char *) arg1);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject * s3d_but_info_swigregister(PyObject *self, PyObject *args) {
-    PyObject *obj;
-    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
-    SWIG_TypeClientData(SWIGTYPE_p_s3d_but_info, obj);
-    Py_INCREF(obj);
-    return Py_BuildValue((char *)"");
-}
-static PyObject *_wrap_s3d_key_event_keysym_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    uint16_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_key_event_keysym_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->keysym = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_key_event_keysym_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    uint16_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_key_event_keysym_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->keysym);
-    
-    {
-        uint16_t * resultptr;
-        resultptr = (uint16_t *) malloc(sizeof(uint16_t));
-        memmove(resultptr, &result, sizeof(uint16_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint16_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_key_event_unicode_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    uint16_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_key_event_unicode_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->unicode = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_key_event_unicode_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    uint16_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_key_event_unicode_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->unicode);
-    
-    {
-        uint16_t * resultptr;
-        resultptr = (uint16_t *) malloc(sizeof(uint16_t));
-        memmove(resultptr, &result, sizeof(uint16_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint16_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_key_event_modifier_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    uint16_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_key_event_modifier_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->modifier = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_key_event_modifier_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    uint16_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_key_event_modifier_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->modifier);
-    
-    {
-        uint16_t * resultptr;
-        resultptr = (uint16_t *) malloc(sizeof(uint16_t));
-        memmove(resultptr, &result, sizeof(uint16_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint16_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_key_event_state_set(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    uint16_t arg2 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_key_event_state_set",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    if (arg1) (arg1)->state = arg2;
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_key_event_state_get(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    uint16_t result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_key_event_state_get",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result =  ((arg1)->state);
-    
-    {
-        uint16_t * resultptr;
-        resultptr = (uint16_t *) malloc(sizeof(uint16_t));
-        memmove(resultptr, &result, sizeof(uint16_t));
-        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_uint16_t, 1);
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_new_s3d_key_event(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":new_s3d_key_event")) goto fail;
-    result = (struct s3d_key_event *)(struct s3d_key_event *) calloc(1, sizeof(struct s3d_key_event));
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_key_event, 1);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_delete_s3d_key_event(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_key_event *arg1 = (struct s3d_key_event *) 0 ;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:delete_s3d_key_event",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_key_event, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    free((char *) arg1);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject * s3d_key_event_swigregister(PyObject *self, PyObject *args) {
-    PyObject *obj;
-    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
-    SWIG_TypeClientData(SWIGTYPE_p_s3d_key_event, obj);
-    Py_INCREF(obj);
-    return Py_BuildValue((char *)"");
-}
-static PyObject *_wrap_s3d_usage(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    
-    if(!PyArg_ParseTuple(args,(char *)":s3d_usage")) goto fail;
-    s3d_usage();
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_init(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int *arg1 = (int *) 0 ;
-    char ***arg2 = (char ***) 0 ;
-    char *arg3 = (char *) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_init",&obj0,&obj1,&obj2)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_p_char, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
-        SWIG_arg_fail(3);SWIG_fail;
-    }
-    result = (int)s3d_init(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_quit(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":s3d_quit")) goto fail;
-    result = (int)s3d_quit();
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_mainloop(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    void (*arg1)() = (void (*)()) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_mainloop",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_f___void, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (int)s3d_mainloop(arg1);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_vertex(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_push_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    result = (int)s3d_push_vertex(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_vertices(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_vertices",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_push_vertices(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_material(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    float arg5 ;
-    float arg6 ;
-    float arg7 ;
-    float arg8 ;
-    float arg9 ;
-    float arg10 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    PyObject * obj4 = 0 ;
-    PyObject * obj5 = 0 ;
-    PyObject * obj6 = 0 ;
-    PyObject * obj7 = 0 ;
-    PyObject * obj8 = 0 ;
-    PyObject * obj9 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:s3d_push_material",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    {
-        arg5 = (float)(SWIG_As_float(obj4)); 
-        if (SWIG_arg_fail(5)) SWIG_fail;
-    }
-    {
-        arg6 = (float)(SWIG_As_float(obj5)); 
-        if (SWIG_arg_fail(6)) SWIG_fail;
-    }
-    {
-        arg7 = (float)(SWIG_As_float(obj6)); 
-        if (SWIG_arg_fail(7)) SWIG_fail;
-    }
-    {
-        arg8 = (float)(SWIG_As_float(obj7)); 
-        if (SWIG_arg_fail(8)) SWIG_fail;
-    }
-    {
-        arg9 = (float)(SWIG_As_float(obj8)); 
-        if (SWIG_arg_fail(9)) SWIG_fail;
-    }
-    {
-        arg10 = (float)(SWIG_As_float(obj9)); 
-        if (SWIG_arg_fail(10)) SWIG_fail;
-    }
-    result = (int)s3d_push_material(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_material(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    float arg5 ;
-    float arg6 ;
-    float arg7 ;
-    float arg8 ;
-    float arg9 ;
-    float arg10 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    PyObject * obj4 = 0 ;
-    PyObject * obj5 = 0 ;
-    PyObject * obj6 = 0 ;
-    PyObject * obj7 = 0 ;
-    PyObject * obj8 = 0 ;
-    PyObject * obj9 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:s3d_pep_material",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    {
-        arg5 = (float)(SWIG_As_float(obj4)); 
-        if (SWIG_arg_fail(5)) SWIG_fail;
-    }
-    {
-        arg6 = (float)(SWIG_As_float(obj5)); 
-        if (SWIG_arg_fail(6)) SWIG_fail;
-    }
-    {
-        arg7 = (float)(SWIG_As_float(obj6)); 
-        if (SWIG_arg_fail(7)) SWIG_fail;
-    }
-    {
-        arg8 = (float)(SWIG_As_float(obj7)); 
-        if (SWIG_arg_fail(8)) SWIG_fail;
-    }
-    {
-        arg9 = (float)(SWIG_As_float(obj8)); 
-        if (SWIG_arg_fail(9)) SWIG_fail;
-    }
-    {
-        arg10 = (float)(SWIG_As_float(obj9)); 
-        if (SWIG_arg_fail(10)) SWIG_fail;
-    }
-    result = (int)s3d_pep_material(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_material_a(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    float arg5 ;
-    float arg6 ;
-    float arg7 ;
-    float arg8 ;
-    float arg9 ;
-    float arg10 ;
-    float arg11 ;
-    float arg12 ;
-    float arg13 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    PyObject * obj4 = 0 ;
-    PyObject * obj5 = 0 ;
-    PyObject * obj6 = 0 ;
-    PyObject * obj7 = 0 ;
-    PyObject * obj8 = 0 ;
-    PyObject * obj9 = 0 ;
-    PyObject * obj10 = 0 ;
-    PyObject * obj11 = 0 ;
-    PyObject * obj12 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:s3d_push_material_a",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    {
-        arg5 = (float)(SWIG_As_float(obj4)); 
-        if (SWIG_arg_fail(5)) SWIG_fail;
-    }
-    {
-        arg6 = (float)(SWIG_As_float(obj5)); 
-        if (SWIG_arg_fail(6)) SWIG_fail;
-    }
-    {
-        arg7 = (float)(SWIG_As_float(obj6)); 
-        if (SWIG_arg_fail(7)) SWIG_fail;
-    }
-    {
-        arg8 = (float)(SWIG_As_float(obj7)); 
-        if (SWIG_arg_fail(8)) SWIG_fail;
-    }
-    {
-        arg9 = (float)(SWIG_As_float(obj8)); 
-        if (SWIG_arg_fail(9)) SWIG_fail;
-    }
-    {
-        arg10 = (float)(SWIG_As_float(obj9)); 
-        if (SWIG_arg_fail(10)) SWIG_fail;
-    }
-    {
-        arg11 = (float)(SWIG_As_float(obj10)); 
-        if (SWIG_arg_fail(11)) SWIG_fail;
-    }
-    {
-        arg12 = (float)(SWIG_As_float(obj11)); 
-        if (SWIG_arg_fail(12)) SWIG_fail;
-    }
-    {
-        arg13 = (float)(SWIG_As_float(obj12)); 
-        if (SWIG_arg_fail(13)) SWIG_fail;
-    }
-    result = (int)s3d_push_material_a(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_materials_a(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_materials_a",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_push_materials_a(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_material_a(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    float arg5 ;
-    float arg6 ;
-    float arg7 ;
-    float arg8 ;
-    float arg9 ;
-    float arg10 ;
-    float arg11 ;
-    float arg12 ;
-    float arg13 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    PyObject * obj4 = 0 ;
-    PyObject * obj5 = 0 ;
-    PyObject * obj6 = 0 ;
-    PyObject * obj7 = 0 ;
-    PyObject * obj8 = 0 ;
-    PyObject * obj9 = 0 ;
-    PyObject * obj10 = 0 ;
-    PyObject * obj11 = 0 ;
-    PyObject * obj12 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:s3d_pep_material_a",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    {
-        arg5 = (float)(SWIG_As_float(obj4)); 
-        if (SWIG_arg_fail(5)) SWIG_fail;
-    }
-    {
-        arg6 = (float)(SWIG_As_float(obj5)); 
-        if (SWIG_arg_fail(6)) SWIG_fail;
-    }
-    {
-        arg7 = (float)(SWIG_As_float(obj6)); 
-        if (SWIG_arg_fail(7)) SWIG_fail;
-    }
-    {
-        arg8 = (float)(SWIG_As_float(obj7)); 
-        if (SWIG_arg_fail(8)) SWIG_fail;
-    }
-    {
-        arg9 = (float)(SWIG_As_float(obj8)); 
-        if (SWIG_arg_fail(9)) SWIG_fail;
-    }
-    {
-        arg10 = (float)(SWIG_As_float(obj9)); 
-        if (SWIG_arg_fail(10)) SWIG_fail;
-    }
-    {
-        arg11 = (float)(SWIG_As_float(obj10)); 
-        if (SWIG_arg_fail(11)) SWIG_fail;
-    }
-    {
-        arg12 = (float)(SWIG_As_float(obj11)); 
-        if (SWIG_arg_fail(12)) SWIG_fail;
-    }
-    {
-        arg13 = (float)(SWIG_As_float(obj12)); 
-        if (SWIG_arg_fail(13)) SWIG_fail;
-    }
-    result = (int)s3d_pep_material_a(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_materials_a(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_materials_a",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_pep_materials_a(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_load_materials_a(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint32_t arg3 ;
-    uint16_t arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_load_materials_a",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        arg4 = *argp;
-    }
-    result = (int)s3d_load_materials_a(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_polygon(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    uint32_t arg3 ;
-    uint32_t arg4 ;
-    uint32_t arg5 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    PyObject * obj4 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOOO:s3d_push_polygon",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        arg4 = *argp;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(5)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(5)) SWIG_fail;
-        arg5 = *argp;
-    }
-    result = (int)s3d_push_polygon(arg1,arg2,arg3,arg4,arg5);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_polygons(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t *arg2 = (uint32_t *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_polygons",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_push_polygons(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_line(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    uint32_t arg3 ;
-    uint32_t arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_push_line",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        arg4 = *argp;
-    }
-    result = (int)s3d_push_line(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_lines(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t *arg2 = (uint32_t *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_lines",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_push_lines(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_texture(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint16_t arg2 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_texture",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_push_texture(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_textures(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint16_t *arg2 = (uint16_t *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_push_textures",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_push_textures(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pop_vertex(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_vertex",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    result = (int)s3d_pop_vertex(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pop_polygon(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_polygon",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    result = (int)s3d_pop_polygon(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pop_material(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_material",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    result = (int)s3d_pop_material(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pop_texture(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_texture",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    result = (int)s3d_pop_texture(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pop_line(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pop_line",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    result = (int)s3d_pop_line(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_line_normals(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_line_normals",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_pep_line_normals(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_polygon_normals(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_polygon_normals",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_pep_polygon_normals(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_polygon_tex_coord(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    float arg5 ;
-    float arg6 ;
-    float arg7 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    PyObject * obj4 = 0 ;
-    PyObject * obj5 = 0 ;
-    PyObject * obj6 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:s3d_pep_polygon_tex_coord",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    {
-        arg5 = (float)(SWIG_As_float(obj4)); 
-        if (SWIG_arg_fail(5)) SWIG_fail;
-    }
-    {
-        arg6 = (float)(SWIG_As_float(obj5)); 
-        if (SWIG_arg_fail(6)) SWIG_fail;
-    }
-    {
-        arg7 = (float)(SWIG_As_float(obj6)); 
-        if (SWIG_arg_fail(7)) SWIG_fail;
-    }
-    result = (int)s3d_pep_polygon_tex_coord(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_polygon_tex_coords(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_polygon_tex_coords",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_pep_polygon_tex_coords(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_material_texture(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_pep_material_texture",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    result = (int)s3d_pep_material_texture(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_vertex(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_pep_vertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    result = (int)s3d_pep_vertex(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_vertices(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_vertices",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_pep_vertices(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_line(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    int arg2 ;
-    int arg3 ;
-    int arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_pep_line",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (int)(SWIG_As_int(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (int)(SWIG_As_int(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (int)(SWIG_As_int(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    result = (int)s3d_pep_line(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pep_lines(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t *arg2 = (uint32_t *) 0 ;
-    uint16_t arg3 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_pep_lines",&obj0,&obj1,&obj2)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    result = (int)s3d_pep_lines(arg1,arg2,arg3);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_load_line_normals(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint32_t arg3 ;
-    uint16_t arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_load_line_normals",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        arg4 = *argp;
-    }
-    result = (int)s3d_load_line_normals(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_load_polygon_normals(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint32_t arg3 ;
-    uint16_t arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_load_polygon_normals",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        arg4 = *argp;
-    }
-    result = (int)s3d_load_polygon_normals(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_load_polygon_tex_coords(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float *arg2 = (float *) 0 ;
-    uint32_t arg3 ;
-    uint16_t arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_load_polygon_tex_coords",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        arg4 = *argp;
-    }
-    result = (int)s3d_load_polygon_tex_coords(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_load_texture(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    uint16_t arg3 ;
-    uint16_t arg4 ;
-    uint16_t arg5 ;
-    uint16_t arg6 ;
-    uint8_t *arg7 = (uint8_t *) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    PyObject * obj4 = 0 ;
-    PyObject * obj5 = 0 ;
-    PyObject * obj6 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:s3d_load_texture",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(3)) SWIG_fail;
-        arg3 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(4)) SWIG_fail;
-        arg4 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(5)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(5)) SWIG_fail;
-        arg5 = *argp;
-    }
-    {
-        uint16_t * argp;
-        SWIG_Python_ConvertPtr(obj5, (void **)&argp, SWIGTYPE_p_uint16_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(6)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint16_t");
-        }
-        if (SWIG_arg_fail(6)) SWIG_fail;
-        arg6 = *argp;
-    }
-    SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(7)) SWIG_fail;
-    result = (int)s3d_load_texture(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_new_object(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":s3d_new_object")) goto fail;
-    result = (int)s3d_new_object();
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_del_object(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_del_object",&obj0)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    result = (int)s3d_del_object(arg1);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_clone(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_clone",&obj0)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    result = (int)s3d_clone(arg1);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_clone_target(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    int arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_clone_target",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (int)(SWIG_As_int(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    result = (int)s3d_clone_target(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_link(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    int arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_link",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (int)(SWIG_As_int(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    result = (int)s3d_link(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_unlink(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_unlink",&obj0)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    result = (int)s3d_unlink(arg1);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_flags_on(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_flags_on",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    result = (int)s3d_flags_on(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_flags_off(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    uint32_t arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_flags_off",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        uint32_t * argp;
-        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_uint32_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint32_t");
-        }
-        if (SWIG_arg_fail(2)) SWIG_fail;
-        arg2 = *argp;
-    }
-    result = (int)s3d_flags_off(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_translate(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_translate",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    result = (int)s3d_translate(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_rotate(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    float arg3 ;
-    float arg4 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    PyObject * obj3 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOOO:s3d_rotate",&obj0,&obj1,&obj2,&obj3)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    {
-        arg3 = (float)(SWIG_As_float(obj2)); 
-        if (SWIG_arg_fail(3)) SWIG_fail;
-    }
-    {
-        arg4 = (float)(SWIG_As_float(obj3)); 
-        if (SWIG_arg_fail(4)) SWIG_fail;
-    }
-    result = (int)s3d_rotate(arg1,arg2,arg3,arg4);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_scale(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    float arg2 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_scale",&obj0,&obj1)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    {
-        arg2 = (float)(SWIG_As_float(obj1)); 
-        if (SWIG_arg_fail(2)) SWIG_fail;
-    }
-    result = (int)s3d_scale(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_import_model_file(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    char *arg1 = (char *) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_import_model_file",&obj0)) goto fail;
-    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
-        SWIG_arg_fail(1);SWIG_fail;
-    }
-    result = (int)s3d_import_model_file(arg1);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_open_file(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    char *arg1 = (char *) 0 ;
-    char **arg2 = (char **) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_open_file",&obj0,&obj1)) goto fail;
-    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
-        SWIG_arg_fail(1);SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_char, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    result = (int)s3d_open_file(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_select_font(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    char *arg1 = (char *) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_select_font",&obj0)) goto fail;
-    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
-        SWIG_arg_fail(1);SWIG_fail;
-    }
-    result = (int)s3d_select_font(arg1);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_draw_string(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    char *arg1 = (char *) 0 ;
-    float *arg2 = (float *) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_draw_string",&obj0,&obj1)) goto fail;
-    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
-        SWIG_arg_fail(1);SWIG_fail;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    result = (int)s3d_draw_string(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_vector_length(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    float *arg1 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_vector_length",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (float)s3d_vector_length(arg1);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_vector_dot_product(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    float *arg1 ;
-    float *arg2 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_vector_dot_product",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    result = (float)s3d_vector_dot_product(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_vector_substract(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    float *arg1 ;
-    float *arg2 ;
-    float *arg3 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    PyObject * obj2 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OOO:s3d_vector_substract",&obj0,&obj1,&obj2)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(3)) SWIG_fail;
-    s3d_vector_substract(arg1,arg2,arg3);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_vector_angle(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    float *arg1 ;
-    float *arg2 ;
-    float result;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_vector_angle",&obj0,&obj1)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    result = (float)s3d_vector_angle(arg1,arg2);
-    
-    {
-        resultobj = SWIG_From_float((float)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_push_event(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_push_event",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    s3d_push_event(arg1);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_pop_event(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":s3d_pop_event")) goto fail;
-    result = (struct s3d_evt *)s3d_pop_event();
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_evt, 0);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_find_event(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    uint8_t arg1 ;
-    struct s3d_evt *result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_find_event",&obj0)) goto fail;
-    {
-        uint8_t * argp;
-        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint8_t");
-        }
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        arg1 = *argp;
-    }
-    result = (struct s3d_evt *)s3d_find_event(arg1);
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_s3d_evt, 0);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_delete_event(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    struct s3d_evt *arg1 = (struct s3d_evt *) 0 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_delete_event",&obj0)) goto fail;
-    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_s3d_evt, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(1)) SWIG_fail;
-    result = (int)s3d_delete_event(arg1);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_set_callback(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    uint8_t arg1 ;
-    s3d_cb arg2 = (s3d_cb) 0 ;
-    PyObject * obj0 = 0 ;
-    PyObject * obj1 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"OO:s3d_set_callback",&obj0,&obj1)) goto fail;
-    {
-        uint8_t * argp;
-        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint8_t");
-        }
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        arg1 = *argp;
-    }
-    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_struct_s3d_evt__int, SWIG_POINTER_EXCEPTION | 0);
-    if (SWIG_arg_fail(2)) SWIG_fail;
-    s3d_set_callback(arg1,arg2);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_clear_callback(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    uint8_t arg1 ;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_clear_callback",&obj0)) goto fail;
-    {
-        uint8_t * argp;
-        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint8_t");
-        }
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        arg1 = *argp;
-    }
-    s3d_clear_callback(arg1);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_ignore_callback(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    uint8_t arg1 ;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_ignore_callback",&obj0)) goto fail;
-    {
-        uint8_t * argp;
-        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint8_t");
-        }
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        arg1 = *argp;
-    }
-    s3d_ignore_callback(arg1);
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_get_callback(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    uint8_t arg1 ;
-    s3d_cb result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_get_callback",&obj0)) goto fail;
-    {
-        uint8_t * argp;
-        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_uint8_t, SWIG_POINTER_EXCEPTION);
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        if (argp == NULL) {
-            SWIG_null_ref("uint8_t");
-        }
-        if (SWIG_arg_fail(1)) SWIG_fail;
-        arg1 = *argp;
-    }
-    result = (s3d_cb)s3d_get_callback(arg1);
-    
-    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_p_struct_s3d_evt__int, 0);
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_process_stack(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    
-    if(!PyArg_ParseTuple(args,(char *)":s3d_process_stack")) goto fail;
-    s3d_process_stack();
-    
-    Py_INCREF(Py_None); resultobj = Py_None;
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_mcp_focus(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int arg1 ;
-    int result;
-    PyObject * obj0 = 0 ;
-    
-    if(!PyArg_ParseTuple(args,(char *)"O:s3d_mcp_focus",&obj0)) goto fail;
-    {
-        arg1 = (int)(SWIG_As_int(obj0)); 
-        if (SWIG_arg_fail(1)) SWIG_fail;
-    }
-    result = (int)s3d_mcp_focus(arg1);
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyObject *_wrap_s3d_net_check(PyObject *self, PyObject *args) {
-    PyObject *resultobj;
-    int result;
-    
-    if(!PyArg_ParseTuple(args,(char *)":s3d_net_check")) goto fail;
-    result = (int)s3d_net_check();
-    
-    {
-        resultobj = SWIG_From_int((int)(result)); 
-    }
-    return resultobj;
-    fail:
-    return NULL;
-}
-
-
-static PyMethodDef SwigMethods[] = {
-	 { (char *)"s3d_evt_event_set", _wrap_s3d_evt_event_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_evt_event_get", _wrap_s3d_evt_event_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_evt_length_set", _wrap_s3d_evt_length_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_evt_length_get", _wrap_s3d_evt_length_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_evt_buf_set", _wrap_s3d_evt_buf_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_evt_buf_get", _wrap_s3d_evt_buf_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_evt_next_set", _wrap_s3d_evt_next_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_evt_next_get", _wrap_s3d_evt_next_get, METH_VARARGS, NULL},
-	 { (char *)"new_s3d_evt", _wrap_new_s3d_evt, METH_VARARGS, NULL},
-	 { (char *)"delete_s3d_evt", _wrap_delete_s3d_evt, METH_VARARGS, NULL},
-	 { (char *)"s3d_evt_swigregister", s3d_evt_swigregister, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_object_set", _wrap_mcp_object_object_set, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_object_get", _wrap_mcp_object_object_get, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_trans_x_set", _wrap_mcp_object_trans_x_set, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_trans_x_get", _wrap_mcp_object_trans_x_get, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_trans_y_set", _wrap_mcp_object_trans_y_set, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_trans_y_get", _wrap_mcp_object_trans_y_get, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_trans_z_set", _wrap_mcp_object_trans_z_set, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_trans_z_get", _wrap_mcp_object_trans_z_get, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_r_set", _wrap_mcp_object_r_set, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_r_get", _wrap_mcp_object_r_get, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_name_set", _wrap_mcp_object_name_set, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_name_get", _wrap_mcp_object_name_get, METH_VARARGS, NULL},
-	 { (char *)"new_mcp_object", _wrap_new_mcp_object, METH_VARARGS, NULL},
-	 { (char *)"delete_mcp_object", _wrap_delete_mcp_object, METH_VARARGS, NULL},
-	 { (char *)"mcp_object_swigregister", mcp_object_swigregister, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_object_set", _wrap_s3d_obj_info_object_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_object_get", _wrap_s3d_obj_info_object_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_flags_set", _wrap_s3d_obj_info_flags_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_flags_get", _wrap_s3d_obj_info_flags_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_trans_x_set", _wrap_s3d_obj_info_trans_x_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_trans_x_get", _wrap_s3d_obj_info_trans_x_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_trans_y_set", _wrap_s3d_obj_info_trans_y_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_trans_y_get", _wrap_s3d_obj_info_trans_y_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_trans_z_set", _wrap_s3d_obj_info_trans_z_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_trans_z_get", _wrap_s3d_obj_info_trans_z_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_rot_x_set", _wrap_s3d_obj_info_rot_x_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_rot_x_get", _wrap_s3d_obj_info_rot_x_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_rot_y_set", _wrap_s3d_obj_info_rot_y_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_rot_y_get", _wrap_s3d_obj_info_rot_y_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_rot_z_set", _wrap_s3d_obj_info_rot_z_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_rot_z_get", _wrap_s3d_obj_info_rot_z_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_scale_set", _wrap_s3d_obj_info_scale_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_scale_get", _wrap_s3d_obj_info_scale_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_r_set", _wrap_s3d_obj_info_r_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_r_get", _wrap_s3d_obj_info_r_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_name_set", _wrap_s3d_obj_info_name_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_name_get", _wrap_s3d_obj_info_name_get, METH_VARARGS, NULL},
-	 { (char *)"new_s3d_obj_info", _wrap_new_s3d_obj_info, METH_VARARGS, NULL},
-	 { (char *)"delete_s3d_obj_info", _wrap_delete_s3d_obj_info, METH_VARARGS, NULL},
-	 { (char *)"s3d_obj_info_swigregister", s3d_obj_info_swigregister, METH_VARARGS, NULL},
-	 { (char *)"s3d_but_info_button_set", _wrap_s3d_but_info_button_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_but_info_button_get", _wrap_s3d_but_info_button_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_but_info_state_set", _wrap_s3d_but_info_state_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_but_info_state_get", _wrap_s3d_but_info_state_get, METH_VARARGS, NULL},
-	 { (char *)"new_s3d_but_info", _wrap_new_s3d_but_info, METH_VARARGS, NULL},
-	 { (char *)"delete_s3d_but_info", _wrap_delete_s3d_but_info, METH_VARARGS, NULL},
-	 { (char *)"s3d_but_info_swigregister", s3d_but_info_swigregister, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_keysym_set", _wrap_s3d_key_event_keysym_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_keysym_get", _wrap_s3d_key_event_keysym_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_unicode_set", _wrap_s3d_key_event_unicode_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_unicode_get", _wrap_s3d_key_event_unicode_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_modifier_set", _wrap_s3d_key_event_modifier_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_modifier_get", _wrap_s3d_key_event_modifier_get, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_state_set", _wrap_s3d_key_event_state_set, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_state_get", _wrap_s3d_key_event_state_get, METH_VARARGS, NULL},
-	 { (char *)"new_s3d_key_event", _wrap_new_s3d_key_event, METH_VARARGS, NULL},
-	 { (char *)"delete_s3d_key_event", _wrap_delete_s3d_key_event, METH_VARARGS, NULL},
-	 { (char *)"s3d_key_event_swigregister", s3d_key_event_swigregister, METH_VARARGS, NULL},
-	 { (char *)"s3d_usage", _wrap_s3d_usage, METH_VARARGS, NULL},
-	 { (char *)"s3d_init", _wrap_s3d_init, METH_VARARGS, NULL},
-	 { (char *)"s3d_quit", _wrap_s3d_quit, METH_VARARGS, NULL},
-	 { (char *)"s3d_mainloop", _wrap_s3d_mainloop, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_vertex", _wrap_s3d_push_vertex, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_vertices", _wrap_s3d_push_vertices, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_material", _wrap_s3d_push_material, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_material", _wrap_s3d_pep_material, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_material_a", _wrap_s3d_push_material_a, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_materials_a", _wrap_s3d_push_materials_a, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_material_a", _wrap_s3d_pep_material_a, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_materials_a", _wrap_s3d_pep_materials_a, METH_VARARGS, NULL},
-	 { (char *)"s3d_load_materials_a", _wrap_s3d_load_materials_a, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_polygon", _wrap_s3d_push_polygon, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_polygons", _wrap_s3d_push_polygons, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_line", _wrap_s3d_push_line, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_lines", _wrap_s3d_push_lines, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_texture", _wrap_s3d_push_texture, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_textures", _wrap_s3d_push_textures, METH_VARARGS, NULL},
-	 { (char *)"s3d_pop_vertex", _wrap_s3d_pop_vertex, METH_VARARGS, NULL},
-	 { (char *)"s3d_pop_polygon", _wrap_s3d_pop_polygon, METH_VARARGS, NULL},
-	 { (char *)"s3d_pop_material", _wrap_s3d_pop_material, METH_VARARGS, NULL},
-	 { (char *)"s3d_pop_texture", _wrap_s3d_pop_texture, METH_VARARGS, NULL},
-	 { (char *)"s3d_pop_line", _wrap_s3d_pop_line, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_line_normals", _wrap_s3d_pep_line_normals, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_polygon_normals", _wrap_s3d_pep_polygon_normals, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_polygon_tex_coord", _wrap_s3d_pep_polygon_tex_coord, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_polygon_tex_coords", _wrap_s3d_pep_polygon_tex_coords, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_material_texture", _wrap_s3d_pep_material_texture, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_vertex", _wrap_s3d_pep_vertex, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_vertices", _wrap_s3d_pep_vertices, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_line", _wrap_s3d_pep_line, METH_VARARGS, NULL},
-	 { (char *)"s3d_pep_lines", _wrap_s3d_pep_lines, METH_VARARGS, NULL},
-	 { (char *)"s3d_load_line_normals", _wrap_s3d_load_line_normals, METH_VARARGS, NULL},
-	 { (char *)"s3d_load_polygon_normals", _wrap_s3d_load_polygon_normals, METH_VARARGS, NULL},
-	 { (char *)"s3d_load_polygon_tex_coords", _wrap_s3d_load_polygon_tex_coords, METH_VARARGS, NULL},
-	 { (char *)"s3d_load_texture", _wrap_s3d_load_texture, METH_VARARGS, NULL},
-	 { (char *)"s3d_new_object", _wrap_s3d_new_object, METH_VARARGS, NULL},
-	 { (char *)"s3d_del_object", _wrap_s3d_del_object, METH_VARARGS, NULL},
-	 { (char *)"s3d_clone", _wrap_s3d_clone, METH_VARARGS, NULL},
-	 { (char *)"s3d_clone_target", _wrap_s3d_clone_target, METH_VARARGS, NULL},
-	 { (char *)"s3d_link", _wrap_s3d_link, METH_VARARGS, NULL},
-	 { (char *)"s3d_unlink", _wrap_s3d_unlink, METH_VARARGS, NULL},
-	 { (char *)"s3d_flags_on", _wrap_s3d_flags_on, METH_VARARGS, NULL},
-	 { (char *)"s3d_flags_off", _wrap_s3d_flags_off, METH_VARARGS, NULL},
-	 { (char *)"s3d_translate", _wrap_s3d_translate, METH_VARARGS, NULL},
-	 { (char *)"s3d_rotate", _wrap_s3d_rotate, METH_VARARGS, NULL},
-	 { (char *)"s3d_scale", _wrap_s3d_scale, METH_VARARGS, NULL},
-	 { (char *)"s3d_import_model_file", _wrap_s3d_import_model_file, METH_VARARGS, NULL},
-	 { (char *)"s3d_open_file", _wrap_s3d_open_file, METH_VARARGS, NULL},
-	 { (char *)"s3d_select_font", _wrap_s3d_select_font, METH_VARARGS, NULL},
-	 { (char *)"s3d_draw_string", _wrap_s3d_draw_string, METH_VARARGS, NULL},
-	 { (char *)"s3d_vector_length", _wrap_s3d_vector_length, METH_VARARGS, NULL},
-	 { (char *)"s3d_vector_dot_product", _wrap_s3d_vector_dot_product, METH_VARARGS, NULL},
-	 { (char *)"s3d_vector_substract", _wrap_s3d_vector_substract, METH_VARARGS, NULL},
-	 { (char *)"s3d_vector_angle", _wrap_s3d_vector_angle, METH_VARARGS, NULL},
-	 { (char *)"s3d_push_event", _wrap_s3d_push_event, METH_VARARGS, NULL},
-	 { (char *)"s3d_pop_event", _wrap_s3d_pop_event, METH_VARARGS, NULL},
-	 { (char *)"s3d_find_event", _wrap_s3d_find_event, METH_VARARGS, NULL},
-	 { (char *)"s3d_delete_event", _wrap_s3d_delete_event, METH_VARARGS, NULL},
-	 { (char *)"s3d_set_callback", _wrap_s3d_set_callback, METH_VARARGS, NULL},
-	 { (char *)"s3d_clear_callback", _wrap_s3d_clear_callback, METH_VARARGS, NULL},
-	 { (char *)"s3d_ignore_callback", _wrap_s3d_ignore_callback, METH_VARARGS, NULL},
-	 { (char *)"s3d_get_callback", _wrap_s3d_get_callback, METH_VARARGS, NULL},
-	 { (char *)"s3d_process_stack", _wrap_s3d_process_stack, METH_VARARGS, NULL},
-	 { (char *)"s3d_mcp_focus", _wrap_s3d_mcp_focus, METH_VARARGS, NULL},
-	 { (char *)"s3d_net_check", _wrap_s3d_net_check, METH_VARARGS, NULL},
-	 { NULL, NULL, 0, NULL }
-};
-
-
-/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */
-
-static swig_type_info _swigt__p_s3d_key_event[] = {{"_p_s3d_key_event", 0, "s3d_key_event *", 0, 0, 0, 0},{"_p_s3d_key_event", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_mcp_object[] = {{"_p_mcp_object", 0, "mcp_object *", 0, 0, 0, 0},{"_p_mcp_object", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_uint16_t[] = {{"_p_uint16_t", 0, "uint16_t *", 0, 0, 0, 0},{"_p_uint16_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_uint32_t[] = {{"_p_uint32_t", 0, "uint32_t *", 0, 0, 0, 0},{"_p_uint32_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_s3d_obj_info[] = {{"_p_s3d_obj_info", 0, "s3d_obj_info *", 0, 0, 0, 0},{"_p_s3d_obj_info", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_s3d_evt[] = {{"_p_s3d_evt", 0, "struct s3d_evt *", 0, 0, 0, 0},{"_p_s3d_evt", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_float[] = {{"_p_float", 0, "float *", 0, 0, 0, 0},{"_p_float", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_f___void[] = {{"_p_f___void", 0, "void (*)()", 0, 0, 0, 0},{"_p_f___void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_f_p_struct_s3d_evt__int[] = {{"_p_f_p_struct_s3d_evt__int", 0, "int (*)(struct s3d_evt *)|s3d_cb", 0, 0, 0, 0},{"_p_f_p_struct_s3d_evt__int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_p_p_char[] = {{"_p_p_p_char", 0, "char ***", 0, 0, 0, 0},{"_p_p_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0, 0, 0, 0},{"_p_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_s3d_but_info[] = {{"_p_s3d_but_info", 0, "s3d_but_info *", 0, 0, 0, 0},{"_p_s3d_but_info", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_uint8_t[] = {{"_p_uint8_t", 0, "uint8_t *", 0, 0, 0, 0},{"_p_uint8_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_S3DKey[] = {{"_p_S3DKey", 0, "enum S3DKey *|S3DKey *", 0, 0, 0, 0},{"_p_S3DKey", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-static swig_type_info _swigt__p_S3DMod[] = {{"_p_S3DMod", 0, "enum S3DMod *|S3DMod *", 0, 0, 0, 0},{"_p_S3DMod", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
-
-static swig_type_info *swig_types_initial[] = {
-_swigt__p_s3d_key_event, 
-_swigt__size_t, 
-_swigt__p_mcp_object, 
-_swigt__p_uint16_t, 
-_swigt__p_uint32_t, 
-_swigt__p_s3d_obj_info, 
-_swigt__p_s3d_evt, 
-_swigt__p_float, 
-_swigt__p_f___void, 
-_swigt__p_f_p_struct_s3d_evt__int, 
-_swigt__p_p_p_char, 
-_swigt__p_char, 
-_swigt__p_p_char, 
-_swigt__ptrdiff_t, 
-_swigt__p_s3d_but_info, 
-_swigt__p_uint8_t, 
-_swigt__p_S3DKey, 
-_swigt__p_int, 
-_swigt__p_S3DMod, 
-0
-};
-
-
-/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */
-
-static swig_const_info swig_const_table[] = {
-{0, 0, 0, 0.0, 0, 0}};
-
-#ifdef __cplusplus
-}
-#endif
-
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-    
-    /* Python-specific SWIG API */
-#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
-#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
-#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
-    
-    /* -----------------------------------------------------------------------------
-     * global variable support code.
-     * ----------------------------------------------------------------------------- */
-    
-    typedef struct swig_globalvar {
-        char       *name;                  /* Name of global variable */
-        PyObject *(*get_attr)();           /* Return the current value */
-        int       (*set_attr)(PyObject *); /* Set the value */
-        struct swig_globalvar *next;
-    } swig_globalvar;
-    
-    typedef struct swig_varlinkobject {
-        PyObject_HEAD
-        swig_globalvar *vars;
-    } swig_varlinkobject;
-    
-    static PyObject *
-    swig_varlink_repr(swig_varlinkobject *v) {
-        v = v;
-        return PyString_FromString("<Swig global variables>");
-    }
-    
-    static int
-    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
-        swig_globalvar  *var;
-        flags = flags;
-        fprintf(fp,"Swig global variables { ");
-        for (var = v->vars; var; var=var->next) {
-            fprintf(fp,"%s", var->name);
-            if (var->next) fprintf(fp,", ");
-        }
-        fprintf(fp," }\n");
-        return 0;
-    }
-    
-    static PyObject *
-    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
-        swig_globalvar *var = v->vars;
-        while (var) {
-            if (strcmp(var->name,n) == 0) {
-                return (*var->get_attr)();
-            }
-            var = var->next;
-        }
-        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
-        return NULL;
-    }
-    
-    static int
-    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
-        swig_globalvar *var = v->vars;
-        while (var) {
-            if (strcmp(var->name,n) == 0) {
-                return (*var->set_attr)(p);
-            }
-            var = var->next;
-        }
-        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
-        return 1;
-    }
-    
-    static PyTypeObject varlinktype = {
-        PyObject_HEAD_INIT(0)              
-        0,                                  /* Number of items in variable part (ob_size) */
-        (char *)"swigvarlink",              /* Type name (tp_name) */
-        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
-        0,                                  /* Itemsize (tp_itemsize) */
-        0,                                  /* Deallocator (tp_dealloc) */ 
-        (printfunc) swig_varlink_print,     /* Print (tp_print) */
-        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
-        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
-        0,                                  /* tp_compare */
-        (reprfunc) swig_varlink_repr,       /* tp_repr */
-        0,                                  /* tp_as_number */
-        0,                                  /* tp_as_sequence */
-        0,                                  /* tp_as_mapping */
-        0,                                  /* tp_hash */
-        0,                                  /* tp_call */
-        0,                                  /* tp_str */
-        0,                                  /* tp_getattro */
-        0,                                  /* tp_setattro */
-        0,                                  /* tp_as_buffer */
-        0,                                  /* tp_flags */
-        0,                                  /* tp_doc */
-#if PY_VERSION_HEX >= 0x02000000
-        0,                                  /* tp_traverse */
-        0,                                  /* tp_clear */
-#endif
-#if PY_VERSION_HEX >= 0x02010000
-        0,                                  /* tp_richcompare */
-        0,                                  /* tp_weaklistoffset */
-#endif
-#if PY_VERSION_HEX >= 0x02020000
-        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
-#endif
-#if PY_VERSION_HEX >= 0x02030000
-        0,                                  /* tp_del */
-#endif
-#ifdef COUNT_ALLOCS
-        0,0,0,0                             /* tp_alloc -> tp_next */
-#endif
-    };
-    
-    /* Create a variable linking object for use later */
-    static PyObject *
-    SWIG_Python_newvarlink(void) {
-        swig_varlinkobject *result = 0;
-        result = PyMem_NEW(swig_varlinkobject,1);
-        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
-        result->ob_type = &varlinktype;
-        result->vars = 0;
-        result->ob_refcnt = 0;
-        Py_XINCREF((PyObject *) result);
-        return ((PyObject*) result);
-    }
-    
-    static void
-    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
-        swig_varlinkobject *v;
-        swig_globalvar *gv;
-        v= (swig_varlinkobject *) p;
-        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
-        gv->name = (char *) malloc(strlen(name)+1);
-        strcpy(gv->name,name);
-        gv->get_attr = get_attr;
-        gv->set_attr = set_attr;
-        gv->next = v->vars;
-        v->vars = gv;
-    }
-    
-    /* -----------------------------------------------------------------------------
-     * constants/methods manipulation
-     * ----------------------------------------------------------------------------- */
-    
-    /* Install Constants */
-    static void
-    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
-        PyObject *obj = 0;
-        size_t i;
-        for (i = 0; constants[i].type; i++) {
-            switch(constants[i].type) {
-                case SWIG_PY_INT:
-                obj = PyInt_FromLong(constants[i].lvalue);
-                break;
-                case SWIG_PY_FLOAT:
-                obj = PyFloat_FromDouble(constants[i].dvalue);
-                break;
-                case SWIG_PY_STRING:
-                if (constants[i].pvalue) {
-                    obj = PyString_FromString((char *) constants[i].pvalue);
-                } else {
-                    Py_INCREF(Py_None);
-                    obj = Py_None;
-                }
-                break;
-                case SWIG_PY_POINTER:
-                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
-                break;
-                case SWIG_PY_BINARY:
-                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
-                break;
-                default:
-                obj = 0;
-                break;
-            }
-            if (obj) {
-                PyDict_SetItemString(d,constants[i].name,obj);
-                Py_DECREF(obj);
-            }
-        }
-    }
-    
-    /* -----------------------------------------------------------------------------*/
-    /* Fix SwigMethods to carry the callback ptrs when needed */
-    /* -----------------------------------------------------------------------------*/
-    
-    static void
-    SWIG_Python_FixMethods(PyMethodDef *methods,
-    swig_const_info *const_table,
-    swig_type_info **types,
-    swig_type_info **types_initial) {
-        size_t i;
-        for (i = 0; methods[i].ml_name; ++i) {
-            char *c = methods[i].ml_doc;
-            if (c && (c = strstr(c, "swig_ptr: "))) {
-                int j;
-                swig_const_info *ci = 0;
-                char *name = c + 10;
-                for (j = 0; const_table[j].type; j++) {
-                    if (strncmp(const_table[j].name, name, 
-                    strlen(const_table[j].name)) == 0) {
-                        ci = &(const_table[j]);
-                        break;
-                    }
-                }
-                if (ci) {
-                    size_t shift = (ci->ptype) - types;
-                    swig_type_info *ty = types_initial[shift];
-                    size_t ldoc = (c - methods[i].ml_doc);
-                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
-                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
-                    char *buff = ndoc;
-                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
-                    strncpy(buff, methods[i].ml_doc, ldoc);
-                    buff += ldoc;
-                    strncpy(buff, "swig_ptr: ", 10);
-                    buff += 10;
-                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
-                    methods[i].ml_doc = ndoc;
-                }
-            }
-        }
-    }
-    
-    /* -----------------------------------------------------------------------------*
-     *  Initialize type list
-     * -----------------------------------------------------------------------------*/
-    
-#if PY_MAJOR_VERSION < 2
-    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
-    is copied out of Python/modsupport.c in python version 2.3.4 */
-    static int
-    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
-    {
-        PyObject *dict;
-        if (!PyModule_Check(m)) {
-            PyErr_SetString(PyExc_TypeError,
-            "PyModule_AddObject() needs module as first arg");
-            return -1;
-        }
-        if (!o) {
-            PyErr_SetString(PyExc_TypeError,
-            "PyModule_AddObject() needs non-NULL value");
-            return -1;
-        }
-        
-        dict = PyModule_GetDict(m);
-        if (dict == NULL) {
-            /* Internal error -- modules must have a dict! */
-            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
-            PyModule_GetName(m));
-            return -1;
-        }
-        if (PyDict_SetItemString(dict, name, o))
-        return -1;
-        Py_DECREF(o);
-        return 0;
-    }
-#endif
-    
-    static swig_type_info **
-    SWIG_Python_SetTypeListHandle(swig_type_info **type_list_handle) {
-        static PyMethodDef swig_empty_runtime_method_table[] = {
-            {
-                NULL, NULL, 0, NULL
-            } 
-        };/* Sentinel */
-        
-        PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
-        swig_empty_runtime_method_table);
-        PyObject *pointer = PyCObject_FromVoidPtr((void *) type_list_handle, NULL);
-        if (pointer && module) {
-            PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
-        }
-        return type_list_handle;
-    } 
-    
-    static swig_type_info **
-    SWIG_Python_LookupTypePointer(swig_type_info **type_list_handle) {
-        swig_type_info **type_pointer;
-        
-        /* first check if module already created */
-        type_pointer = SWIG_Python_GetTypeListHandle();
-        if (type_pointer) {
-            return type_pointer;
-        } else {
-            /* create a new module and variable */
-            return SWIG_Python_SetTypeListHandle(type_list_handle);
-        }
-    }
-    
-#ifdef __cplusplus
-}
-#endif
-
-/* -----------------------------------------------------------------------------*
- *  Partial Init method
- * -----------------------------------------------------------------------------*/
-
-#ifdef SWIG_LINK_RUNTIME
-#ifdef __cplusplus
-extern "C"
-#endif
-SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
-#endif
-
-#ifdef __cplusplus
-extern "C"
-#endif
-SWIGEXPORT(void) SWIG_init(void) {
-    static PyObject *SWIG_globals = 0; 
-    static int       typeinit = 0;
-    PyObject *m, *d;
-    int       i;
-    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
-    
-    /* Fix SwigMethods to carry the callback ptrs when needed */
-    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
-    
-    m = Py_InitModule((char *) SWIG_name, SwigMethods);
-    d = PyModule_GetDict(m);
-    
-    if (!typeinit) {
-#ifdef SWIG_LINK_RUNTIME
-        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
-#else
-#  ifndef SWIG_STATIC_RUNTIME
-        swig_type_list_handle = SWIG_Python_LookupTypePointer(swig_type_list_handle);
-#  endif
-#endif
-        for (i = 0; swig_types_initial[i]; i++) {
-            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
-        }
-        typeinit = 1;
-    }
-    SWIG_InstallConstants(d,swig_const_table);
-    
-    {
-        PyDict_SetItemString(d,"S3D_EVENT_OBJ_CLICK", SWIG_From_int((int)(1))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_EVENT_KEY", SWIG_From_int((int)(2))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_EVENT_KEYDOWN", SWIG_From_int((int)(2))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_EVENT_MBUTTON", SWIG_From_int((int)(3))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_EVENT_KEYUP", SWIG_From_int((int)(4))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_EVENT_NEW_OBJECT", SWIG_From_int((int)(16))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_EVENT_OBJ_INFO", SWIG_From_int((int)(17))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_EVENT_QUIT", SWIG_From_int((int)(255))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_MCP_OBJECT", SWIG_From_int((int)(32))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_MCP_DEL_OBJECT", SWIG_From_int((int)(33))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_PORT", SWIG_From_int((int)(6066))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_OF_VISIBLE", SWIG_From_int((int)(0x00000001))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_OF_SELECTABLE", SWIG_From_int((int)(0x00000002))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_OF_POINTABLE", SWIG_From_int((int)(0x00000004))); 
-    }
-    {
-        PyDict_SetItemString(d,"MCP_NEW_OBJECT", SWIG_From_int((int)(1))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_UNKNOWN", SWIG_From_int((int)(S3DK_UNKNOWN))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_FIRST", SWIG_From_int((int)(S3DK_FIRST))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_BACKSPACE", SWIG_From_int((int)(S3DK_BACKSPACE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_TAB", SWIG_From_int((int)(S3DK_TAB))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_CLEAR", SWIG_From_int((int)(S3DK_CLEAR))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RETURN", SWIG_From_int((int)(S3DK_RETURN))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_PAUSE", SWIG_From_int((int)(S3DK_PAUSE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_ESCAPE", SWIG_From_int((int)(S3DK_ESCAPE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_SPACE", SWIG_From_int((int)(S3DK_SPACE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_EXCLAIM", SWIG_From_int((int)(S3DK_EXCLAIM))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_QUOTEDBL", SWIG_From_int((int)(S3DK_QUOTEDBL))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_HASH", SWIG_From_int((int)(S3DK_HASH))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_DOLLAR", SWIG_From_int((int)(S3DK_DOLLAR))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_AMPERSAND", SWIG_From_int((int)(S3DK_AMPERSAND))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_QUOTE", SWIG_From_int((int)(S3DK_QUOTE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LEFTPAREN", SWIG_From_int((int)(S3DK_LEFTPAREN))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RIGHTPAREN", SWIG_From_int((int)(S3DK_RIGHTPAREN))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_ASTERISK", SWIG_From_int((int)(S3DK_ASTERISK))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_PLUS", SWIG_From_int((int)(S3DK_PLUS))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_COMMA", SWIG_From_int((int)(S3DK_COMMA))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_MINUS", SWIG_From_int((int)(S3DK_MINUS))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_PERIOD", SWIG_From_int((int)(S3DK_PERIOD))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_SLASH", SWIG_From_int((int)(S3DK_SLASH))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_0", SWIG_From_int((int)(S3DK_0))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_1", SWIG_From_int((int)(S3DK_1))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_2", SWIG_From_int((int)(S3DK_2))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_3", SWIG_From_int((int)(S3DK_3))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_4", SWIG_From_int((int)(S3DK_4))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_5", SWIG_From_int((int)(S3DK_5))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_6", SWIG_From_int((int)(S3DK_6))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_7", SWIG_From_int((int)(S3DK_7))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_8", SWIG_From_int((int)(S3DK_8))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_9", SWIG_From_int((int)(S3DK_9))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_COLON", SWIG_From_int((int)(S3DK_COLON))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_SEMICOLON", SWIG_From_int((int)(S3DK_SEMICOLON))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LESS", SWIG_From_int((int)(S3DK_LESS))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_EQUALS", SWIG_From_int((int)(S3DK_EQUALS))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_GREATER", SWIG_From_int((int)(S3DK_GREATER))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_QUESTION", SWIG_From_int((int)(S3DK_QUESTION))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_AT", SWIG_From_int((int)(S3DK_AT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LEFTBRACKET", SWIG_From_int((int)(S3DK_LEFTBRACKET))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_BACKSLASH", SWIG_From_int((int)(S3DK_BACKSLASH))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RIGHTBRACKET", SWIG_From_int((int)(S3DK_RIGHTBRACKET))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_CARET", SWIG_From_int((int)(S3DK_CARET))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_UNDERSCORE", SWIG_From_int((int)(S3DK_UNDERSCORE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_BACKQUOTE", SWIG_From_int((int)(S3DK_BACKQUOTE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_a", SWIG_From_int((int)(S3DK_a))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_b", SWIG_From_int((int)(S3DK_b))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_c", SWIG_From_int((int)(S3DK_c))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_d", SWIG_From_int((int)(S3DK_d))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_e", SWIG_From_int((int)(S3DK_e))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_f", SWIG_From_int((int)(S3DK_f))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_g", SWIG_From_int((int)(S3DK_g))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_h", SWIG_From_int((int)(S3DK_h))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_i", SWIG_From_int((int)(S3DK_i))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_j", SWIG_From_int((int)(S3DK_j))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_k", SWIG_From_int((int)(S3DK_k))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_l", SWIG_From_int((int)(S3DK_l))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_m", SWIG_From_int((int)(S3DK_m))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_n", SWIG_From_int((int)(S3DK_n))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_o", SWIG_From_int((int)(S3DK_o))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_p", SWIG_From_int((int)(S3DK_p))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_q", SWIG_From_int((int)(S3DK_q))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_r", SWIG_From_int((int)(S3DK_r))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_s", SWIG_From_int((int)(S3DK_s))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_t", SWIG_From_int((int)(S3DK_t))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_u", SWIG_From_int((int)(S3DK_u))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_v", SWIG_From_int((int)(S3DK_v))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_w", SWIG_From_int((int)(S3DK_w))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_x", SWIG_From_int((int)(S3DK_x))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_y", SWIG_From_int((int)(S3DK_y))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_z", SWIG_From_int((int)(S3DK_z))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_DELETE", SWIG_From_int((int)(S3DK_DELETE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_0", SWIG_From_int((int)(S3DK_WORLD_0))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_1", SWIG_From_int((int)(S3DK_WORLD_1))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_2", SWIG_From_int((int)(S3DK_WORLD_2))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_3", SWIG_From_int((int)(S3DK_WORLD_3))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_4", SWIG_From_int((int)(S3DK_WORLD_4))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_5", SWIG_From_int((int)(S3DK_WORLD_5))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_6", SWIG_From_int((int)(S3DK_WORLD_6))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_7", SWIG_From_int((int)(S3DK_WORLD_7))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_8", SWIG_From_int((int)(S3DK_WORLD_8))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_9", SWIG_From_int((int)(S3DK_WORLD_9))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_10", SWIG_From_int((int)(S3DK_WORLD_10))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_11", SWIG_From_int((int)(S3DK_WORLD_11))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_12", SWIG_From_int((int)(S3DK_WORLD_12))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_13", SWIG_From_int((int)(S3DK_WORLD_13))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_14", SWIG_From_int((int)(S3DK_WORLD_14))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_15", SWIG_From_int((int)(S3DK_WORLD_15))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_16", SWIG_From_int((int)(S3DK_WORLD_16))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_17", SWIG_From_int((int)(S3DK_WORLD_17))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_18", SWIG_From_int((int)(S3DK_WORLD_18))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_19", SWIG_From_int((int)(S3DK_WORLD_19))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_20", SWIG_From_int((int)(S3DK_WORLD_20))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_21", SWIG_From_int((int)(S3DK_WORLD_21))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_22", SWIG_From_int((int)(S3DK_WORLD_22))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_23", SWIG_From_int((int)(S3DK_WORLD_23))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_24", SWIG_From_int((int)(S3DK_WORLD_24))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_25", SWIG_From_int((int)(S3DK_WORLD_25))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_26", SWIG_From_int((int)(S3DK_WORLD_26))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_27", SWIG_From_int((int)(S3DK_WORLD_27))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_28", SWIG_From_int((int)(S3DK_WORLD_28))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_29", SWIG_From_int((int)(S3DK_WORLD_29))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_30", SWIG_From_int((int)(S3DK_WORLD_30))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_31", SWIG_From_int((int)(S3DK_WORLD_31))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_32", SWIG_From_int((int)(S3DK_WORLD_32))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_33", SWIG_From_int((int)(S3DK_WORLD_33))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_34", SWIG_From_int((int)(S3DK_WORLD_34))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_35", SWIG_From_int((int)(S3DK_WORLD_35))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_36", SWIG_From_int((int)(S3DK_WORLD_36))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_37", SWIG_From_int((int)(S3DK_WORLD_37))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_38", SWIG_From_int((int)(S3DK_WORLD_38))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_39", SWIG_From_int((int)(S3DK_WORLD_39))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_40", SWIG_From_int((int)(S3DK_WORLD_40))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_41", SWIG_From_int((int)(S3DK_WORLD_41))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_42", SWIG_From_int((int)(S3DK_WORLD_42))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_43", SWIG_From_int((int)(S3DK_WORLD_43))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_44", SWIG_From_int((int)(S3DK_WORLD_44))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_45", SWIG_From_int((int)(S3DK_WORLD_45))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_46", SWIG_From_int((int)(S3DK_WORLD_46))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_47", SWIG_From_int((int)(S3DK_WORLD_47))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_48", SWIG_From_int((int)(S3DK_WORLD_48))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_49", SWIG_From_int((int)(S3DK_WORLD_49))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_50", SWIG_From_int((int)(S3DK_WORLD_50))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_51", SWIG_From_int((int)(S3DK_WORLD_51))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_52", SWIG_From_int((int)(S3DK_WORLD_52))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_53", SWIG_From_int((int)(S3DK_WORLD_53))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_54", SWIG_From_int((int)(S3DK_WORLD_54))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_55", SWIG_From_int((int)(S3DK_WORLD_55))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_56", SWIG_From_int((int)(S3DK_WORLD_56))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_57", SWIG_From_int((int)(S3DK_WORLD_57))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_58", SWIG_From_int((int)(S3DK_WORLD_58))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_59", SWIG_From_int((int)(S3DK_WORLD_59))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_60", SWIG_From_int((int)(S3DK_WORLD_60))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_61", SWIG_From_int((int)(S3DK_WORLD_61))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_62", SWIG_From_int((int)(S3DK_WORLD_62))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_63", SWIG_From_int((int)(S3DK_WORLD_63))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_64", SWIG_From_int((int)(S3DK_WORLD_64))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_65", SWIG_From_int((int)(S3DK_WORLD_65))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_66", SWIG_From_int((int)(S3DK_WORLD_66))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_67", SWIG_From_int((int)(S3DK_WORLD_67))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_68", SWIG_From_int((int)(S3DK_WORLD_68))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_69", SWIG_From_int((int)(S3DK_WORLD_69))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_70", SWIG_From_int((int)(S3DK_WORLD_70))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_71", SWIG_From_int((int)(S3DK_WORLD_71))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_72", SWIG_From_int((int)(S3DK_WORLD_72))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_73", SWIG_From_int((int)(S3DK_WORLD_73))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_74", SWIG_From_int((int)(S3DK_WORLD_74))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_75", SWIG_From_int((int)(S3DK_WORLD_75))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_76", SWIG_From_int((int)(S3DK_WORLD_76))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_77", SWIG_From_int((int)(S3DK_WORLD_77))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_78", SWIG_From_int((int)(S3DK_WORLD_78))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_79", SWIG_From_int((int)(S3DK_WORLD_79))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_80", SWIG_From_int((int)(S3DK_WORLD_80))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_81", SWIG_From_int((int)(S3DK_WORLD_81))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_82", SWIG_From_int((int)(S3DK_WORLD_82))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_83", SWIG_From_int((int)(S3DK_WORLD_83))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_84", SWIG_From_int((int)(S3DK_WORLD_84))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_85", SWIG_From_int((int)(S3DK_WORLD_85))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_86", SWIG_From_int((int)(S3DK_WORLD_86))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_87", SWIG_From_int((int)(S3DK_WORLD_87))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_88", SWIG_From_int((int)(S3DK_WORLD_88))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_89", SWIG_From_int((int)(S3DK_WORLD_89))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_90", SWIG_From_int((int)(S3DK_WORLD_90))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_91", SWIG_From_int((int)(S3DK_WORLD_91))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_92", SWIG_From_int((int)(S3DK_WORLD_92))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_93", SWIG_From_int((int)(S3DK_WORLD_93))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_94", SWIG_From_int((int)(S3DK_WORLD_94))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_WORLD_95", SWIG_From_int((int)(S3DK_WORLD_95))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP0", SWIG_From_int((int)(S3DK_KP0))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP1", SWIG_From_int((int)(S3DK_KP1))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP2", SWIG_From_int((int)(S3DK_KP2))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP3", SWIG_From_int((int)(S3DK_KP3))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP4", SWIG_From_int((int)(S3DK_KP4))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP5", SWIG_From_int((int)(S3DK_KP5))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP6", SWIG_From_int((int)(S3DK_KP6))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP7", SWIG_From_int((int)(S3DK_KP7))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP8", SWIG_From_int((int)(S3DK_KP8))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP9", SWIG_From_int((int)(S3DK_KP9))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP_PERIOD", SWIG_From_int((int)(S3DK_KP_PERIOD))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP_DIVIDE", SWIG_From_int((int)(S3DK_KP_DIVIDE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP_MULTIPLY", SWIG_From_int((int)(S3DK_KP_MULTIPLY))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP_MINUS", SWIG_From_int((int)(S3DK_KP_MINUS))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP_PLUS", SWIG_From_int((int)(S3DK_KP_PLUS))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP_ENTER", SWIG_From_int((int)(S3DK_KP_ENTER))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_KP_EQUALS", SWIG_From_int((int)(S3DK_KP_EQUALS))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_UP", SWIG_From_int((int)(S3DK_UP))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_DOWN", SWIG_From_int((int)(S3DK_DOWN))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RIGHT", SWIG_From_int((int)(S3DK_RIGHT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LEFT", SWIG_From_int((int)(S3DK_LEFT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_INSERT", SWIG_From_int((int)(S3DK_INSERT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_HOME", SWIG_From_int((int)(S3DK_HOME))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_END", SWIG_From_int((int)(S3DK_END))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_PAGEUP", SWIG_From_int((int)(S3DK_PAGEUP))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_PAGEDOWN", SWIG_From_int((int)(S3DK_PAGEDOWN))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F1", SWIG_From_int((int)(S3DK_F1))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F2", SWIG_From_int((int)(S3DK_F2))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F3", SWIG_From_int((int)(S3DK_F3))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F4", SWIG_From_int((int)(S3DK_F4))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F5", SWIG_From_int((int)(S3DK_F5))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F6", SWIG_From_int((int)(S3DK_F6))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F7", SWIG_From_int((int)(S3DK_F7))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F8", SWIG_From_int((int)(S3DK_F8))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F9", SWIG_From_int((int)(S3DK_F9))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F10", SWIG_From_int((int)(S3DK_F10))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F11", SWIG_From_int((int)(S3DK_F11))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F12", SWIG_From_int((int)(S3DK_F12))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F13", SWIG_From_int((int)(S3DK_F13))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F14", SWIG_From_int((int)(S3DK_F14))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_F15", SWIG_From_int((int)(S3DK_F15))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_NUMLOCK", SWIG_From_int((int)(S3DK_NUMLOCK))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_CAPSLOCK", SWIG_From_int((int)(S3DK_CAPSLOCK))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_SCROLLOCK", SWIG_From_int((int)(S3DK_SCROLLOCK))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RSHIFT", SWIG_From_int((int)(S3DK_RSHIFT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LSHIFT", SWIG_From_int((int)(S3DK_LSHIFT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RCTRL", SWIG_From_int((int)(S3DK_RCTRL))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LCTRL", SWIG_From_int((int)(S3DK_LCTRL))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RALT", SWIG_From_int((int)(S3DK_RALT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LALT", SWIG_From_int((int)(S3DK_LALT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RMETA", SWIG_From_int((int)(S3DK_RMETA))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LMETA", SWIG_From_int((int)(S3DK_LMETA))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LSUPER", SWIG_From_int((int)(S3DK_LSUPER))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_RSUPER", SWIG_From_int((int)(S3DK_RSUPER))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_MODE", SWIG_From_int((int)(S3DK_MODE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_COMPOSE", SWIG_From_int((int)(S3DK_COMPOSE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_HELP", SWIG_From_int((int)(S3DK_HELP))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_PRINT", SWIG_From_int((int)(S3DK_PRINT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_SYSREQ", SWIG_From_int((int)(S3DK_SYSREQ))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_BREAK", SWIG_From_int((int)(S3DK_BREAK))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_MENU", SWIG_From_int((int)(S3DK_MENU))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_POWER", SWIG_From_int((int)(S3DK_POWER))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_EURO", SWIG_From_int((int)(S3DK_EURO))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_UNDO", SWIG_From_int((int)(S3DK_UNDO))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3DK_LAST", SWIG_From_int((int)(S3DK_LAST))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_NONE", SWIG_From_int((int)(S3D_KMOD_NONE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_LSHIFT", SWIG_From_int((int)(S3D_KMOD_LSHIFT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_RSHIFT", SWIG_From_int((int)(S3D_KMOD_RSHIFT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_LCTRL", SWIG_From_int((int)(S3D_KMOD_LCTRL))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_RCTRL", SWIG_From_int((int)(S3D_KMOD_RCTRL))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_LALT", SWIG_From_int((int)(S3D_KMOD_LALT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_RALT", SWIG_From_int((int)(S3D_KMOD_RALT))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_LMETA", SWIG_From_int((int)(S3D_KMOD_LMETA))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_RMETA", SWIG_From_int((int)(S3D_KMOD_RMETA))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_NUM", SWIG_From_int((int)(S3D_KMOD_NUM))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_CAPS", SWIG_From_int((int)(S3D_KMOD_CAPS))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_MODE", SWIG_From_int((int)(S3D_KMOD_MODE))); 
-    }
-    {
-        PyDict_SetItemString(d,"S3D_KMOD_RESERVED", SWIG_From_int((int)(S3D_KMOD_RESERVED))); 
-    }
-}
-



From dotslash at mail.berlios.de  Thu Oct 19 19:17:00 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Thu, 19 Oct 2006 19:17:00 +0200
Subject: [S3d-svn] r449 - in trunk: . libs3d
Message-ID: <200610191717.k9JHH0H2013569@sheep.berlios.de>

Author: dotslash
Date: 2006-10-19 19:17:00 +0200 (Thu, 19 Oct 2006)
New Revision: 449

Modified:
   trunk/
   trunk/libs3d/io.c
Log:
 r1090 at kero:  dotslash | 2006-10-19 19:16:40 +0200
 - allow to give NULL to argc/argv in libs3d



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1088
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1090

Modified: trunk/libs3d/io.c
===================================================================
--- trunk/libs3d/io.c	2006-10-19 16:36:20 UTC (rev 448)
+++ trunk/libs3d/io.c	2006-10-19 17:17:00 UTC (rev 449)
@@ -73,6 +73,7 @@
 		{"s3d-help",0,0,'h'},
 		{0,0,0,0}
 	};
+	if ((argc==NULL) || (argv==NULL)) return(0); /* nothing to parse */
 	while (-1!=(c=getopt_long(*argc,*argv,"?h",long_options,&lopt_idx)))
 	{
 		switch (c)



From dotslash at mail.berlios.de  Thu Oct 19 20:01:48 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Thu, 19 Oct 2006 20:01:48 +0200
Subject: [S3d-svn] r450 - in trunk: . swig
Message-ID: <200610191801.k9JI1mIx018747@sheep.berlios.de>

Author: dotslash
Date: 2006-10-19 20:01:48 +0200 (Thu, 19 Oct 2006)
New Revision: 450

Added:
   trunk/swig/s3d_test.py
Modified:
   trunk/
   trunk/swig/Makefile
   trunk/swig/s3d.i
Log:
 r1092 at kero:  dotslash | 2006-10-19 20:01:25 +0200
 - works somehow. I don't know how to get c-callbacks into python, but some basic functionality is here ...



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1090
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1092

Modified: trunk/swig/Makefile
===================================================================
--- trunk/swig/Makefile	2006-10-19 17:17:00 UTC (rev 449)
+++ trunk/swig/Makefile	2006-10-19 18:01:48 UTC (rev 450)
@@ -8,4 +8,4 @@
 	 gcc -fPIC -c s3d_wrap.c -I/usr/include/python2.3/
 	 gcc -shared s3d_wrap.o -ls3d -o $(PYTHON_MOD)
 clean:
-	rm -f $(MODS) *.o *.py s3d_wrap.c
+	rm -f $(MODS) *.o s3d_wrap.c s3d.py s3d.pyc

Modified: trunk/swig/s3d.i
===================================================================
--- trunk/swig/s3d.i	2006-10-19 17:17:00 UTC (rev 449)
+++ trunk/swig/s3d.i	2006-10-19 18:01:48 UTC (rev 450)
@@ -1,4 +1,15 @@
 %module s3d
+typedef unsigned int uint32_t;
+%inline %{
+int s3dpy_init(char *name)
+{
+	return s3d_init(NULL,NULL,name);
+}
+int s3dpy_draw_string(char *str)
+{
+	return s3d_draw_string(str,NULL);
+}
+%}
 %{
 #include <s3d.h>
 #include <s3d_keysym.h>

Added: trunk/swig/s3d_test.py
===================================================================
--- trunk/swig/s3d_test.py	2006-10-19 17:17:00 UTC (rev 449)
+++ trunk/swig/s3d_test.py	2006-10-19 18:01:48 UTC (rev 450)
@@ -0,0 +1,9 @@
+#!/usr/bin/python
+from s3d import *
+from time import sleep
+if 0 == s3dpy_init("hello world"):
+	s3d_select_font("vera")
+	o = s3dpy_draw_string("hello from python")
+	s3d_flags_on(o, S3D_OF_VISIBLE)
+	sleep(10)
+	s3d_quit()


Property changes on: trunk/swig/s3d_test.py
___________________________________________________________________
Name: svn:mime-type
   + text/script



From dotslash at mail.berlios.de  Thu Oct 19 20:27:59 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Thu, 19 Oct 2006 20:27:59 +0200
Subject: [S3d-svn] r451 - in trunk: . swig
Message-ID: <200610191827.k9JIRxi3021029@sheep.berlios.de>

Author: dotslash
Date: 2006-10-19 20:27:59 +0200 (Thu, 19 Oct 2006)
New Revision: 451

Added:
   trunk/swig/s3d_test.pl
Modified:
   trunk/
   trunk/swig/Makefile
Log:
 r1094 at kero:  dotslash | 2006-10-19 20:27:34 +0200
 - because it's so funny: here is the perl binding (of course incomplete, no callbacks etc)



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1092
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1094

Modified: trunk/swig/Makefile
===================================================================
--- trunk/swig/Makefile	2006-10-19 18:01:48 UTC (rev 450)
+++ trunk/swig/Makefile	2006-10-19 18:27:59 UTC (rev 451)
@@ -1,5 +1,6 @@
 PYTHON_MOD=_s3d.so
-MODS=$(PYTHON_MOD)
+PERL_MOD=s3d.so
+MODS=$(PYTHON_MOD) $(PERL_MOD)
 
 default:	all
 all:		$(MODS)
@@ -7,5 +8,9 @@
 	 swig -python s3d.i
 	 gcc -fPIC -c s3d_wrap.c -I/usr/include/python2.3/
 	 gcc -shared s3d_wrap.o -ls3d -o $(PYTHON_MOD)
+$(PERL_MOD):	s3d.i
+	swig -perl5 s3d.i
+	gcc -fPIC -c s3d_wrap.c  `perl -MExtUtils::Embed -e ccopts`
+	ld -G  s3d_wrap.o -lperl -ls3d -o $(PERL_MOD)
 clean:
 	rm -f $(MODS) *.o s3d_wrap.c s3d.py s3d.pyc

Added: trunk/swig/s3d_test.pl
===================================================================
--- trunk/swig/s3d_test.pl	2006-10-19 18:01:48 UTC (rev 450)
+++ trunk/swig/s3d_test.pl	2006-10-19 18:27:59 UTC (rev 451)
@@ -0,0 +1,12 @@
+use s3d;
+if (0==s3d::s3dpy_init("hello perl"))
+{
+	s3d::s3d_select_font("vera");
+	$o= s3d::s3dpy_draw_string("hello from perl");
+	print("object $o\n");
+	s3d::s3d_flags_on($o,$s3d::S3D_OF_VISIBLE);
+	sleep(10);
+	s3d::s3d_quit();
+	
+	
+}



From dotslash at mail.berlios.de  Thu Oct 19 20:31:38 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Thu, 19 Oct 2006 20:31:38 +0200
Subject: [S3d-svn] r452 - in trunk: . swig
Message-ID: <200610191831.k9JIVceD021487@sheep.berlios.de>

Author: dotslash
Date: 2006-10-19 20:31:38 +0200 (Thu, 19 Oct 2006)
New Revision: 452

Added:
   trunk/swig/TODO
Modified:
   trunk/
Log:
 r1096 at kero:  dotslash | 2006-10-19 20:31:13 +0200
 - swig TODO



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1094
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1096

Added: trunk/swig/TODO
===================================================================
--- trunk/swig/TODO	2006-10-19 18:27:59 UTC (rev 451)
+++ trunk/swig/TODO	2006-10-19 18:31:38 UTC (rev 452)
@@ -0,0 +1,2 @@
+- do something[tm] about the callbacks and structs
+- build some wrappers, remove s3d_ wrappers, we have proper namespaces in python/perl



From dotslash at mail.berlios.de  Mon Oct 23 16:17:49 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Mon, 23 Oct 2006 16:17:49 +0200
Subject: [S3d-svn] r453 - in trunk: example libs3d swig
Message-ID: <200610231417.k9NEHnlf031177@sheep.berlios.de>

Author: dotslash
Date: 2006-10-23 16:17:48 +0200 (Mon, 23 Oct 2006)
New Revision: 453

Modified:
   trunk/example/modelloader.c
   trunk/libs3d/modelread.c
   trunk/swig/Makefile
   trunk/swig/s3d.i
Log:
- more binding stuff for swig and minor things

Modified: trunk/example/modelloader.c
===================================================================
--- trunk/example/modelloader.c	2006-10-19 18:31:38 UTC (rev 452)
+++ trunk/example/modelloader.c	2006-10-23 14:17:48 UTC (rev 453)
@@ -32,7 +32,7 @@
 void mainloop()
 {
 	s3d_rotate(oid,0,i,0);
-	i++;
+	i=(i+1)%360;
 	nanosleep(&t,NULL); 
 }
 int object_click(struct s3d_evt *evt)
@@ -51,6 +51,7 @@
 	if (!s3d_init(&argc,&argv,"modelloader"))	
 	{
 		s3d_set_callback(S3D_EVENT_OBJ_CLICK,object_click);
+		i=0;
 	    if (-1!=(oid=s3d_import_model_file(argv[1])))
 		{
 		    s3d_flags_on(oid,S3D_OF_VISIBLE|S3D_OF_SELECTABLE);

Modified: trunk/libs3d/modelread.c
===================================================================
--- trunk/libs3d/modelread.c	2006-10-19 18:31:38 UTC (rev 452)
+++ trunk/libs3d/modelread.c	2006-10-23 14:17:48 UTC (rev 453)
@@ -126,7 +126,7 @@
 	G3DFace 				*face;
 	GSList 					*oitem, *oface;
 	struct material2texture *mat2tex;
-	int						 i, j, k, material_count, texture_count, voff,obj_id;
+	int						 j, k, material_count, texture_count, voff,obj_id;
 #define 					PMAX	100
 	uint32_t 			 polybuf[PMAX * 4],npoly,oldflags;
 	float					 normalbuf[PMAX * 9],texcoordbuf[PMAX * 6];

Modified: trunk/swig/Makefile
===================================================================
--- trunk/swig/Makefile	2006-10-19 18:31:38 UTC (rev 452)
+++ trunk/swig/Makefile	2006-10-23 14:17:48 UTC (rev 453)
@@ -4,6 +4,8 @@
 
 default:	all
 all:		$(MODS)
+python:		$(PYTHON_MOD)
+perl:		$(PERL_MOD)
 $(PYTHON_MOD):	s3d.i
 	 swig -python s3d.i
 	 gcc -fPIC -c s3d_wrap.c -I/usr/include/python2.3/

Modified: trunk/swig/s3d.i
===================================================================
--- trunk/swig/s3d.i	2006-10-19 18:31:38 UTC (rev 452)
+++ trunk/swig/s3d.i	2006-10-23 14:17:48 UTC (rev 453)
@@ -1,6 +1,7 @@
 %module s3d
 typedef unsigned int uint32_t;
 %inline %{
+#include <stdint.h>
 int s3dpy_init(char *name)
 {
 	return s3d_init(NULL,NULL,name);



From dotslash at mail.berlios.de  Mon Oct 23 18:05:54 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Mon, 23 Oct 2006 18:05:54 +0200
Subject: [S3d-svn] r454 - in trunk: . swig
Message-ID: <200610231605.k9NG5sf3014496@sheep.berlios.de>

Author: dotslash
Date: 2006-10-23 18:05:53 +0200 (Mon, 23 Oct 2006)
New Revision: 454

Modified:
   trunk/
   trunk/swig/Makefile
Log:
 r1100 at kero:  dotslash | 2006-10-23 16:56:46 +0200
 - also clean .pm



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1096
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1100

Modified: trunk/swig/Makefile
===================================================================
--- trunk/swig/Makefile	2006-10-23 14:17:48 UTC (rev 453)
+++ trunk/swig/Makefile	2006-10-23 16:05:53 UTC (rev 454)
@@ -15,4 +15,4 @@
 	gcc -fPIC -c s3d_wrap.c  `perl -MExtUtils::Embed -e ccopts`
 	ld -G  s3d_wrap.o -lperl -ls3d -o $(PERL_MOD)
 clean:
-	rm -f $(MODS) *.o s3d_wrap.c s3d.py s3d.pyc
+	rm -f $(MODS) *.o s3d_wrap.c s3d.py s3d.pyc s3d.pm



From dotslash at mail.berlios.de  Mon Oct 23 18:05:56 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Mon, 23 Oct 2006 18:05:56 +0200
Subject: [S3d-svn] r455 - in trunk: . apps/dot_mcp
Message-ID: <200610231605.k9NG5utj014564@sheep.berlios.de>

Author: dotslash
Date: 2006-10-23 18:05:56 +0200 (Mon, 23 Oct 2006)
New Revision: 455

Modified:
   trunk/
   trunk/apps/dot_mcp/main.c
Log:
 r1101 at kero:  dotslash | 2006-10-23 18:05:37 +0200
 - fix some normals in mcp



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1100
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1101

Modified: trunk/apps/dot_mcp/main.c
===================================================================
--- trunk/apps/dot_mcp/main.c	2006-10-23 16:05:53 UTC (rev 454)
+++ trunk/apps/dot_mcp/main.c	2006-10-23 16:05:56 UTC (rev 455)
@@ -115,8 +115,8 @@
 			n[j*12 +6] =R*r*cos(ja)*    cos(ia) + r*r*cos(ja)* cos(ia)*cos(ia);
 			n[j*12 +7] =R*r*sin(ja)*    cos(ia) + r*r*sin(ja)* cos(ia)*cos(ia);
 			n[j*12 +8] =R*r*sin(ia) 			+ r*r*sin(ia)* cos(ia);
-			n[j*12 +9] =R*r*cos(ja)*    cos(iap)+ r*r*cos(ja)* cos(ia)*cos(iap);
-			n[j*12 +10]=R*r*sin(ja)*    cos(iap)+ r*r*sin(ja)* cos(ia)*cos(iap);
+			n[j*12 +9] =R*r*cos(ja)*    cos(iap)+ r*r*cos(ja)* cos(iap)*cos(iap);
+			n[j*12 +10]=R*r*sin(ja)*    cos(iap)+ r*r*sin(ja)* cos(iap)*cos(iap);
 			n[j*12 +11]=R*r*sin(iap) 			+ r*r*sin(iap)*cos(iap);
 		}
 		s3d_push_vertices(o,&v[i*SIDES*3],SIDES);



From dotslash at mail.berlios.de  Thu Oct 26 16:32:53 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Thu, 26 Oct 2006 16:32:53 +0200
Subject: [S3d-svn] r456 - in trunk: . extras extras/distro
	extras/distro/gentoo extras/distro/gentoo/media-gfx
	extras/distro/gentoo/media-gfx/s3d
	extras/distro/gentoo/media-gfx/s3d/files
	extras/distro/gentoo/media-gfx/s3d-svn
	extras/distro/gentoo/media-gfx/s3d-svn/files extras/mplayer
	extras/swig
Message-ID: <200610261432.k9QEWrex031981@sheep.berlios.de>

Author: dotslash
Date: 2006-10-26 16:32:52 +0200 (Thu, 26 Oct 2006)
New Revision: 456

Added:
   trunk/extras/distro/
   trunk/extras/distro/gentoo/
   trunk/extras/distro/gentoo/media-gfx/
   trunk/extras/distro/gentoo/media-gfx/s3d-svn/
   trunk/extras/distro/gentoo/media-gfx/s3d-svn/ChangeLog
   trunk/extras/distro/gentoo/media-gfx/s3d-svn/Manifest
   trunk/extras/distro/gentoo/media-gfx/s3d-svn/files/
   trunk/extras/distro/gentoo/media-gfx/s3d-svn/files/digest-s3d-svn-9999
   trunk/extras/distro/gentoo/media-gfx/s3d-svn/metadata.xml
   trunk/extras/distro/gentoo/media-gfx/s3d-svn/s3d-svn-9999.ebuild
   trunk/extras/distro/gentoo/media-gfx/s3d/
   trunk/extras/distro/gentoo/media-gfx/s3d/ChangeLog
   trunk/extras/distro/gentoo/media-gfx/s3d/Manifest
   trunk/extras/distro/gentoo/media-gfx/s3d/files/
   trunk/extras/distro/gentoo/media-gfx/s3d/files/digest-s3d-0.1.1
   trunk/extras/distro/gentoo/media-gfx/s3d/metadata.xml
   trunk/extras/distro/gentoo/media-gfx/s3d/s3d-0.1.1.ebuild
   trunk/extras/mplayer/
   trunk/extras/mplayer/README
   trunk/extras/mplayer/mplayer.1.0pre7try2.s3d.patch
   trunk/extras/swig/
   trunk/extras/swig/Makefile
   trunk/extras/swig/TODO
   trunk/extras/swig/s3d.i
   trunk/extras/swig/s3d_test.pl
   trunk/extras/swig/s3d_test.py
Removed:
   trunk/extras/README
   trunk/extras/mplayer.1.0pre7try2.s3d.patch
   trunk/swig/
Modified:
   trunk/
Log:
 r1104 at kero:  dotslash | 2006-10-26 16:31:17 +0200
 - adding svens gentoo ebuilds (thank you!!)
 - moving things around (put additional stuff into "extras")



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1101
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1104

Deleted: trunk/extras/README
===================================================================
--- trunk/extras/README	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/README	2006-10-26 14:32:52 UTC (rev 456)
@@ -1,13 +0,0 @@
-INSTALL
--------
-1. install the client library (or the whole s3d package)
-2. go into your mplayer-source directory
-3. use
-   $ patch -p1 < /path/to/mplayer.1.0pre7try2.s3d.patch
-   to patch the source
-4. do ./configure
-   In the summary, you should see "s3d" in the 
-   "Enabled optional drivers", "Video Output"
-5. install mplayer and watch videos like this:
-   mplayer -vo s3d movie.mpg
-6. enjoy ;)

Added: trunk/extras/distro/gentoo/media-gfx/s3d/ChangeLog
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d/ChangeLog	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d/ChangeLog	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,7 @@
+# ChangeLog for media-gfx/s3d
+
+*s3d-0.1.1 (25 Oct 2006)
+
+  25 Oct 2006; Sven Eckelmann <sven.eckelmann at gmx.de> s3d-0.1.1.ebuild:
+  Initial import.
+

Added: trunk/extras/distro/gentoo/media-gfx/s3d/Manifest
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d/Manifest	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d/Manifest	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,16 @@
+DIST s3d-0.1.1.tar.bz2 1737935 RMD160 88189600659dd4d184be044dd668597ab2b17334 SHA1 3765171848d519784a436468ac613c9bfe85c3ae SHA256 1e2be7c806deaaf07e7f00d018f6f08723a1b26332419a80e732c8b7a1a515e4
+EBUILD s3d-0.1.1.ebuild 779 RMD160 1139e842ece34fa21a6ec1bab8d46ec78f78f0d7 SHA1 849426853a809fb99af0b8d3993614ad1017f4ad SHA256 673bf5f1f0c2d03bb5da9483284b00d6038fe59fdf3dcf6289f4aac51f449937
+MD5 a0b3edd9261aac5e7fe1acedb51e3b37 s3d-0.1.1.ebuild 779
+RMD160 1139e842ece34fa21a6ec1bab8d46ec78f78f0d7 s3d-0.1.1.ebuild 779
+SHA256 673bf5f1f0c2d03bb5da9483284b00d6038fe59fdf3dcf6289f4aac51f449937 s3d-0.1.1.ebuild 779
+MISC ChangeLog 148 RMD160 cb8db163c4842d0f8d8d4ad41ba7516765f1b0a3 SHA1 70661ac4033b04c51f6928f82d9903bfa86eb0b3 SHA256 e61b9d97b0c64076e833b27201c5eda91b02f5d885a37b5f4d005c03a44c405c
+MD5 31944463e2ea8d52f7172c7b838927be ChangeLog 148
+RMD160 cb8db163c4842d0f8d8d4ad41ba7516765f1b0a3 ChangeLog 148
+SHA256 e61b9d97b0c64076e833b27201c5eda91b02f5d885a37b5f4d005c03a44c405c ChangeLog 148
+MISC metadata.xml 239 RMD160 236f28d8249f562b764e2d854580d8301b150418 SHA1 76f167e3abff81e9535c16a637fd1e7f91d4fda3 SHA256 c0f08f1f0c1ce07df414cd87bf028a15cae639c89b2d636714d50d8aa77c370f
+MD5 261031c8b7aca6f50babf7e44b35deb1 metadata.xml 239
+RMD160 236f28d8249f562b764e2d854580d8301b150418 metadata.xml 239
+SHA256 c0f08f1f0c1ce07df414cd87bf028a15cae639c89b2d636714d50d8aa77c370f metadata.xml 239
+MD5 423924e2e8645a03c8a35c37406b0700 files/digest-s3d-0.1.1 235
+RMD160 5fae00369c6a80caa87cabd4836537d213a68e0f files/digest-s3d-0.1.1 235
+SHA256 26e3661db664bbb79e6f5bb1b18e01f558f9ee4fe21e842351dc22629b0567a4 files/digest-s3d-0.1.1 235

Added: trunk/extras/distro/gentoo/media-gfx/s3d/files/digest-s3d-0.1.1
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d/files/digest-s3d-0.1.1	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d/files/digest-s3d-0.1.1	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,3 @@
+MD5 5105ff41059f57394b7a9346ff64f277 s3d-0.1.1.tar.bz2 1737935
+RMD160 88189600659dd4d184be044dd668597ab2b17334 s3d-0.1.1.tar.bz2 1737935
+SHA256 1e2be7c806deaaf07e7f00d018f6f08723a1b26332419a80e732c8b7a1a515e4 s3d-0.1.1.tar.bz2 1737935

Added: trunk/extras/distro/gentoo/media-gfx/s3d/metadata.xml
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d/metadata.xml	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d/metadata.xml	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
+<pkgmetadata>
+  <herd>d0tslash</herd>
+    <maintainer>
+    <email>dotslash at packetmixer.de</email>
+  </maintainer>
+</pkgmetadata>

Added: trunk/extras/distro/gentoo/media-gfx/s3d/s3d-0.1.1.ebuild
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d/s3d-0.1.1.ebuild	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d/s3d-0.1.1.ebuild	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,49 @@
+IUSE=""
+
+SRC_URI="http://download.berlios.de/${PN}/${P}.tar.bz2"
+
+DESCRIPTION="a 3d network display server"
+HOMEPAGE="http://s3d.berlios.de/"
+
+LICENSE="GPL-2 LGPL"
+KEYWORDS="x86"
+SLOT="0"
+
+DEPEND="${RDEPEND}
+	>=sys-devel/autoconf-2.59
+	>=sys-devel/automake-1.9
+	sys-devel/flex
+	>=sys-devel/libtool-1.5
+	"
+RDEPEND="!media-gfx/s3d-svn
+	>=media-libs/libsdl-1.2.7
+	>=media-libs/freetype-2
+	>=dev-libs/glib-2
+	media-libs/fontconfig
+	media-libs/mesa
+
+	|| ( 	(
+			sys-libs/zlib
+			x11-libs/libX11
+			x11-libs/libXext
+			x11-libs/libXi
+			x11-libs/libXmu
+			x11-libs/libXt
+			x11-libs/libXtst )
+		virtual/x11 )
+
+	virtual/glut
+	"
+
+src_compile() {
+	econf \
+		--prefix=/usr/ \
+		|| die "econf failed"
+
+	emake || die "emake failed"
+}
+
+src_install() {
+	emake DESTDIR="${D}" install || die
+}
+

Added: trunk/extras/distro/gentoo/media-gfx/s3d-svn/ChangeLog
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d-svn/ChangeLog	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d-svn/ChangeLog	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,7 @@
+# ChangeLog for media-gfx/s3d-svn
+
+*s3d-svn-9999 (25 Oct 2006)
+
+  25 Oct 2006; Sven Eckelmann <sven.eckelmann at gmx.de> s3d-svn-9999.ebuild:
+  Initial import.
+

Added: trunk/extras/distro/gentoo/media-gfx/s3d-svn/Manifest
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d-svn/Manifest	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d-svn/Manifest	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,15 @@
+EBUILD s3d-svn-9999.ebuild 854 RMD160 71332ca7afce19258d03d30369f6fd40768f80bc SHA1 c18620febb279103d2e69dc4b5bfb99b8fca33d4 SHA256 bb3f63536f9266a033c880e4f00ef881e23928b89f7af8932f75607b5ee0286c
+MD5 5d86860506b4fd6edd49cafd70af217f s3d-svn-9999.ebuild 854
+RMD160 71332ca7afce19258d03d30369f6fd40768f80bc s3d-svn-9999.ebuild 854
+SHA256 bb3f63536f9266a033c880e4f00ef881e23928b89f7af8932f75607b5ee0286c s3d-svn-9999.ebuild 854
+MISC ChangeLog 158 RMD160 e817888af84d9f7ae286bbf1f23ada86c95e97f8 SHA1 df2ceb7d586962142785b91bdf915b4e7c02e04a SHA256 27a1ef992b0259bd3b203fb70e6c8e57f2cdeb39af98343069a2d1a0798eff17
+MD5 39106091ba185d909931a2d120f05db4 ChangeLog 158
+RMD160 e817888af84d9f7ae286bbf1f23ada86c95e97f8 ChangeLog 158
+SHA256 27a1ef992b0259bd3b203fb70e6c8e57f2cdeb39af98343069a2d1a0798eff17 ChangeLog 158
+MISC metadata.xml 239 RMD160 236f28d8249f562b764e2d854580d8301b150418 SHA1 76f167e3abff81e9535c16a637fd1e7f91d4fda3 SHA256 c0f08f1f0c1ce07df414cd87bf028a15cae639c89b2d636714d50d8aa77c370f
+MD5 261031c8b7aca6f50babf7e44b35deb1 metadata.xml 239
+RMD160 236f28d8249f562b764e2d854580d8301b150418 metadata.xml 239
+SHA256 c0f08f1f0c1ce07df414cd87bf028a15cae639c89b2d636714d50d8aa77c370f metadata.xml 239
+MD5 d41d8cd98f00b204e9800998ecf8427e files/digest-s3d-svn-9999 0
+RMD160 9c1185a5c5e9fc54612808977ee8f548b2258d31 files/digest-s3d-svn-9999 0
+SHA256 e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 files/digest-s3d-svn-9999 0

Added: trunk/extras/distro/gentoo/media-gfx/s3d-svn/files/digest-s3d-svn-9999
===================================================================

Added: trunk/extras/distro/gentoo/media-gfx/s3d-svn/metadata.xml
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d-svn/metadata.xml	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d-svn/metadata.xml	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
+<pkgmetadata>
+  <herd>d0tslash</herd>
+    <maintainer>
+    <email>dotslash at packetmixer.de</email>
+  </maintainer>
+</pkgmetadata>

Added: trunk/extras/distro/gentoo/media-gfx/s3d-svn/s3d-svn-9999.ebuild
===================================================================
--- trunk/extras/distro/gentoo/media-gfx/s3d-svn/s3d-svn-9999.ebuild	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/distro/gentoo/media-gfx/s3d-svn/s3d-svn-9999.ebuild	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,52 @@
+inherit subversion
+
+IUSE=""
+
+ESVN_REPO_URI="http://svn.berlios.de/svnroot/repos/s3d/trunk"
+ESVN_BOOTSTRAP="./autogen.sh --no-configure"
+
+DESCRIPTION="a 3d network display server"
+HOMEPAGE="http://s3d.berlios.de/"
+
+LICENSE="GPL-2 LGPL"
+KEYWORDS="~x86 ~amd64"
+SLOT="0"
+
+DEPEND="${RDEPEND}
+	>=sys-devel/autoconf-2.59
+	>=sys-devel/automake-1.9
+	sys-devel/flex
+	>=sys-devel/libtool-1.5
+	"
+RDEPEND="!media-gfx/s3d
+	>=media-libs/libsdl-1.2.7
+	>=media-libs/freetype-2
+	>=dev-libs/glib-2
+	media-libs/fontconfig
+	media-libs/mesa
+
+	|| ( 	(
+			sys-libs/zlib
+			x11-libs/libX11
+			x11-libs/libXext
+			x11-libs/libXi
+			x11-libs/libXmu
+			x11-libs/libXt
+			x11-libs/libXtst )
+		virtual/x11 )
+
+	virtual/glut
+	"
+
+src_compile() {
+	econf \
+		--prefix=/usr/ \
+		|| die "econf failed"
+
+	emake || die "emake failed"
+}
+
+src_install() {
+	emake DESTDIR="${D}" install || die
+}
+

Added: trunk/extras/mplayer/README
===================================================================
--- trunk/extras/mplayer/README	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/mplayer/README	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,13 @@
+INSTALL
+-------
+1. install the client library (or the whole s3d package)
+2. go into your mplayer-source directory
+3. use
+   $ patch -p1 < /path/to/mplayer.1.0pre7try2.s3d.patch
+   to patch the source
+4. do ./configure
+   In the summary, you should see "s3d" in the 
+   "Enabled optional drivers", "Video Output"
+5. install mplayer and watch videos like this:
+   mplayer -vo s3d movie.mpg
+6. enjoy ;)

Added: trunk/extras/mplayer/mplayer.1.0pre7try2.s3d.patch
===================================================================
--- trunk/extras/mplayer/mplayer.1.0pre7try2.s3d.patch	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/mplayer/mplayer.1.0pre7try2.s3d.patch	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,371 @@
+diff -Naur MPlayer-1.0pre7try2/configure MPlayer-1.0pre7try2.s3d/configure
+--- MPlayer-1.0pre7try2/configure	2005-04-13 13:46:35.000000000 +0200
++++ MPlayer-1.0pre7try2.s3d/configure	2006-06-10 18:37:34.000000000 +0200
+@@ -234,6 +234,7 @@
+   --disable-vidix        disable VIDIX [enable on x86 *nix]
+   --enable-gl            build with OpenGL render support [autodetect]
+   --enable-dga[=n]       build with DGA [n in {1, 2} ] support [autodetect]
++  --enable-s3d           build with s3d support [autodetect]
+   --enable-vesa          build with VESA support [autodetect]
+   --enable-svga          build with SVGAlib support [autodetect]
+   --enable-sdl           build with SDL render support [autodetect]
+@@ -1288,6 +1289,7 @@
+ _mencoder=yes
+ _x11=auto
+ _dga=auto	# 1 2 no auto
++_s3d=auto
+ _xv=auto
+ _xvmc=no  #auto when complete
+ _sdl=auto
+@@ -1444,6 +1446,8 @@
+   --disable-xvmc)       _xvmc=no        ;;
+   --enable-sdl)		_sdl=yes	;;
+   --disable-sdl)	_sdl=no		;;
++  --enable-s3d)		_s3d=yes	;;
++  --disable-s3d)	_s3d=no		;;
+   --enable-directx)     _directx=yes    ;;
+   --disable-directx)    _directx=no     ;;
+   --enable-win32waveout)  _win32waveout=yes ;;
+@@ -3798,6 +3802,27 @@
+ fi
+ echores "$_aa"
+ 
++echocheck "s3d"
++if test "$_s3d" = auto ; then
++  cat > $TMPC << EOF
++#include <s3d.h>
++int main(int argc, char **argv) { s3d_init( &argc, &argv, "mplayer_test"); s3d_quit(); return 0; }
++EOF
++  _s3d=no
++  cc_check -ls3d && _s3d=yes
++fi
++if test "$_s3d" = yes ; then
++  _def_s3d='#define HAVE_S3D 1'
++  _ld_s3d='-ls3d'
++  _vosrc="$_vosrc vo_s3d.c"
++  _vomodules="s3d $_vomodules"
++else
++  _def_aa='#undef HAVE_S3D'
++  _novomodules="s3d $_novomodules"
++fi
++echores "$_s3d"
++
++
+ 
+ echocheck "CACA"
+ if test "$_caca" = auto ; then
+@@ -6769,6 +6794,7 @@
+ SDL_LIB = $_ld_sdl
+ SVGA_LIB = $_ld_svga
+ AA_LIB = $_ld_aa
++S3D_LIB = $_ld_s3d
+ CACA_INC = $_inc_caca
+ CACA_LIB = $_ld_caca
+ 
+@@ -7484,6 +7510,7 @@
+ $_def_vesa
+ $_def_xdpms
+ $_def_aa
++$_def_s3d
+ $_def_caca
+ $_def_tga
+ $_def_toolame
+diff -Naur MPlayer-1.0pre7try2/libvo/video_out.c MPlayer-1.0pre7try2.s3d/libvo/video_out.c
+--- MPlayer-1.0pre7try2/libvo/video_out.c	2004-12-21 21:33:51.000000000 +0100
++++ MPlayer-1.0pre7try2.s3d/libvo/video_out.c	2006-06-10 18:37:34.000000000 +0200
+@@ -84,6 +84,7 @@
+ extern vo_functions_t video_out_png;
+ extern vo_functions_t video_out_ggi;
+ extern vo_functions_t video_out_aa;
++extern vo_functions_t video_out_s3d;
+ extern vo_functions_t video_out_caca;
+ extern vo_functions_t video_out_mpegpes;
+ extern vo_functions_t video_out_yuv4mpeg;
+@@ -192,6 +193,9 @@
+ #ifdef HAVE_AA
+ 	&video_out_aa,
+ #endif
++#ifdef HAVE_S3D
++	&video_out_s3d,
++#endif
+ #ifdef HAVE_CACA
+ 	&video_out_caca,
+ #endif
+diff -Naur MPlayer-1.0pre7try2/libvo/vo_s3d.c MPlayer-1.0pre7try2.s3d/libvo/vo_s3d.c
+--- MPlayer-1.0pre7try2/libvo/vo_s3d.c	1970-01-01 01:00:00.000000000 +0100
++++ MPlayer-1.0pre7try2.s3d/libvo/vo_s3d.c	2006-06-11 17:44:27.000000000 +0200
+@@ -0,0 +1,262 @@
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++#include <errno.h>
++#include <s3d.h>
++#include <s3d_keysym.h>
++#include "config.h"
++#include "video_out.h"
++#include "video_out_internal.h"
++#include "mp_msg.h"
++#include "input/mouse.h"
++#include "input/input.h"
++
++static vo_info_t info = 
++{
++	"s3d video output",
++	"s3d",
++	"<dotslash at packetmixer.de>",
++	""
++};
++
++LIBVO_EXTERN( s3d )
++
++static uint32_t image_width, image_height;
++static int int_pause;
++static uint32_t oid;
++static char *data2;
++
++//static uint32_t
++static uint32_t draw_slice(uint8_t *image[], int stride[], int w,int h,int x,int y)
++{
++//	int x2,y2;
++//	unsigned char *data;
++	// ignoring stride, as I don't know what it is O_o
++    mp_msg (MSGT_VO, MSGL_INFO, "[s3d] calling stride: %dx%d image at %dx%d\n",w,h,x,y);
++/*	data=*image;
++	for (y2=x;y2<w;y2++)
++	for (x2=y;x2<h;x2++)
++	{
++		data2[(y2*image_width+x2)*4+0]=data[(y2*image_width+x2)*3+0];
++		data2[(y2*image_width+x2)*4+1]=data[(y2*image_width+x2)*3+1];
++		data2[(y2*image_width+x2)*4+2]=data[(y2*image_width+x2)*3+2];
++		data2[(y2*image_width+x2)*4+3]=255;
++	}
++	s3d_load_texture(oid,0,x,y,w,h,data2);
++	return(0);*/
++	return(0);
++}
++
++static void draw_osd(void)
++{
++}
++
++static void
++flip_page(void)
++{
++}
++
++static uint32_t
++draw_frame(uint8_t *src[])
++{
++	uint32_t x,y;
++	unsigned char *data;
++	data=*src;
++	for (y=0;y<image_height;y++)
++		for (x=0;x<image_width;x++)
++		{
++			data2[(y*image_width+x)*4+0]=data[(y*image_width+x)*3+0];
++			data2[(y*image_width+x)*4+1]=data[(y*image_width+x)*3+1];
++			data2[(y*image_width+x)*4+2]=data[(y*image_width+x)*3+2];
++			data2[(y*image_width+x)*4+3]=255;
++		}
++	s3d_load_texture(oid,0,0,0,image_width,image_height,data2);
++	return VO_TRUE;
++}
++
++static uint32_t
++config(uint32_t width, uint32_t height, uint32_t d_width, uint32_t d_height, uint32_t fullscreen, char *title, uint32_t format)
++{
++	float aspect;
++	image_width = width;
++	image_height = height;
++	printf("config!!\n\n");
++	if (vo_config_count>0) 
++	{
++	} else {
++		free(data2);
++		s3d_pop_texture(oid,1);
++		s3d_pop_vertex(oid,4);
++	}
++	aspect=((float) d_width)/((float) d_height);
++	s3d_push_vertex(oid,-3*aspect,-3,0);
++	s3d_push_vertex(oid, 3*aspect,-3,0);
++	s3d_push_vertex(oid, 3*aspect, 3,0);
++	s3d_push_vertex(oid,-3*aspect, 3,0);
++
++/*	s3d_scale(oid,(((float) d_width)/((float) d_height)),1.0,1.0);*/
++	data2=malloc(width*height*4);
++	memset(data2,128,width*height*4);
++	s3d_push_texture(oid,image_width,image_height);		
++   	mp_msg (MSGT_VO, MSGL_INFO,"[s3d] requesting a %d %d texture... \n",image_width,image_height);
++   	mp_msg (MSGT_VO, MSGL_INFO,"[s3d] wanted size is %d %d... \n",d_width,d_height);
++	s3d_pep_material_texture(oid,0);	// assign texture 0 to material 0
++	return 0;
++}
++
++static void
++uninit(void)
++{
++	if (data2!=NULL)
++		free(data2);
++	s3d_quit();
++}
++
++#include "osdep/keycodes.h"
++extern void mplayer_put_key(int code);
++
++static void check_events(void)
++{
++	s3d_net_check();
++}
++#define shift_key (ki->modifier==(S3D_KMOD_LSHIFT||S3D_KMOD_RSHIFT)) 
++void s3dmp_key(struct s3d_evt *evt)
++{
++	struct s3d_key_event *ki=(struct s3d_key_event *)evt->buf;
++	switch (ki->keysym)
++	{
++		case S3DK_RETURN: mplayer_put_key(KEY_ENTER);break;
++        case S3DK_ESCAPE: mplayer_put_key(KEY_ESC);break;
++		case S3DK_q: mplayer_put_key('q');break;
++ 		case S3DK_F1: mplayer_put_key(KEY_F+1);break;
++ 		case S3DK_F2: mplayer_put_key(KEY_F+2);break;
++ 		case S3DK_F3: mplayer_put_key(KEY_F+3);break;
++ 		case S3DK_F4: mplayer_put_key(KEY_F+4);break;
++ 		case S3DK_F5: mplayer_put_key(KEY_F+5);break;
++ 		case S3DK_F6: mplayer_put_key(KEY_F+6);break;
++ 		case S3DK_F7: mplayer_put_key(KEY_F+7);break;
++ 		case S3DK_F8: mplayer_put_key(KEY_F+8);break;
++ 		case S3DK_F9: mplayer_put_key(KEY_F+9);break;
++ 		case S3DK_F10: mplayer_put_key(KEY_F+10);break;
++ 		case S3DK_F11: mplayer_put_key(KEY_F+11);break;
++ 		case S3DK_F12: mplayer_put_key(KEY_F+12);break;
++                                /*case S3DK_o: mplayer_put_key('o');break;
++                                case S3DK_SPACE: mplayer_put_key(' ');break;
++                                case S3DK_p: mplayer_put_key('p');break;*/
++		case S3DK_7: mplayer_put_key(shift_key?'/':'7');
++        case S3DK_PLUS: mplayer_put_key(shift_key?'*':'+');
++        case S3DK_KP_PLUS: mplayer_put_key('+');break;
++        case S3DK_MINUS:
++        case S3DK_KP_MINUS: mplayer_put_key('-');break;
++		case S3DK_TAB: mplayer_put_key('\t');break;
++		case S3DK_PAGEUP: mplayer_put_key(KEY_PAGE_UP);break;
++		case S3DK_PAGEDOWN: mplayer_put_key(KEY_PAGE_DOWN);break;  
++		case S3DK_UP: mplayer_put_key(KEY_UP);break;
++        case S3DK_DOWN: mplayer_put_key(KEY_DOWN);break;
++        case S3DK_LEFT: mplayer_put_key(KEY_LEFT);break;
++        case S3DK_RIGHT: mplayer_put_key(KEY_RIGHT);break;
++        case S3DK_LESS: mplayer_put_key(shift_key?'>':'<'); break;
++        case S3DK_GREATER: mplayer_put_key('>'); break;
++        case S3DK_ASTERISK:
++		case S3DK_KP_MULTIPLY: mplayer_put_key('*'); break;
++		case S3DK_SLASH:
++		case S3DK_KP_DIVIDE: mplayer_put_key('/'); break;
++		case S3DK_KP0: mplayer_put_key(KEY_KP0); break;
++		case S3DK_KP1: mplayer_put_key(KEY_KP1); break;
++		case S3DK_KP2: mplayer_put_key(KEY_KP2); break;
++		case S3DK_KP3: mplayer_put_key(KEY_KP3); break;
++		case S3DK_KP4: mplayer_put_key(KEY_KP4); break;
++		case S3DK_KP5: mplayer_put_key(KEY_KP5); break;
++		case S3DK_KP6: mplayer_put_key(KEY_KP6); break;
++		case S3DK_KP7: mplayer_put_key(KEY_KP7); break;
++		case S3DK_KP8: mplayer_put_key(KEY_KP8); break;
++		case S3DK_KP9: mplayer_put_key(KEY_KP9); break;
++		case S3DK_KP_PERIOD: mplayer_put_key(KEY_KPDEC); break;
++		case S3DK_KP_ENTER: mplayer_put_key(KEY_KPENTER); break;
++		default:
++			mplayer_put_key(ki->keysym);
++			break;
++
++	}
++	
++}
++int mbutton;
++void s3dmp_mbutton(struct s3d_evt *evt)
++{
++	struct s3d_but_info *bi=(struct s3d_but_info *)evt->buf;
++	mbutton=-1;
++	if ((bi->state==0) && (!vo_nomouse_input))
++		mbutton=bi->button;
++}
++void s3dmp_obj_click(struct s3d_evt *evt)
++{
++	uint32_t coid=*((uint32_t *)evt->buf);
++	if (coid==oid)
++	{
++		mplayer_put_key(MOUSE_BASE+mbutton-1);
++	}
++	mbutton=-1;
++}
++
++
++
++
++static uint32_t preinit(const char *arg)
++{
++	int argc=0;
++	char *arg1=NULL;
++	char **argv=&arg1;
++    mp_msg (MSGT_VO, MSGL_INFO, "[s3d] hello, i'm initing - darn it!\n");
++	mbutton=-1;
++    s3d_set_callback(S3D_EVENT_MBUTTON,s3dmp_mbutton);
++    s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dmp_obj_click);
++    s3d_set_callback(S3D_EVENT_KEY,s3dmp_key);
++
++	if (s3d_init(&argc,&argv,"mplayer"))
++	{
++    	mp_msg (MSGT_VO, MSGL_WARN, "[s3d] sorry, can't reach server.\n");
++		return(ENOSYS);
++	}
++	oid=s3d_new_object();
++	s3d_push_vertex(oid,-3,-3,0);
++	s3d_push_vertex(oid, 3,-3,0);
++	s3d_push_vertex(oid, 3, 3,0);
++	s3d_push_vertex(oid,-3, 3,0);
++	s3d_push_material_a(oid,
++					0.0,	0.0,	0.8	,1.0,
++					1.0,	1.0,	1.0	,1.0,
++					0.0,	0.0,	0.8	,1.0);
++	s3d_push_polygon(oid,0,2,1,0);
++	s3d_pep_polygon_tex_coord(oid, 0.0,1.0, 
++								   1.0,0.0,
++								   1.0,1.0);
++	s3d_push_polygon(oid,0,3,2,0);
++	s3d_pep_polygon_tex_coord(oid, 0.0,1.0, 
++								   0.0,0.0,
++								   1.0,0.0);
++	s3d_flags_on(oid,S3D_OF_VISIBLE);
++    if(arg) 
++    {
++    	mp_msg (MSGT_VO, MSGL_WARN, "[s3d] what should I do with this arg? \n");
++		return ENOSYS;
++    }
++    return 0;
++}
++
++static uint32_t
++query_format(uint32_t format)
++{
++    if (format == IMGFMT_RGB24)
++        return VFCAP_CSP_SUPPORTED | VFCAP_CSP_SUPPORTED_BY_HW;
++    return 0;
++}
++static uint32_t control(uint32_t request, void *data, ...)
++{
++  switch (request) {
++  case VOCTRL_PAUSE: return (int_pause=1);
++  case VOCTRL_RESUME: return (int_pause=0);
++  case VOCTRL_QUERY_FORMAT:
++    return query_format(*((uint32_t*)data));
++  }
++  return VO_NOTIMPL;
++}
+diff -Naur MPlayer-1.0pre7try2/Makefile MPlayer-1.0pre7try2.s3d/Makefile
+--- MPlayer-1.0pre7try2/Makefile	2005-04-16 22:18:12.000000000 +0200
++++ MPlayer-1.0pre7try2.s3d/Makefile	2006-06-10 18:37:34.000000000 +0200
+@@ -30,7 +30,7 @@
+ OBJS_MENCODER = $(SRCS_MENCODER:.c=.o)
+ OBJS_MPLAYER = $(SRCS_MPLAYER:.c=.o)
+ 
+-VO_LIBS = $(AA_LIB) $(X_LIB) $(SDL_LIB) $(GGI_LIB) $(MP1E_LIB) $(MLIB_LIB) $(SVGA_LIB) $(DIRECTFB_LIB) $(CACA_LIB)
++VO_LIBS = $(AA_LIB) $(X_LIB) $(SDL_LIB) $(GGI_LIB) $(MP1E_LIB) $(MLIB_LIB) $(SVGA_LIB) $(DIRECTFB_LIB) $(CACA_LIB) $(S3D_LIB)
+ AO_LIBS = $(ARTS_LIB) $(ESD_LIB) $(JACK_LIB) $(NAS_LIB) $(SGIAUDIO_LIB) $(POLYP_LIB)
+ CODEC_LIBS = $(AV_LIB) $(FAME_LIB) $(MAD_LIB) $(VORBIS_LIB) $(THEORA_LIB) $(FAAD_LIB) $(LIBLZO_LIB) $(DECORE_LIB) $(XVID_LIB) $(DTS_LIB) $(PNG_LIB) $(Z_LIB) $(JPEG_LIB) $(ALSA_LIB) $(XMMS_LIB) $(X264_LIB)
+ COMMON_LIBS = libmpcodecs/libmpcodecs.a $(W32_LIB) $(DS_LIB) libaf/libaf.a libmpdemux/libmpdemux.a input/libinput.a postproc/libswscale.a osdep/libosdep.a $(DVDREAD_LIB) $(CODEC_LIBS) $(FREETYPE_LIB) $(TERMCAP_LIB) $(CDPARANOIA_LIB) $(MPLAYER_NETWORK_LIB) $(WIN32_LIB) $(GIF_LIB) $(MACOSX_FRAMEWORKS) $(SMBSUPPORT_LIB) $(FRIBIDI_LIB) $(FONTCONFIG_LIB) $(ENCA_LIB)


Property changes on: trunk/extras/mplayer/mplayer.1.0pre7try2.s3d.patch
___________________________________________________________________
Name: svn:mime-type
   + text/x-patch

Deleted: trunk/extras/mplayer.1.0pre7try2.s3d.patch
===================================================================
--- trunk/extras/mplayer.1.0pre7try2.s3d.patch	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/mplayer.1.0pre7try2.s3d.patch	2006-10-26 14:32:52 UTC (rev 456)
@@ -1,371 +0,0 @@
-diff -Naur MPlayer-1.0pre7try2/configure MPlayer-1.0pre7try2.s3d/configure
---- MPlayer-1.0pre7try2/configure	2005-04-13 13:46:35.000000000 +0200
-+++ MPlayer-1.0pre7try2.s3d/configure	2006-06-10 18:37:34.000000000 +0200
-@@ -234,6 +234,7 @@
-   --disable-vidix        disable VIDIX [enable on x86 *nix]
-   --enable-gl            build with OpenGL render support [autodetect]
-   --enable-dga[=n]       build with DGA [n in {1, 2} ] support [autodetect]
-+  --enable-s3d           build with s3d support [autodetect]
-   --enable-vesa          build with VESA support [autodetect]
-   --enable-svga          build with SVGAlib support [autodetect]
-   --enable-sdl           build with SDL render support [autodetect]
-@@ -1288,6 +1289,7 @@
- _mencoder=yes
- _x11=auto
- _dga=auto	# 1 2 no auto
-+_s3d=auto
- _xv=auto
- _xvmc=no  #auto when complete
- _sdl=auto
-@@ -1444,6 +1446,8 @@
-   --disable-xvmc)       _xvmc=no        ;;
-   --enable-sdl)		_sdl=yes	;;
-   --disable-sdl)	_sdl=no		;;
-+  --enable-s3d)		_s3d=yes	;;
-+  --disable-s3d)	_s3d=no		;;
-   --enable-directx)     _directx=yes    ;;
-   --disable-directx)    _directx=no     ;;
-   --enable-win32waveout)  _win32waveout=yes ;;
-@@ -3798,6 +3802,27 @@
- fi
- echores "$_aa"
- 
-+echocheck "s3d"
-+if test "$_s3d" = auto ; then
-+  cat > $TMPC << EOF
-+#include <s3d.h>
-+int main(int argc, char **argv) { s3d_init( &argc, &argv, "mplayer_test"); s3d_quit(); return 0; }
-+EOF
-+  _s3d=no
-+  cc_check -ls3d && _s3d=yes
-+fi
-+if test "$_s3d" = yes ; then
-+  _def_s3d='#define HAVE_S3D 1'
-+  _ld_s3d='-ls3d'
-+  _vosrc="$_vosrc vo_s3d.c"
-+  _vomodules="s3d $_vomodules"
-+else
-+  _def_aa='#undef HAVE_S3D'
-+  _novomodules="s3d $_novomodules"
-+fi
-+echores "$_s3d"
-+
-+
- 
- echocheck "CACA"
- if test "$_caca" = auto ; then
-@@ -6769,6 +6794,7 @@
- SDL_LIB = $_ld_sdl
- SVGA_LIB = $_ld_svga
- AA_LIB = $_ld_aa
-+S3D_LIB = $_ld_s3d
- CACA_INC = $_inc_caca
- CACA_LIB = $_ld_caca
- 
-@@ -7484,6 +7510,7 @@
- $_def_vesa
- $_def_xdpms
- $_def_aa
-+$_def_s3d
- $_def_caca
- $_def_tga
- $_def_toolame
-diff -Naur MPlayer-1.0pre7try2/libvo/video_out.c MPlayer-1.0pre7try2.s3d/libvo/video_out.c
---- MPlayer-1.0pre7try2/libvo/video_out.c	2004-12-21 21:33:51.000000000 +0100
-+++ MPlayer-1.0pre7try2.s3d/libvo/video_out.c	2006-06-10 18:37:34.000000000 +0200
-@@ -84,6 +84,7 @@
- extern vo_functions_t video_out_png;
- extern vo_functions_t video_out_ggi;
- extern vo_functions_t video_out_aa;
-+extern vo_functions_t video_out_s3d;
- extern vo_functions_t video_out_caca;
- extern vo_functions_t video_out_mpegpes;
- extern vo_functions_t video_out_yuv4mpeg;
-@@ -192,6 +193,9 @@
- #ifdef HAVE_AA
- 	&video_out_aa,
- #endif
-+#ifdef HAVE_S3D
-+	&video_out_s3d,
-+#endif
- #ifdef HAVE_CACA
- 	&video_out_caca,
- #endif
-diff -Naur MPlayer-1.0pre7try2/libvo/vo_s3d.c MPlayer-1.0pre7try2.s3d/libvo/vo_s3d.c
---- MPlayer-1.0pre7try2/libvo/vo_s3d.c	1970-01-01 01:00:00.000000000 +0100
-+++ MPlayer-1.0pre7try2.s3d/libvo/vo_s3d.c	2006-06-11 17:44:27.000000000 +0200
-@@ -0,0 +1,262 @@
-+#include <stdio.h>
-+#include <stdlib.h>
-+#include <string.h>
-+#include <errno.h>
-+#include <s3d.h>
-+#include <s3d_keysym.h>
-+#include "config.h"
-+#include "video_out.h"
-+#include "video_out_internal.h"
-+#include "mp_msg.h"
-+#include "input/mouse.h"
-+#include "input/input.h"
-+
-+static vo_info_t info = 
-+{
-+	"s3d video output",
-+	"s3d",
-+	"<dotslash at packetmixer.de>",
-+	""
-+};
-+
-+LIBVO_EXTERN( s3d )
-+
-+static uint32_t image_width, image_height;
-+static int int_pause;
-+static uint32_t oid;
-+static char *data2;
-+
-+//static uint32_t
-+static uint32_t draw_slice(uint8_t *image[], int stride[], int w,int h,int x,int y)
-+{
-+//	int x2,y2;
-+//	unsigned char *data;
-+	// ignoring stride, as I don't know what it is O_o
-+    mp_msg (MSGT_VO, MSGL_INFO, "[s3d] calling stride: %dx%d image at %dx%d\n",w,h,x,y);
-+/*	data=*image;
-+	for (y2=x;y2<w;y2++)
-+	for (x2=y;x2<h;x2++)
-+	{
-+		data2[(y2*image_width+x2)*4+0]=data[(y2*image_width+x2)*3+0];
-+		data2[(y2*image_width+x2)*4+1]=data[(y2*image_width+x2)*3+1];
-+		data2[(y2*image_width+x2)*4+2]=data[(y2*image_width+x2)*3+2];
-+		data2[(y2*image_width+x2)*4+3]=255;
-+	}
-+	s3d_load_texture(oid,0,x,y,w,h,data2);
-+	return(0);*/
-+	return(0);
-+}
-+
-+static void draw_osd(void)
-+{
-+}
-+
-+static void
-+flip_page(void)
-+{
-+}
-+
-+static uint32_t
-+draw_frame(uint8_t *src[])
-+{
-+	uint32_t x,y;
-+	unsigned char *data;
-+	data=*src;
-+	for (y=0;y<image_height;y++)
-+		for (x=0;x<image_width;x++)
-+		{
-+			data2[(y*image_width+x)*4+0]=data[(y*image_width+x)*3+0];
-+			data2[(y*image_width+x)*4+1]=data[(y*image_width+x)*3+1];
-+			data2[(y*image_width+x)*4+2]=data[(y*image_width+x)*3+2];
-+			data2[(y*image_width+x)*4+3]=255;
-+		}
-+	s3d_load_texture(oid,0,0,0,image_width,image_height,data2);
-+	return VO_TRUE;
-+}
-+
-+static uint32_t
-+config(uint32_t width, uint32_t height, uint32_t d_width, uint32_t d_height, uint32_t fullscreen, char *title, uint32_t format)
-+{
-+	float aspect;
-+	image_width = width;
-+	image_height = height;
-+	printf("config!!\n\n");
-+	if (vo_config_count>0) 
-+	{
-+	} else {
-+		free(data2);
-+		s3d_pop_texture(oid,1);
-+		s3d_pop_vertex(oid,4);
-+	}
-+	aspect=((float) d_width)/((float) d_height);
-+	s3d_push_vertex(oid,-3*aspect,-3,0);
-+	s3d_push_vertex(oid, 3*aspect,-3,0);
-+	s3d_push_vertex(oid, 3*aspect, 3,0);
-+	s3d_push_vertex(oid,-3*aspect, 3,0);
-+
-+/*	s3d_scale(oid,(((float) d_width)/((float) d_height)),1.0,1.0);*/
-+	data2=malloc(width*height*4);
-+	memset(data2,128,width*height*4);
-+	s3d_push_texture(oid,image_width,image_height);		
-+   	mp_msg (MSGT_VO, MSGL_INFO,"[s3d] requesting a %d %d texture... \n",image_width,image_height);
-+   	mp_msg (MSGT_VO, MSGL_INFO,"[s3d] wanted size is %d %d... \n",d_width,d_height);
-+	s3d_pep_material_texture(oid,0);	// assign texture 0 to material 0
-+	return 0;
-+}
-+
-+static void
-+uninit(void)
-+{
-+	if (data2!=NULL)
-+		free(data2);
-+	s3d_quit();
-+}
-+
-+#include "osdep/keycodes.h"
-+extern void mplayer_put_key(int code);
-+
-+static void check_events(void)
-+{
-+	s3d_net_check();
-+}
-+#define shift_key (ki->modifier==(S3D_KMOD_LSHIFT||S3D_KMOD_RSHIFT)) 
-+void s3dmp_key(struct s3d_evt *evt)
-+{
-+	struct s3d_key_event *ki=(struct s3d_key_event *)evt->buf;
-+	switch (ki->keysym)
-+	{
-+		case S3DK_RETURN: mplayer_put_key(KEY_ENTER);break;
-+        case S3DK_ESCAPE: mplayer_put_key(KEY_ESC);break;
-+		case S3DK_q: mplayer_put_key('q');break;
-+ 		case S3DK_F1: mplayer_put_key(KEY_F+1);break;
-+ 		case S3DK_F2: mplayer_put_key(KEY_F+2);break;
-+ 		case S3DK_F3: mplayer_put_key(KEY_F+3);break;
-+ 		case S3DK_F4: mplayer_put_key(KEY_F+4);break;
-+ 		case S3DK_F5: mplayer_put_key(KEY_F+5);break;
-+ 		case S3DK_F6: mplayer_put_key(KEY_F+6);break;
-+ 		case S3DK_F7: mplayer_put_key(KEY_F+7);break;
-+ 		case S3DK_F8: mplayer_put_key(KEY_F+8);break;
-+ 		case S3DK_F9: mplayer_put_key(KEY_F+9);break;
-+ 		case S3DK_F10: mplayer_put_key(KEY_F+10);break;
-+ 		case S3DK_F11: mplayer_put_key(KEY_F+11);break;
-+ 		case S3DK_F12: mplayer_put_key(KEY_F+12);break;
-+                                /*case S3DK_o: mplayer_put_key('o');break;
-+                                case S3DK_SPACE: mplayer_put_key(' ');break;
-+                                case S3DK_p: mplayer_put_key('p');break;*/
-+		case S3DK_7: mplayer_put_key(shift_key?'/':'7');
-+        case S3DK_PLUS: mplayer_put_key(shift_key?'*':'+');
-+        case S3DK_KP_PLUS: mplayer_put_key('+');break;
-+        case S3DK_MINUS:
-+        case S3DK_KP_MINUS: mplayer_put_key('-');break;
-+		case S3DK_TAB: mplayer_put_key('\t');break;
-+		case S3DK_PAGEUP: mplayer_put_key(KEY_PAGE_UP);break;
-+		case S3DK_PAGEDOWN: mplayer_put_key(KEY_PAGE_DOWN);break;  
-+		case S3DK_UP: mplayer_put_key(KEY_UP);break;
-+        case S3DK_DOWN: mplayer_put_key(KEY_DOWN);break;
-+        case S3DK_LEFT: mplayer_put_key(KEY_LEFT);break;
-+        case S3DK_RIGHT: mplayer_put_key(KEY_RIGHT);break;
-+        case S3DK_LESS: mplayer_put_key(shift_key?'>':'<'); break;
-+        case S3DK_GREATER: mplayer_put_key('>'); break;
-+        case S3DK_ASTERISK:
-+		case S3DK_KP_MULTIPLY: mplayer_put_key('*'); break;
-+		case S3DK_SLASH:
-+		case S3DK_KP_DIVIDE: mplayer_put_key('/'); break;
-+		case S3DK_KP0: mplayer_put_key(KEY_KP0); break;
-+		case S3DK_KP1: mplayer_put_key(KEY_KP1); break;
-+		case S3DK_KP2: mplayer_put_key(KEY_KP2); break;
-+		case S3DK_KP3: mplayer_put_key(KEY_KP3); break;
-+		case S3DK_KP4: mplayer_put_key(KEY_KP4); break;
-+		case S3DK_KP5: mplayer_put_key(KEY_KP5); break;
-+		case S3DK_KP6: mplayer_put_key(KEY_KP6); break;
-+		case S3DK_KP7: mplayer_put_key(KEY_KP7); break;
-+		case S3DK_KP8: mplayer_put_key(KEY_KP8); break;
-+		case S3DK_KP9: mplayer_put_key(KEY_KP9); break;
-+		case S3DK_KP_PERIOD: mplayer_put_key(KEY_KPDEC); break;
-+		case S3DK_KP_ENTER: mplayer_put_key(KEY_KPENTER); break;
-+		default:
-+			mplayer_put_key(ki->keysym);
-+			break;
-+
-+	}
-+	
-+}
-+int mbutton;
-+void s3dmp_mbutton(struct s3d_evt *evt)
-+{
-+	struct s3d_but_info *bi=(struct s3d_but_info *)evt->buf;
-+	mbutton=-1;
-+	if ((bi->state==0) && (!vo_nomouse_input))
-+		mbutton=bi->button;
-+}
-+void s3dmp_obj_click(struct s3d_evt *evt)
-+{
-+	uint32_t coid=*((uint32_t *)evt->buf);
-+	if (coid==oid)
-+	{
-+		mplayer_put_key(MOUSE_BASE+mbutton-1);
-+	}
-+	mbutton=-1;
-+}
-+
-+
-+
-+
-+static uint32_t preinit(const char *arg)
-+{
-+	int argc=0;
-+	char *arg1=NULL;
-+	char **argv=&arg1;
-+    mp_msg (MSGT_VO, MSGL_INFO, "[s3d] hello, i'm initing - darn it!\n");
-+	mbutton=-1;
-+    s3d_set_callback(S3D_EVENT_MBUTTON,s3dmp_mbutton);
-+    s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dmp_obj_click);
-+    s3d_set_callback(S3D_EVENT_KEY,s3dmp_key);
-+
-+	if (s3d_init(&argc,&argv,"mplayer"))
-+	{
-+    	mp_msg (MSGT_VO, MSGL_WARN, "[s3d] sorry, can't reach server.\n");
-+		return(ENOSYS);
-+	}
-+	oid=s3d_new_object();
-+	s3d_push_vertex(oid,-3,-3,0);
-+	s3d_push_vertex(oid, 3,-3,0);
-+	s3d_push_vertex(oid, 3, 3,0);
-+	s3d_push_vertex(oid,-3, 3,0);
-+	s3d_push_material_a(oid,
-+					0.0,	0.0,	0.8	,1.0,
-+					1.0,	1.0,	1.0	,1.0,
-+					0.0,	0.0,	0.8	,1.0);
-+	s3d_push_polygon(oid,0,2,1,0);
-+	s3d_pep_polygon_tex_coord(oid, 0.0,1.0, 
-+								   1.0,0.0,
-+								   1.0,1.0);
-+	s3d_push_polygon(oid,0,3,2,0);
-+	s3d_pep_polygon_tex_coord(oid, 0.0,1.0, 
-+								   0.0,0.0,
-+								   1.0,0.0);
-+	s3d_flags_on(oid,S3D_OF_VISIBLE);
-+    if(arg) 
-+    {
-+    	mp_msg (MSGT_VO, MSGL_WARN, "[s3d] what should I do with this arg? \n");
-+		return ENOSYS;
-+    }
-+    return 0;
-+}
-+
-+static uint32_t
-+query_format(uint32_t format)
-+{
-+    if (format == IMGFMT_RGB24)
-+        return VFCAP_CSP_SUPPORTED | VFCAP_CSP_SUPPORTED_BY_HW;
-+    return 0;
-+}
-+static uint32_t control(uint32_t request, void *data, ...)
-+{
-+  switch (request) {
-+  case VOCTRL_PAUSE: return (int_pause=1);
-+  case VOCTRL_RESUME: return (int_pause=0);
-+  case VOCTRL_QUERY_FORMAT:
-+    return query_format(*((uint32_t*)data));
-+  }
-+  return VO_NOTIMPL;
-+}
-diff -Naur MPlayer-1.0pre7try2/Makefile MPlayer-1.0pre7try2.s3d/Makefile
---- MPlayer-1.0pre7try2/Makefile	2005-04-16 22:18:12.000000000 +0200
-+++ MPlayer-1.0pre7try2.s3d/Makefile	2006-06-10 18:37:34.000000000 +0200
-@@ -30,7 +30,7 @@
- OBJS_MENCODER = $(SRCS_MENCODER:.c=.o)
- OBJS_MPLAYER = $(SRCS_MPLAYER:.c=.o)
- 
--VO_LIBS = $(AA_LIB) $(X_LIB) $(SDL_LIB) $(GGI_LIB) $(MP1E_LIB) $(MLIB_LIB) $(SVGA_LIB) $(DIRECTFB_LIB) $(CACA_LIB)
-+VO_LIBS = $(AA_LIB) $(X_LIB) $(SDL_LIB) $(GGI_LIB) $(MP1E_LIB) $(MLIB_LIB) $(SVGA_LIB) $(DIRECTFB_LIB) $(CACA_LIB) $(S3D_LIB)
- AO_LIBS = $(ARTS_LIB) $(ESD_LIB) $(JACK_LIB) $(NAS_LIB) $(SGIAUDIO_LIB) $(POLYP_LIB)
- CODEC_LIBS = $(AV_LIB) $(FAME_LIB) $(MAD_LIB) $(VORBIS_LIB) $(THEORA_LIB) $(FAAD_LIB) $(LIBLZO_LIB) $(DECORE_LIB) $(XVID_LIB) $(DTS_LIB) $(PNG_LIB) $(Z_LIB) $(JPEG_LIB) $(ALSA_LIB) $(XMMS_LIB) $(X264_LIB)
- COMMON_LIBS = libmpcodecs/libmpcodecs.a $(W32_LIB) $(DS_LIB) libaf/libaf.a libmpdemux/libmpdemux.a input/libinput.a postproc/libswscale.a osdep/libosdep.a $(DVDREAD_LIB) $(CODEC_LIBS) $(FREETYPE_LIB) $(TERMCAP_LIB) $(CDPARANOIA_LIB) $(MPLAYER_NETWORK_LIB) $(WIN32_LIB) $(GIF_LIB) $(MACOSX_FRAMEWORKS) $(SMBSUPPORT_LIB) $(FRIBIDI_LIB) $(FONTCONFIG_LIB) $(ENCA_LIB)

Added: trunk/extras/swig/Makefile
===================================================================
--- trunk/extras/swig/Makefile	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/swig/Makefile	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,18 @@
+PYTHON_MOD=_s3d.so
+PERL_MOD=s3d.so
+MODS=$(PYTHON_MOD) $(PERL_MOD)
+
+default:	all
+all:		$(MODS)
+python:		$(PYTHON_MOD)
+perl:		$(PERL_MOD)
+$(PYTHON_MOD):	s3d.i
+	 swig -python s3d.i
+	 gcc -fPIC -c s3d_wrap.c -I/usr/include/python2.3/
+	 gcc -shared s3d_wrap.o -ls3d -o $(PYTHON_MOD)
+$(PERL_MOD):	s3d.i
+	swig -perl5 s3d.i
+	gcc -fPIC -c s3d_wrap.c  `perl -MExtUtils::Embed -e ccopts`
+	ld -G  s3d_wrap.o -lperl -ls3d -o $(PERL_MOD)
+clean:
+	rm -f $(MODS) *.o s3d_wrap.c s3d.py s3d.pyc s3d.pm

Added: trunk/extras/swig/TODO
===================================================================
--- trunk/extras/swig/TODO	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/swig/TODO	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,2 @@
+- do something[tm] about the callbacks and structs
+- build some wrappers, remove s3d_ wrappers, we have proper namespaces in python/perl

Added: trunk/extras/swig/s3d.i
===================================================================
--- trunk/extras/swig/s3d.i	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/swig/s3d.i	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,20 @@
+%module s3d
+typedef unsigned int uint32_t;
+%inline %{
+#include <stdint.h>
+int s3dpy_init(char *name)
+{
+	return s3d_init(NULL,NULL,name);
+}
+int s3dpy_draw_string(char *str)
+{
+	return s3d_draw_string(str,NULL);
+}
+%}
+%{
+#include <s3d.h>
+#include <s3d_keysym.h>
+%}
+
+%include "../libs3d/s3d.h"
+%include "../libs3d/s3d_keysym.h"

Added: trunk/extras/swig/s3d_test.pl
===================================================================
--- trunk/extras/swig/s3d_test.pl	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/swig/s3d_test.pl	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,12 @@
+use s3d;
+if (0==s3d::s3dpy_init("hello perl"))
+{
+	s3d::s3d_select_font("vera");
+	$o= s3d::s3dpy_draw_string("hello from perl");
+	print("object $o\n");
+	s3d::s3d_flags_on($o,$s3d::S3D_OF_VISIBLE);
+	sleep(10);
+	s3d::s3d_quit();
+	
+	
+}

Added: trunk/extras/swig/s3d_test.py
===================================================================
--- trunk/extras/swig/s3d_test.py	2006-10-23 16:05:56 UTC (rev 455)
+++ trunk/extras/swig/s3d_test.py	2006-10-26 14:32:52 UTC (rev 456)
@@ -0,0 +1,9 @@
+#!/usr/bin/python
+from s3d import *
+from time import sleep
+if 0 == s3dpy_init("hello world"):
+	s3d_select_font("vera")
+	o = s3dpy_draw_string("hello from python")
+	s3d_flags_on(o, S3D_OF_VISIBLE)
+	sleep(10)
+	s3d_quit()


Property changes on: trunk/extras/swig/s3d_test.py
___________________________________________________________________
Name: svn:mime-type
   + text/script



From dotslash at mail.berlios.de  Tue Oct 31 15:23:17 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Tue, 31 Oct 2006 15:23:17 +0100
Subject: [S3d-svn] r457 - in trunk: . apps/s3dfm
Message-ID: <200610311423.k9VENHd8005664@sheep.berlios.de>

Author: dotslash
Date: 2006-10-31 15:23:17 +0100 (Tue, 31 Oct 2006)
New Revision: 457

Modified:
   trunk/
   trunk/apps/s3dfm/fs.c
Log:
 r1106 at kero:  dotslash | 2006-10-31 15:23:12 +0100
 - some fixes (proper fs-sublist initialization)



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1104
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1106

Modified: trunk/apps/s3dfm/fs.c
===================================================================
--- trunk/apps/s3dfm/fs.c	2006-10-26 14:32:52 UTC (rev 456)
+++ trunk/apps/s3dfm/fs.c	2006-10-31 14:23:17 UTC (rev 457)
@@ -35,6 +35,7 @@
 #include <unistd.h>
 
 #include <errno.h> /* errno */
+#include <time.h>	/* nanosleep() */
 
 struct fs_error fs_err={0,0,NULL,NULL};
 
@@ -68,6 +69,10 @@
 				strcpy(fl->p[j].name,path);
 				strcat(fl->p[j].name,"/");
 				strcat(fl->p[j].name,name);
+				fl->p[j].anode=NULL;
+				fl->p[j].size=0; /*TODO: later */
+				fl->p[j].state=STATE_NONE;
+
 				j++;
 			}
 			free(namelist[i]);
@@ -333,11 +338,13 @@
 /* write an error and wait for a reaction */
 int fs_error(char *message, char *file)
 {
+	static struct timespec t={0,100*1000*1000}; 
 	fs_err.err=errno;
 	fs_err.message=message;
 	fs_err.file=file;
 	fs_err.active=1;
 	printf("[FS ERROR]: %s %s %s",message,file,strerror(errno));
-	while (fs_err.active); /* until situation clear, wait */
+	while (fs_err.active) 
+		nanosleep(&t,NULL);  /* until situation clear, wait (and don't waste cpu-time) */
 	return(0);
 }



From dotslash at mail.berlios.de  Tue Oct 31 17:08:27 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Tue, 31 Oct 2006 17:08:27 +0100
Subject: [S3d-svn] r458 - in trunk: . apps/s3dfm
Message-ID: <200610311608.k9VG8Rse020763@sheep.berlios.de>

Author: dotslash
Date: 2006-10-31 17:08:26 +0100 (Tue, 31 Oct 2006)
New Revision: 458

Modified:
   trunk/
   trunk/apps/s3dfm/dialog.c
   trunk/apps/s3dfm/fs.c
   trunk/apps/s3dfm/s3dfm.h
Log:
 r1108 at kero:  dotslash | 2006-10-31 17:08:21 +0100
 - only one error  (don't flood windows) -> error handling states



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1106
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1108

Modified: trunk/apps/s3dfm/dialog.c
===================================================================
--- trunk/apps/s3dfm/dialog.c	2006-10-31 14:23:17 UTC (rev 457)
+++ trunk/apps/s3dfm/dialog.c	2006-10-31 16:08:26 UTC (rev 458)
@@ -110,6 +110,12 @@
 	button->onclick=close_win;
 	s3dw_show(S3DWIDGET(infwin));
 }
+void window_fs_confirm_error(s3dw_widget *button)
+{
+	fs_err.state=ESTATE_NONE;
+	s3dw_delete(button->parent); /* parent =surface. this means close containing window */
+	
+}
 void window_fs_errno(char *errmsg)
 {
 	s3dw_surface *infwin;
@@ -352,37 +358,39 @@
 			dummy.pz=0;
 			dummy.scale=0.01;
 		}
-
-		for (i=0;i<fp->n;i++) {
-			if (fp->p[i].state==STATE_FINISHED)
-			{ /* we can go and clean up now. */
-				if (NULL!=(node=node_getbypath(fp->p[i].name)))
-				{
-					printf("[CLEANUP] for node %s (%s)\n",node->name,fp->p[i].name);
-					node->detached=0;
-					if (node->parent!=NULL)
+		if (fp!=NULL) {
+			for (i=0;i<fp->n;i++) {
+				if (fp->p[i].state==STATE_FINISHED)
+				{ /* we can go and clean up now. */
+					if (NULL!=(node=node_getbypath(fp->p[i].name)))
 					{
-						parse_dir(node->parent);
-						switch (node->disp)
+						printf("[CLEANUP] for node %s (%s)\n",node->name,fp->p[i].name);
+						node->detached=0;
+						if (node->parent!=NULL)
 						{
-							case D_ICON:	box_order_icons(node->parent);					break;
-							case D_DIR:		box_order_subdirs(node->parent);				break;
+							parse_dir(node->parent);
+							switch (node->disp)
+							{
+								case D_ICON:	box_order_icons(node->parent);					break;
+								case D_DIR:		box_order_subdirs(node->parent);				break;
+							}
 						}
-					}
+					} else 
+						printf("node %s already vanished ...\n",fp->p[i].name);
+							
+					fp->p[i].state=STATE_CLEANED;
 				}
-				fp->p[i].state=STATE_CLEANED;
-			}
-			if (fp->p[i].state>STATE_NONE)
-			{
-				if (destnode!=NULL)
+				if (fp->p[i].state>STATE_NONE)
 				{
-					fp->p[i].anode->px=dummy.px;
-					fp->p[i].anode->py=dummy.py;
-					fp->p[i].anode->pz=dummy.pz;
-					ani_add(fp->p[i].anode);
+					if (destnode!=NULL)
+					{
+						fp->p[i].anode->px=dummy.px;
+						fp->p[i].anode->py=dummy.py;
+						fp->p[i].anode->pz=dummy.pz;
+						ani_add(fp->p[i].anode);
+					}
+
 				}
-
-
 			}
 		}
 		if (fs_lock==TYPE_FINISHED)	{
@@ -400,16 +408,22 @@
 					box_order_icons(destnode);	
 				}
 			destnode=NULL;
-
 		}
-		if (fs_err.active)
+		if (fs_err.state==ESTATE_RISE)
 		{
+			s3dw_surface *infwin;
+			s3dw_button  *button;
 			char errmsg[M_DIR];
-			/* TODO: draw a window, wait for input */
+			float l;
+			fs_err.state=ESTATE_WAIT_FOR_CONFIRM;
 			snprintf(errmsg,M_DIR,"Error \"%s\" on %s",fs_err.message,fs_err.file);
-			errno=fs_err.err;
-			window_fs_errno(errmsg);
-			fs_err.active=0;
+			l=s3d_strlen(errmsg)+2;
+			infwin=s3dw_surface_new("Error",l,8);
+			s3dw_label_new(infwin,errmsg,1,2);
+			button=s3dw_button_new(infwin,"OK",l/2-1,5);
+			button->onclick=window_fs_confirm_error;
+			s3dw_show(S3DWIDGET(infwin));
+			printf("fs_err is active ... message: %s\n",errmsg);
 		}
 	}
 }

Modified: trunk/apps/s3dfm/fs.c
===================================================================
--- trunk/apps/s3dfm/fs.c	2006-10-31 14:23:17 UTC (rev 457)
+++ trunk/apps/s3dfm/fs.c	2006-10-31 16:08:26 UTC (rev 458)
@@ -342,9 +342,9 @@
 	fs_err.err=errno;
 	fs_err.message=message;
 	fs_err.file=file;
-	fs_err.active=1;
+	fs_err.state=ESTATE_RISE;
 	printf("[FS ERROR]: %s %s %s",message,file,strerror(errno));
-	while (fs_err.active) 
+	while (fs_err.state!=ESTATE_NONE) 
 		nanosleep(&t,NULL);  /* until situation clear, wait (and don't waste cpu-time) */
 	return(0);
 }

Modified: trunk/apps/s3dfm/s3dfm.h
===================================================================
--- trunk/apps/s3dfm/s3dfm.h	2006-10-31 14:23:17 UTC (rev 457)
+++ trunk/apps/s3dfm/s3dfm.h	2006-10-31 16:08:26 UTC (rev 458)
@@ -86,9 +86,16 @@
 	int n;
 };
 struct fs_error {
-	int err,active;
+	int err,state;
 	char *message, *file;
 };
+enum {
+	ESTATE_NONE,
+	ESTATE_RISE,
+	ESTATE_WAIT_FOR_CONFIRM
+		/* TODO: more states should be added and handed back to the filesystem processor, like 
+		 * skip, abort, retry ... */
+};
 typedef struct _filelist filelist;
 typedef struct _t_node   t_node;
 typedef struct _t_file	 t_file;



From dotslash at mail.berlios.de  Tue Oct 31 17:08:53 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Tue, 31 Oct 2006 17:08:53 +0100
Subject: [S3d-svn] r459 - in trunk: . libs3d
Message-ID: <200610311608.k9VG8r1u020866@sheep.berlios.de>

Author: dotslash
Date: 2006-10-31 17:08:52 +0100 (Tue, 31 Oct 2006)
New Revision: 459

Modified:
   trunk/
   trunk/libs3d/freetype.c
   trunk/libs3d/s3d.h
Log:
 r1110 at kero:  dotslash | 2006-10-31 17:08:49 +0100
 - add s3d_strlen() to determine string length without drawing



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1108
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1110

Modified: trunk/libs3d/freetype.c
===================================================================
--- trunk/libs3d/freetype.c	2006-10-31 16:08:26 UTC (rev 458)
+++ trunk/libs3d/freetype.c	2006-10-31 16:08:52 UTC (rev 459)
@@ -28,6 +28,7 @@
 #include "sei_interface.h"	/* sei_triangulate_polygon() */
 #include <stdlib.h>    		/*  malloc(), free() */
 #include <math.h>			/*  atan2() */
+#include <string.h>			/*  strncmp(), strncpy() */
 #include "ft2build.h"
 #include FT_FREETYPE_H
 #undef __FTERRORS_H__                
@@ -50,12 +51,12 @@
 static FT_Library 	library;
 static FT_Face		face;
 static char *memory_font=NULL;		 /*  the font file in memory */
+static char oldfontpath[256];
 static int memory_font_size=0;	 /*  and it's size, to reduce load times. */
 static int ft_init=0;
 static int face_init=0;
 
 static int v_off; 	 /*  the vertex number offset, to have the right vertex numbers for each character */
-static int f_oid;	 /*  the oid of our font string */
 static int ch;
 struct t_buf tess_buf[256];
 
@@ -66,6 +67,7 @@
 {
 	int error= FT_Init_FreeType( &library);
 	int i;
+	oldfontpath[0]=0;
 	if (error)
 		return (-1);
     ft_init=1;
@@ -334,7 +336,11 @@
 			errds(VHIGH,"s3d_select_font()","error in initializtation (ft_init())");
 			return(-1);
 		}
-
+	if (strncmp(oldfontpath,path,256)==0)
+	{
+		s3dprintf(VLOW,"font already %s loaded.", path);
+		return(-1);
+	}
 	 /*  yse (system-specific?!) font grabber */
 	if (((c=s3d_findfont(path))!=NULL))
 	{
@@ -344,8 +350,9 @@
 		if ((memory_font_size=s3d_open_file(c,p))>0)
 		{
 			if (!s3d_ft_load_font())
-			{
+			{	/* success */
 				if (oldfont!=NULL)				free(oldfont);
+				strncpy(oldfontpath,path,256);
 				return(0);
 			} else {
 				memory_font=oldfont;
@@ -365,6 +372,7 @@
 	float xoff;
 	int voff;
 	int len;
+	uint32_t f_oid;
 	if (!ft_init)
 		if (s3d_ft_init())
 		{
@@ -388,6 +396,38 @@
 	if (xlen!=NULL) *xlen=xoff;
 	return(f_oid);
 }
+/* get the string length before actually drawing it. */
+float s3d_strlen( char *str) {
+	int i;
+	float xoff;
+	int voff;
+	int len;
+	uint16_t a;
+	if (!ft_init)
+		if (s3d_ft_init())
+		{
+			errds(VHIGH,"s3d_draw_string()","error in initializtation (ft_init())");
+			return(0.0);
+		}
+	if (!face_init)
+	{
+		errds(VHIGH,"s3d_draw_string()","no font to draw with");
+		return(0.0);
+	}
+	 /*  standard material */
+	xoff=0;
+	voff=0; 
+	len=strlen(str);
+	for (i=0;i<len; i++)
+	{
+		a=(uint8_t )str[i];
+		if (!(tess_buf[a].vbuf && tess_buf[a].pbuf))
+			_s3d_add_tessbuf(a);
+		xoff+=tess_buf[a].xoff;  /*  xoffset */
+	}
+	return(xoff);
+	
+}
 int s3d_ft_quit()
 {
 	_s3d_clear_tessbuf();

Modified: trunk/libs3d/s3d.h
===================================================================
--- trunk/libs3d/s3d.h	2006-10-31 16:08:26 UTC (rev 458)
+++ trunk/libs3d/s3d.h	2006-10-31 16:08:52 UTC (rev 459)
@@ -156,6 +156,7 @@
 int s3d_open_file(char *fname, char **pointer);
 int s3d_select_font(char *mask);
 int s3d_draw_string( char *str, float *xlen);
+float s3d_strlen( char *str);
 
 /* some vector calculation helpers */
 



From dotslash at mail.berlios.de  Tue Oct 31 17:09:09 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Tue, 31 Oct 2006 17:09:09 +0100
Subject: [S3d-svn] r460 - in trunk: . extras/swig
Message-ID: <200610311609.k9VG99as020932@sheep.berlios.de>

Author: dotslash
Date: 2006-10-31 17:09:09 +0100 (Tue, 31 Oct 2006)
New Revision: 460

Modified:
   trunk/
   trunk/extras/swig/s3d.i
Log:
 r1112 at kero:  dotslash | 2006-10-31 17:09:05 +0100
 - repair paths



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1110
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:1112

Modified: trunk/extras/swig/s3d.i
===================================================================
--- trunk/extras/swig/s3d.i	2006-10-31 16:08:52 UTC (rev 459)
+++ trunk/extras/swig/s3d.i	2006-10-31 16:09:09 UTC (rev 460)
@@ -16,5 +16,5 @@
 #include <s3d_keysym.h>
 %}
 
-%include "../libs3d/s3d.h"
-%include "../libs3d/s3d_keysym.h"
+%include "../../libs3d/s3d.h"
+%include "../../libs3d/s3d_keysym.h"



