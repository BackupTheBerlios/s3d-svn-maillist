From lazhur at mail.berlios.de  Mon Sep  1 00:19:21 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 1 Sep 2008 00:19:21 +0200
Subject: [S3d-svn] r980 - in trunk: Documentation Documentation/libs3d
	Documentation/libs3dw libs3d libs3dw
Message-ID: <200808312219.m7VMJLd4015599@sheep.berlios.de>

Author: lazhur
Date: 2008-09-01 00:19:18 +0200 (Mon, 01 Sep 2008)
New Revision: 980

Added:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/libs3d/structs.docbook
   trunk/Documentation/libs3d/typedefs.docbook
   trunk/Documentation/libs3dw/functions.docbook
   trunk/Documentation/libs3dw/structs.docbook
   trunk/Documentation/libs3dw/typedefs.docbook
   trunk/Documentation/xml.doxygen
Modified:
   trunk/Documentation/CMakeLists.txt
   trunk/Documentation/libs3d/libs3d.docbook
   trunk/Documentation/libs3dw/libs3dw.docbook
   trunk/Documentation/s3d.docbook
   trunk/libs3d/callback.c
   trunk/libs3d/event.c
   trunk/libs3d/freetype.c
   trunk/libs3d/io.c
   trunk/libs3d/modelread.c
   trunk/libs3d/network.c
   trunk/libs3d/proto_out.c
   trunk/libs3d/s3d.h
   trunk/libs3d/vector.c
   trunk/libs3dw/animate.c
   trunk/libs3dw/button.c
   trunk/libs3dw/event.c
   trunk/libs3dw/input.c
   trunk/libs3dw/label.c
   trunk/libs3dw/root.c
   trunk/libs3dw/s3dw.h
   trunk/libs3dw/surface.c
   trunk/libs3dw/textbox.c
   trunk/libs3dw/widget.c
Log:
Generate documentation from source code

Most updates of the documentation could automatically be done when we extract
the informations out of the source code. For this we need to insert the
detailed description of a function into a documentation block before the
function and let another tool extract them. For this purpose doxygen provided
a output plugin for xml which extracts as much information as possible for all
files and outputs all related informations in specific files. So we have
a s3d(w)_8h.xml with all informations to the public api functions in a
doxygen scheme. Another tool can now parse this xml data and transform it into
a partial docbook file with all functions.

Steps to be taken when generating an updated documentation are:
- $ doxygen xml.doxygen
- $ ./extractdefinitions.py
- running docbook2html as part of the normal build process

Currently only doxygen 1.5.6 and python 2.5.2 were tested and so these steps
should not be part of the normal build process.

To have the descriptions near to code should be lowering the barriers to update
them and results in a better overall documentation quality.

Modified: trunk/Documentation/CMakeLists.txt
===================================================================
--- trunk/Documentation/CMakeLists.txt	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/CMakeLists.txt	2008-08-31 22:19:18 UTC (rev 980)
@@ -14,7 +14,13 @@
 			${Documentation_SOURCE_DIR}/bookinfo.docbook
 			${Documentation_SOURCE_DIR}/server/server.docbook
 			${Documentation_SOURCE_DIR}/libs3dw/libs3dw.docbook
+			${Documentation_SOURCE_DIR}/libs3dw/functions.docbook
+			${Documentation_SOURCE_DIR}/libs3dw/structs.docbook
+			${Documentation_SOURCE_DIR}/libs3dw/typedefs.docbook
 			${Documentation_SOURCE_DIR}/libs3d/libs3d.docbook
+			${Documentation_SOURCE_DIR}/libs3d/functions.docbook
+			${Documentation_SOURCE_DIR}/libs3d/structs.docbook
+			${Documentation_SOURCE_DIR}/libs3d/typedefs.docbook
 		COMMENT "Build s3d documentation"
 	)
 

Added: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/extractdefinitions.py	2008-08-31 22:19:18 UTC (rev 980)
@@ -0,0 +1,406 @@
+#!/usr/bin/python
+# -*- coding: utf-8; -*-
+
+import xml.dom.minidom
+from xml.dom.minidom import Node
+import os
+
+class Callable:
+    def __init__(self, func):
+        self.__call__ = func
+
+def main():
+	print 'reading with "doxygen xml.doxygen" generated files'
+
+	libs3d = xml.dom.minidom.parse("xml/s3d_8h.xml")
+	libs3dw = xml.dom.minidom.parse("xml/s3dw_8h.xml")
+
+	libs3d_func = extract_functions(libs3d)
+	libs3dw_func = extract_functions(libs3dw)
+
+	libs3d_struct = extract_structs(libs3d)
+	libs3dw_struct = extract_structs(libs3dw)
+
+	libs3d_typedef = extract_typedefs(libs3d)
+	libs3dw_typedef = extract_typedefs(libs3dw)
+
+	docbook_functions.generate('libs3d', "s3d.h", libs3d_func)
+	docbook_functions.generate('libs3dw', "s3dw.h", libs3dw_func)
+
+	docbook_structs.generate('libs3d', libs3d_struct)
+	docbook_structs.generate('libs3dw', libs3dw_struct)
+
+	docbook_typedefs.generate('libs3d', libs3d_typedef)
+	docbook_typedefs.generate('libs3dw', libs3dw_typedef)
+
+"""
+Generate text from all childNodes
+"""
+def get_text(node):
+	t = ''
+	for node in node.childNodes:
+		if node.nodeType == Node.TEXT_NODE:
+			t += node.data
+		else:
+			t += get_text(node)
+	return t
+
+
+"""
+Generate linear list of text and section types
+"""
+def get_text_complex(node):
+	t = []
+	for node in node.childNodes:
+		if node.nodeType == Node.TEXT_NODE:
+			t.append(node.data)
+		else:
+			if node.nodeName == 'sp':
+				t.append(" ")
+			elif node.nodeName == 'para':
+				t.append({'type': 'para', 'text': ''})
+				t += get_text_complex(node)
+			elif node.nodeName == 'programlisting':
+				t.append({'type': 'programlisting', 'text': ''})
+				t += get_text_complex(node)
+				t.append({'type': 'para', 'text': ''})
+			elif node.nodeName == 'simplesect':
+				if node.attributes['kind'].nodeValue == 'remark':
+					t.append({'type': 'warning', 'text': ''})
+					t += get_text_complex(node)
+					t.append({'type': 'para', 'text': ''})
+				else:
+					t.append({'type': 'para', 'text': ''})
+					t += get_text_complex(node)
+			else:
+				t += get_text_complex(node)
+	return t
+
+"""
+Convert linear list of text and section types to list of section types with corresponding text
+"""
+def complex2simplearray(objects):
+	cur_object = 0
+	array = []
+	for element in objects:
+		if type(element) != dict:
+			# add text to last section type
+			if cur_object == 0:
+				array.append({'type': 'para', 'text': element})
+				cur_object = array[0]
+			else:
+				cur_object['text'] += element
+		else:
+			# add new section type
+			if element['type'] == 'para' and len(array) != 0 and array[-1]['type'] in ['warning']:
+				# ignore para inside warning and add text to last section type
+				cur_object['text'] += element['text']
+			else:
+				cur_object = element
+				array.append(element)
+
+	return array
+
+def remove_exportdefinitions(function_return):
+	exports = ["S3DEXPORT", "S3DWEXPORT"]
+	for export in exports:
+		if function_return[:len(export)] == export:
+			return function_return[len(export):].strip()
+
+"""
+Create new node with tag name node_type and add it to father
+"""
+def create_append(document, father, node_type):
+	t = document.createElement(node_type)
+	father.appendChild(t)
+	return t
+
+"""
+Create new text node with text and add it to father
+"""
+def create_append_text(document, father, text):
+	t = document.createTextNode(text)
+	father.appendChild(t)
+	return t
+
+"""
+Append complex help section to sect
+"""
+def help_append(sgml, sect, help):
+	for p in help:
+		if p['text'] != '':
+			if p['type'] in ['warning']:
+				# add para in warning before adding help text
+				extra_para = create_append(sgml, sect, p['type'])
+				para = create_append(sgml, extra_para, 'para')
+				create_append_text(sgml, para, p['text'])
+			else:
+				para = create_append(sgml, sect, p['type'])
+				create_append_text(sgml, para, p['text'])
+
+"""
+Extract function informations from doxygen dom
+"""
+def extract_functions(dom):
+	functionlist = []
+	for node in dom.getElementsByTagName("memberdef"):
+		# find nodes with functions information
+		if node.attributes['kind'].nodeValue != 'function':
+			continue
+
+		function = {'return': '', 'name': '', 'param': [], 'help': []}
+		for node2 in node.childNodes:
+			if node2.nodeName == "name":
+				function['name'] = get_text(node2)
+
+			if node2.nodeName == "type":
+				function['return'] = remove_exportdefinitions(get_text(node2))
+
+			if node2.nodeName == "param":
+				param = {'type' : '', 'declname' : '', 'array' : ''}
+				for n in node2.childNodes:
+					if n.nodeName == 'type':
+						param['type'] = get_text(n)
+
+					if n.nodeName == 'declname':
+						param['declname'] = get_text(n)
+
+					if n.nodeName == 'array':
+						param['array'] = get_text(n)
+
+				function['param'].append(param)
+
+			if node2.nodeName == 'detaileddescription':
+				help = get_text_complex(node2)
+				function['help'] = complex2simplearray(help)
+
+		functionlist.append(function)
+
+	return functionlist
+
+"""
+Extract struct informations from doxygen dom
+"""
+def extract_structs(dom):
+	structlist = []
+	# find refs (names of xml files) of structs
+	for node in dom.getElementsByTagName("innerclass"):
+		struct = {'name': '', 'ref': '', 'elements': [], 'help': []}
+		struct['name'] = get_text(node)
+		struct['ref'] = node.attributes['refid'].nodeValue
+		structlist.append(struct)
+
+	# open xml files and extract informations from them
+	for struct in structlist:
+		dom = xml.dom.minidom.parse("xml/"+struct['ref']+".xml")
+
+		for node in dom.getElementsByTagName('compounddef')[0].childNodes:
+			if node.nodeName == 'detaileddescription':
+				help = get_text_complex(node)
+				struct['help'] = complex2simplearray(help)
+
+		for node in dom.getElementsByTagName("memberdef"):
+			element = {'type': '', 'name' : '', 'help': []}
+			for node2 in node.childNodes:
+				if node2.nodeName == "name":
+					element['name'] = get_text(node2)
+
+				if node2.nodeName == "type":
+					element['type'] = get_text(node2)
+
+				if node2.nodeName == 'detaileddescription':
+					help = get_text_complex(node2)
+					element['help'] = complex2simplearray(help)
+
+			struct['elements'].append(element)
+
+	return structlist
+
+"""
+Extract typedef informations from doxygen dom
+"""
+def extract_typedefs(dom):
+	typedeflist = []
+	for node in dom.getElementsByTagName("memberdef"):
+		# find nodes with typedef information
+		if node.attributes['kind'].nodeValue != 'typedef':
+			continue
+
+		typedef = {'name': '', 'definition': '', 'help': []}
+		for node2 in node.childNodes:
+			if node2.nodeName == 'name':
+				typedef['name'] = get_text(node2)
+
+			if node2.nodeName == 'definition':
+				typedef['definition'] = get_text(node2)
+
+			if node2.nodeName == 'detaileddescription':
+				help = get_text_complex(node2)
+				typedef['help'] = complex2simplearray(help)
+
+		typedeflist.append(typedef)
+
+	return typedeflist
+
+class docbook_functions:
+	"""
+	Generate docbook file with informations to all functions
+	"""
+	def generate(name, synopsis, functionlist):
+		func_file = open(name+'/functions.docbook', "w")
+		for func in functionlist:
+			sgml = docbook_functions.generate_sgml(func, synopsis)
+			sgml.writexml(func_file)
+		func_file.close()
+
+	"""
+	Generate docbook sect2 dom with informations to a specific function
+	"""
+	def generate_sgml(function, synopsis):
+		sgml = xml.dom.minidom.Document()
+		sect2 = create_append(sgml, sgml, 'sect2')
+		sect2.setAttribute('id', function['name'])
+
+		title = create_append(sgml, sect2, 'title')
+		create_append_text(sgml, title, function['name'])
+
+		# synopsis
+		funcsynopsis = create_append(sgml, sect2, 'funcsynopsis')
+		funcsynopsisinfo = create_append(sgml, funcsynopsis, 'funcsynopsisinfo')
+		create_append_text(sgml, funcsynopsisinfo, "#include <"+synopsis+">")
+
+		# prototype
+		funcprototype = create_append(sgml, funcsynopsis, 'funcprototype')
+
+		funcdef = create_append(sgml, funcprototype, 'funcdef')
+		create_append_text(sgml, funcdef, function['return']+" ")
+
+		func = create_append(sgml, funcdef, 'function')
+		create_append_text(sgml, func, function['name'])
+
+		# add parameter to function definition
+		paramdef = create_append(sgml, funcprototype, 'paramdef')
+		param_num = len(function['param'])
+		for i in range(0, param_num):
+			if i != 0:
+				create_append_text(sgml, paramdef, ", ")
+
+			create_append_text(sgml, paramdef, function['param'][i]['type'])
+
+			if function['param'][i]['declname'] != '':
+				if function['param'][i]['type'][-1:] != "*":
+					# dont add space between * and name
+					create_append_text(sgml, paramdef, " ")
+				parameter = create_append(sgml, paramdef, 'parameter')
+				create_append_text(sgml, parameter, function['param'][i]['declname'])
+
+			if function['param'][i]['array'] != '':
+				create_append_text(sgml, paramdef, function['param'][i]['array'])
+
+		# add help to function
+		help_append(sgml, sect2, function['help'])
+
+		return sect2
+
+	# make functions "static"
+	generate = Callable(generate)
+	generate_sgml = Callable(generate_sgml)
+
+class docbook_structs:
+	"""
+	Generate docbook file with informations to all structs
+	"""
+	def generate(name, structlist):
+		struct_file = open(name+'/structs.docbook', "w")
+		for struct in structlist:
+			sgml = docbook_structs.generate_sgml(struct)
+			sgml.writexml(struct_file)
+		struct_file.close()
+
+	"""
+	Generate docbook sect2 dom with informations to a specific struct
+	"""
+	def generate_sgml(struct):
+		sgml = xml.dom.minidom.Document()
+		sect2 = create_append(sgml, sgml, 'sect2')
+		sect2.setAttribute('id', 'struct'+struct['name'])
+
+		title = create_append(sgml, sect2, 'title')
+		create_append_text(sgml, title, 'struct '+struct['name'])
+
+		# add definition of struct
+		programlisting = create_append(sgml, sect2, 'programlisting')
+		create_append_text(sgml, programlisting, 'struct '+struct['name']+' {\n')
+		for element in struct['elements']:
+			create_append_text(sgml, programlisting, '\t'+element['type'])
+			if element['type'][-1:] != "*":
+				# dont add space between * and name
+				create_append_text(sgml, programlisting, " ")
+			create_append_text(sgml, programlisting, element['name']+';\n')
+		create_append_text(sgml, programlisting, '}')
+
+		# add help to struct
+		help_append(sgml, sect2, struct['help'])
+
+		# add list of struct members with their help
+		variablelist = create_append(sgml, sect2, 'variablelist')
+		for element in struct['elements']:
+			# ignore members with empty help texts
+			if len(element['help']) == 1 and element['help'][0]['text'].strip() == '':
+				continue
+
+			varlistentry = create_append(sgml, variablelist, 'varlistentry')
+			term = create_append(sgml, varlistentry, 'term')
+			create_append_text(sgml, term, element['name'])
+			listitem = create_append(sgml, varlistentry, 'listitem')
+
+			# add help to struct member
+			help_append(sgml, listitem, element['help'])
+
+		# remove empty variablelist
+		if len(variablelist.childNodes) == 0:
+			sect2.removeChild(variablelist)
+
+		return sect2
+
+	# make functions "static"
+	generate = Callable(generate)
+	generate_sgml = Callable(generate_sgml)
+
+class docbook_typedefs:
+	"""
+	Generate docbook file with informations to all typedefs
+	"""
+	def generate(name, typedeflist):
+		typedef_file = open(name+'/typedefs.docbook', "w")
+		for typedef in typedeflist:
+			sgml = docbook_typedefs.generate_sgml(typedef)
+			sgml.writexml(typedef_file)
+		typedef_file.close()
+
+	"""
+	Generate docbook sect2 dom with informations to a specific typedef
+	"""
+	def generate_sgml(typedef):
+		sgml = xml.dom.minidom.Document()
+		sect2 = create_append(sgml, sgml, 'sect2')
+		sect2.setAttribute('id', typedef['name'])
+
+		title = create_append(sgml, sect2, 'title')
+		create_append_text(sgml, title, 'typedef '+typedef['name'])
+
+		# add definition of typedef
+		programlisting = create_append(sgml, sect2, 'programlisting')
+		create_append_text(sgml, programlisting, typedef['definition'])
+
+		# add help to typedef
+		help_append(sgml, sect2, typedef['help'])
+
+		return sect2
+
+	# make functions "static"
+	generate = Callable(generate)
+	generate_sgml = Callable(generate_sgml)
+
+if __name__ == '__main__':
+	main()


Property changes on: trunk/Documentation/extractdefinitions.py
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/libs3d/functions.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -0,0 +1,153 @@
+<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Prints the possible parameter for the client library (which can be passed in s3d_init())         </para></sect2><sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter>, char ***<parameter>argv</parameter>, const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
+ {
+         if (!s3d_init(&amp;argc, &amp;argv, &quot;Hello world&quot;))
+         {
+                 ...
+                 s3d_quit();
+         }
+         return(0);
+ }
+</programlisting><para>         </para></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
+</para><para>closes the connection and cleares the event-stack. it can also be used to leave the s3d_mainloop().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>takes a function as argument. it will loop this function until a quit-event is received. you can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
+ {
+         usleep(1000); // sleep 1 ms in every cycle
+ }
+ ...
+
+ s3d_mainloop(mainloop());
+</programlisting><para>         </para></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>vbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
+                      1.0, 2.0, 3.0,
+                      3.0, 2.0, 1.0};
+ s3d_push_vertices(object, vertices, 3); // pushing 3 vertices
+</programlisting><para>         </para></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. the specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <param!
 eter>spec_b</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>amb_a</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>spec_a</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter>, float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
+</para><para>mbuf[n*12 + 0-3] - ambience</para><para>mbuf[n*12 + 4-7] - specular</para><para>mbuf[n *12 + 8-11] - diffusion values
+</para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy s3d_push_material_a() function.</para><programlisting> // each line has r,g,b,a value
+ float bla[24]=
+         {1, 0, 0, 1,
+          1, 0, 0, 1,
+          1, 0, 0, 1,
+          0, 1, 1, 1,
+          0, 1, 1, 1,
+          0, 1, 1, 1};
+
+ s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material
+</programlisting><para>         </para></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>amb_a</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>spec_a</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter>, float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.         </para></sect2><sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>v1</parameter>, uint32_t <parameter>v2</parameter>, uint32_t <parameter>v3</parameter>, uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = s3d_new_object();   // create a new object
+ s3d_push_vertex(oid, 0.0, 0.0, 0.0);
+ s3d_push_vertex(oid, 0.0, 1.0, 0.0);
+ s3d_push_vertex(oid, 1.0, 0.0, 0.0);
+ s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
+ s3d_push_polygon(oid, 0, 1, 2, 0);
+ // this will create a red polygon
+</programlisting><para>         </para></sect2><sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>pbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
+ int oid = s3d_new_object();   // create a new object
+ s3d_push_vertex(oid, 0.0, 0.0, 0.0);
+ s3d_push_vertex(oid, 0.0, 1.0, 0.0);
+ s3d_push_vertex(oid, 1.0, 0.0, 0.0);
+ s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
+ s3d_push_polygons(oid, pbuf, 1);
+ // push one polygon with the pbuf data
+</programlisting><para>         </para></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>v1</parameter>, uint32_t <parameter>v2</parameter>, uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>lbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint16_t <parameter>w</parameter>, uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter>, const uint16_t *<parameter>tbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in Total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x1</parameter>, float <parameter>y1</parameter>, float <parameter>x2</parameter>, float <parameter>y2</parame!
 ter>, float <parameter>x3</parameter>, float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>tbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()         </para></sect2><sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>vbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter>, int <parameter>v1</parameter>, int <parameter>v2</parameter>, int <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Alter the latest pushed line, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>lbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>tbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>tex</parameter>, uint16_t <parameter>xpos</parameter>, uint16_t <parameter>ypos</parameter>, uint16_t <parameter>w</parameter>, uint16_t <parameter>h</parameter>, const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2><sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter>, int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter>, int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&quot; if you move the table around in space. It will also rotate with the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
+        </para></warning></sect2><sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>turn some flags off for object.         </para></sect2><sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.</para><warning><para>Translation is absolute, not relative!
+</para></warning><programlisting> s3d_translate(object, 2, 0, 0);
+ s3d_translate(object, 4, 0, 0);
+ // object will end up at 4,0,0 and not 6,0,0!!
+</programlisting><para>         </para></sect2><sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes it any clearer ;)</para><warning><para>Rotate is absolute, not relative!
+</para></warning><programlisting> s3d_rotate(object, 90,  0, 0);
+ s3d_rotate(object, 180, 0, 0);
+ // object will be rotated 180 degrees around the x-axis, not 270 degress!
+</programlisting><para>         </para></sect2><sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative! 
+        </para></warning></sect2><sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2><sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter>, char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2><sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>This selects a font for the s3d_draw_string() function.</para><warning><para>Of course, you won't forget to toggle it visible, won't you?
+</para></warning><programlisting> s3d_select_font(&quot;vera&quot;); // will use the vera font face
+</programlisting><para>         </para></sect2><sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter>, float *<parameter>xlen</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
+ float len;
+ s3d_select_font(&quot;vera&quot;);
+ s3d_draw_string(str, len);
+
+ // not interested in the length? do that: s3d_draw_string(str, NULL);
+</programlisting><para>         </para></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[], float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[], const float <parameter>cam_pos</parameter>[], float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[], float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter>, s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling s3d_init()
+</para></warning><programlisting> #include &lt;inttypes.h&gt;
+
+ void obj_click(struct s3d_evt event)
+ {
+         printf(&quot;object id %&quot;PRIu32&quot; got clicked&quot;, *((uint32_t *)event-&gt;buf));
+ }
+ ...
+ s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click);
+ // this will tell you when a object got clicked
+</programlisting><para>         </para></sect2><sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Clears the callback which is associated with the event.         </para></sect2><sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2><sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Returns the Callback-function of the event.</para><programlisting> struct s3d_evt e;
+ ...
+ s3d_get_callback(S3D_EVENT_KEY)(e);
+ // will call the key-handling function with argument e.
+</programlisting><para>         </para></sect2><sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
+</para><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2><sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.         </para></sect2><sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
+</para><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3d/libs3d.docbook
===================================================================
--- trunk/Documentation/libs3d/libs3d.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/libs3d/libs3d.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -41,1499 +41,15 @@
 <sect1 id="functions">
 <title>function reference</title>
 
-<sect2 id="s3d_init">
-<title>s3d_init</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_init</function></funcdef>
-<paramdef>int *<parameter>argc</parameter>,
-char ***<parameter>argv</parameter>,
-const char *<parameter>name</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-This will initialize the <application>s3d</application>-library and the connection to the Server. It will return 0 on
-success in Server initializion. name specifies the your programs name.
-</para>
-<programlisting>
-int main(char argc, char **argv)
-{
-	if (!<emphasis>s3d_init(<![CDATA[&argc, &argv]]>, "Hello world")</emphasis>) 
-	{
-		...
-		<link linkend="s3d_quit">s3d_quit()</link>;
-	}
-	return(0);
-}
-			   
-</programlisting>
-</sect2>
-
-
-<sect2 id="s3d_quit">
-<title>s3d_quit</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_quit</function></funcdef>
-<paramdef>void</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-closes the connection and cleares the event-stack. it can also be used to leave
-the <link linkend="s3d_mainloop">s3d_mainloop</link>.
-</para>
-</sect2>
-
-<sect2 id="s3d_usage">
-<title>s3d_usage</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3d_usage</function></funcdef>
-<paramdef>void</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Prints the possible parameter for the client library (which can be passed in 
-<link linkend="s3d_init">s3d_init()</link>)
-</para>
-</sect2>
-
-<sect2 id="s3d_mainloop">
-<title>s3d_mainloop</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_mainloop</function></funcdef>
-<paramdef>void (*<parameter>f</parameter>)(void)</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-takes a function as argument. it will loop this function until a quit-event is
-received. you can pass NULL if you have no function to be looped, but its
-better to sleep some time if you have nothing to do anyway to save cpu-time.
-</para>
-<programlisting>
-void mainloop()
-{
-    usleep(1000); // sleep 1 ms in every cycle
-}
-...
-
-<emphasis>s3d_mainloop</emphasis>(mainloop());
-
-</programlisting>
-</sect2>
-
-
-<sect2 id="s3d_push_vertex">
-<title>s3d_push_vertex</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_vertex</function></funcdef>
-<paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-pushes a vertex onto the vertex stack. make sure that you count how many
-vertices you've pushed because you'll need that for referencing when you push
-your polygons.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_push_vertices</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_vertices</function></funcdef>
-<paramdef>int <parameter>object</parameter>, const float *<parameter>vbuf</parameter>, uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-push some vertices from an array. that's much better for performing than
-using <link linkend="s3d_push_vertex">s3d_push_vertex()</link> if you have a lot of vertices (and that's probably the
-usual case).
-</para>
-<programlisting>
-float vertices[] = { 0.0, 0.0, 0.0,
-                     1.0, 2.0, 3.0,
-                     3.0, 2.0, 1.0};
-<emphasis>s3d_push_vertices</emphasis>(object, vertices, 3); /* pushing 3 vertices */
-</programlisting>
-</sect2>
-
-
-<sect2 id="s3d_push_material">
-<title>s3d_push_material</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_material</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-float <parameter>amb_r</parameter>,
-float <parameter>amb_g</parameter>,
-float <parameter>amb_b</parameter>,
-float <parameter>spec_r</parameter>,
-float <parameter>spec_g</parameter>,
-float <parameter>spec_b</parameter>,
-float <parameter>diff_r</parameter>,
-float <parameter>diff_g</parameter>,
-float <parameter>diff_b</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-pushes a material for an object. you will have to count them yourself too, as
-polygons will ask for the material index number. the material properties are
-given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum,
-1.0 is the maximum a color value can be.
-the specular color is the color which is directly reflected from the light
-source. the diffuse color is the color which can be seen in the bright side
-of the object, and the ambience color is the color of the shadow side of the
-object.
-</para>
-</sect2>
-
-<sect2 id="s3d_push_material_a">
-<title>s3d_push_material_a</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_material_a</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-float <parameter>amb_r</parameter>,
-float <parameter>amb_g</parameter>,
-float <parameter>amb_b</parameter>,
-float <parameter>amb_a</parameter>,
-float <parameter>spec_r</parameter>,
-float <parameter>spec_g</parameter>,
-float <parameter>spec_b</parameter>,
-float <parameter>spec_a</parameter>,
-float <parameter>diff_r</parameter>,
-float <parameter>diff_g</parameter>,
-float <parameter>diff_b</parameter>,
-float <parameter>diff_a</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Same as <link linkend="s3d_push_material">s3d_push_material</link>, but color has <link linkend="alpha">alpha value</link> added.
-Use <link linkend="s3d_push_materials_a">s3d_push_materials_a()</link> if you have a lot of materials to push.
-</para>
-</sect2>
-
-
-<sect2 id="s3d_push_materials_a">
-<title>s3d_push_materials_a</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_materials_a</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>mbuf</parameter>, 
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
-<itemizedlist>
-<listitem><para>mbuf[n*12 + 0-3] - ambience</para></listitem>
-<listitem><para>mbuf[n*12 + 4-7] - specular</para></listitem>
-<listitem><para>mbuf[n *12 + 8-11] - diffusion values </para></listitem>
-</itemizedlist>
-of each entry. n is the number of materials pushed. The values are in the order r,g,b,a.
-If you only want to push one material, use the more easy <link linkend="s3d_push_material_a">s3d_push_material_a()</link>
-function.
-</para>
-<programlisting>
-/* each line has r,g,b,a value */
-float bla[24]=
-	{1, 0, 0, 1,
-	 1, 0, 0, 1,
-	 1, 0, 0, 1,
-	 0, 1, 1, 1,
-	 0, 1, 1, 1,
-	 0, 1, 1, 1};
-
-s3d_push_materials_a(object, mbuf, 2); /* push a red and a cyan material */
-</programlisting>
-</sect2>
-
-
-
-<sect2>
-<title>s3d_push_polygon</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_polygon</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>v1</parameter>,
-uint32_t <parameter>v2</parameter>,
-uint32_t <parameter>v3</parameter>,
-uint32_t <parameter>material</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-push one polygon on the polygonstack of the object. it takes 3 vertex-index-
-numbers and one material material-index-nr. as argument.
-</para>
-<programlisting>
-int oid=<link linkend="s3d_new_object">s3d_new_object</link>();   /* create a new object */
-<link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
-<link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
-<link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 1.0, 0.0, 0.0);
-<link linkend="s3d_push_material">s3d_push_material</link>(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
-<emphasis>s3d_push_polygon</emphasis>(oid, 0, 1, 2, 0);
-/* this will create a red polygon */
-</programlisting>
-</sect2>
-
-
-<sect2>
-<title>s3d_push_polygons</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_polygons</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const uint32_t *<parameter>pbuf</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-as for vertices, you can push arrays of polygons to have greater performance.
-the pbuf should contain n polygons which consist of 4 uint32_t values
-of 3 vertices indices and 1 material index.
-</para>
-<programlisting>
-uint32_t pbuf[] = { 0, 1, 2, 0};
-int oid=<link linkend="s3d_new_object">s3d_new_object</link>();   /* create a new object */
-<link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
-<link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
-<link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 1.0, 0.0, 0.0);
-<link linkend="s3d_push_material">s3d_push_material</link>(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
-<emphasis>s3d_push_polygons</emphasis>(oid, pbuf, 1);
-/* push one polygon with the pbuf data */
-</programlisting>
-</sect2>
-
-
-<sect2 id="s3d_push_line">
-<title>s3d_push_line</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_line</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>v1</parameter>,
-uint32_t <parameter>v2</parameter>,
-uint32_t <parameter>material</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Push one line on the linestack of the object. It takes 2 vertex-index-
-numbers and one material material-index-nr. as argument. If you have
-a lot of lines to push, use <link linkend="s3d_push_lines">s3d_push_lines()</link>
-</para>
-</sect2>
-
-<sect2 id="s3d_push_lines">
-<title>s3d_push_lines</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_lines</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const uint32_t *<parameter>lbuf</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Pushing n lines on the linestack of the object, each lbuf has a size of n*3,
-each entry has the index number of the first vertex, second vertex and material number just
-as in <link linkend="s3d_push_line">s3d_push_line()</link>.
-</para>
-</sect2>
-
-<sect2 id="s3d_push_texture">
-<title>s3d_push_texture</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_texture</function></funcdef>
-<paramdef>int <parameter>object</parameter>,
-uint16_t <parameter>w</parameter>,
-uint16_t <parameter>h</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Adds a new texture with height w and height h on the texturestack.
-</para>
-</sect2>
-
-<sect2>
-<title>s3d_push_textures</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_push_textures</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const uint16_t *<parameter>tbuf</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-As for vertices, you can push arrays of textures on the texture stack 
-to have greater performance.
-The tbuf should contain n texture sizes which consist of 2 uint16_t values
-for width and height for each texture. 
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_pop_vertex</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pop_vertex</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Deletes the latest n vertices from the vertex stack of the object.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_pop_polygon</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pop_polygon</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Deletes the latest n polygon from the polygon stack of the object.
-</para>
-</sect2>
-
-
-
-<sect2>
-<title>s3d_pop_material</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pop_material</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Deletes the latest n material from the material stack of the object.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_pop_texture</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pop_texture</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Deletes the latest n textures from the texture stack of the object.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_pop_line</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pop_line</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Deletes the latest n lines from the line stack of the object.
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_polygon_normals">
-<title>s3d_pep_polygon_normals</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_polygon_normals</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>nbuf</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can
-achieve smoothed edge effects. 
-</para>
-<para>
-nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 
-3 Vertices for each Polygon so that makes 9 float values per Polygon in Total.	
-Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some
-proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_polygon_tex_coord">
-<title>s3d_pep_polygon_tex_coord</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-float <parameter>x1</parameter>, 
-float <parameter>y1</parameter>, 
-float <parameter>x2</parameter>, 
-float <parameter>y2</parameter>, 
-float <parameter>x3</parameter>, 
-float <parameter>y3</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively.
-Those values may be between 0 and 1 and are vertex points on the <link linkend="s3d_pep_material_texture">
-texture defined in the material</link> of the polygon. If you have more polygons which should get a texture, use
-<link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords()</link>
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_polygon_tex_coords">
-<title>s3d_pep_polygon_tex_coords</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>tbuf</parameter>, 
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order
-as in <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord()</link>
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_material_texture">
-<title>s3d_pep_material_texture</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_material_texture</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>tex</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Assign the latest material a texture referenced by the index tex. Of course, you will
-have pushed this texture with <link linkend="s3d_push_texture">s3d_push_texture</link>
-</para>
-</sect2>
-
-
-<sect2 id="s3d_pep_vertex">
-<title>s3d_pep_vertex</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_vertex</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-float <parameter>x</parameter>,
-float <parameter>y</parameter>,
-float <parameter>z</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Alter the latest pushed vertex, overwriting with the supplied values.
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_vertices">
-<title>s3d_pep_vertices</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_vertices</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>vbuf</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Alter the latest n pushed vertex. vbuf holds the values which
-are used to overwrite the old data, n entries with each 3 floats
-specifying x,y,z of the vertices.
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_line">
-<title>s3d_pep_line</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_line</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-int <parameter>v1</parameter>,
-int <parameter>v2</parameter>,
-int <parameter>material</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Alter the latest pushed line, overwriting with the supplied values.
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_lines">
-<title>s3d_pep_lines</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_lines</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const uint32_t *<parameter>lbuf</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Alter the latest n pushed lines. lbuf holds the values which
-are used to overwrite the old data, n entries with each 3 uint32_t
-specifying first, second vertex and material of each line.
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_line_normals">
-<title>s3d_pep_line_normals</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_line_normals</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>nbuf</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Adds normal information to lines, giving each vertex of a line a normal information. This makes 
-lines somewhat nicer, you'll need that especially when you're going to build wireframe models.
-</para>
-<para>
-nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 
-2 Vertices for each line so that makes 6 float values per line in Total.	
-</para>
-</sect2>
-
-<sect2 id="s3d_load_line_normals">
-<title>s3d_load_line_normals</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_load_line_normals</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>nbuf</parameter>,
-uint32_t <parameter>start</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Just as <link linkend="s3d_pep_line_normals">s3d_pep_line_normals()</link>, with the difference you won't alter 
-the latest n lines but n lines starting with index start.
-</para>
-</sect2>
-
-
-<sect2 id="s3d_pep_material">
-<title>s3d_pep_material</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_material</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-float <parameter>amb_r</parameter>,
-float <parameter>amb_g</parameter>,
-float <parameter>amb_b</parameter>,
-float <parameter>spec_r</parameter>,
-float <parameter>spec_g</parameter>,
-float <parameter>spec_b</parameter>,
-float <parameter>diff_r</parameter>,
-float <parameter>diff_g</parameter>,
-float <parameter>diff_b</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Overwriting the latest pushed Material, overwriting the current value with the specified one.
-See <link linkend="s3d_pep_materials_a">s3d_pep_materials_a</link> if you want to pep more materials.
-</para>
-</sect2>
-
-
-
-<sect2 id="s3d_pep_material_a">
-<title>s3d_pep_material_a</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_material_a</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-float <parameter>amb_r</parameter>,
-float <parameter>amb_g</parameter>,
-float <parameter>amb_b</parameter>,
-float <parameter>amb_a</parameter>,
-float <parameter>spec_r</parameter>,
-float <parameter>spec_g</parameter>,
-float <parameter>spec_b</parameter>,
-float <parameter>spec_a</parameter>,
-float <parameter>diff_r</parameter>,
-float <parameter>diff_g</parameter>,
-float <parameter>diff_b</parameter>,
-float <parameter>diff_a</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Overwriting the latest pushed Material, overwriting the current value with the specified one, with 
-<link linkend="alpha">alpha value</link> in contrast to <link linkend="s3d_pep_material">s3d_pep_material</link>
-See <link linkend="s3d_pep_materials_a">s3d_push_materials_a</link> if you want to pep more materials.
-</para>
-</sect2>
-
-<sect2 id="s3d_pep_materials_a">
-<title>s3d_pep_materials_a</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_pep_materials_a</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>mbuf</parameter>, 
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Alters the last n pushed Materials. See <link linkend="s3d_push_materials_a">s3d_push_materials_a()</link> for
-more information how mbuf should look like. Use <link linkend="s3d_pep_material_a">s3d_pep_material_a()</link>
-if you only want to alter the latest material.
-</para>
-</sect2>
-
-<sect2 id="s3d_load_materials_a">
-<title>s3d_load_materials_a</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_load_materials_a</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>mbuf</parameter>,
-uint32_t <parameter>start</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Loads n materials starting from index position start into the Material stack.
-See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> for more informatino about the values in mbuf.
-</para>
-</sect2>
-
-
-
-<sect2 id="s3d_load_polygon_normals">
-<title>s3d_load_polygon_normals</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_load_polygon_normals</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>nbuf</parameter>,
-uint32_t <parameter>start</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Just as <link linkend="s3d_pep_polygon_normals">s3d_pep_polygon_normals()</link>, with the difference you won't alter 
-the latest n polygons but n polygons starting with index start.
-</para>
-</sect2>
-
-
-<sect2 id="s3d_load_polygon_tex_coords">
-<title>s3d_load_polygon_tex_coords</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-const float *<parameter>tbuf</parameter>, 
-uint32_t <parameter>start</parameter>,
-uint16_t <parameter>n</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Just as <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords()</link>, with the difference you won't alter 
-the latest n polygons but n polygons starting with index start.
-</para>
-</sect2>
-
-<sect2 id="s3d_load_texture">
-<title>s3d_load_texture</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_load_texture</function></funcdef>
-<paramdef>int <parameter>object</parameter>, 
-uint32_t <parameter>tex</parameter>,
-uint16_t <parameter>xpos</parameter>,
-uint16_t <parameter>ypos</parameter>,
-uint16_t <parameter>w</parameter>,
-uint16_t <parameter>h</parameter>,
-const uint8_t *<parameter>data</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-This will load an 32bit rgba image supplied in data at position xpos,ypos of the texture tex. The image has
-the width w and height h. This can be used to update only parts of the texture. It's no problem to supply big textures,
-as the image will be sent to server in fragments. Of course, you will have created the texture with 
-<link linkend="s3d_push_texture">s3d_push_texture</link>, have an material assigned to the texture with <link linkend="s3d_pep_material_texture">
-s3d_pep_material_texture()</link> and have your polygons set sane polygon texture coords 
-using <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord()</link>.
-</para>
-</sect2>
-
-
-<sect2 id="s3d_new_object">
-<title>s3d_new_object</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_new_object</function></funcdef>
-<paramdef>void</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Creates a new object, returning the object id.
-<warning><para>Of course, you won't forget to <link linkend="s3d_flags_on">toggle</link> it <link linkend="S3D_OF_VISIBLE">visible</link>, won't you?</para></warning>
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_del_object</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_del_object</function></funcdef>
-<paramdef>int <parameter>oid</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Deletes the object referenced by oid.
-</para>
-</sect2>
-
-
-<sect2 id="s3d_clone">
-<title>s3d_clone</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_clone</function></funcdef>
-<paramdef>int <parameter>oid</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Clones an already exisiting object. They get just look the same as the
-parent-object and will change when the parent-object changes.
-Cloning especially makes sense if you want to use the same object a lot of
-times. Move and transform is independent from the parent.
-The function returns the childs object id.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_clone_target</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_clone_target</function></funcdef>
-<paramdef>int <parameter>oid</parameter>,
-int <parameter>toid</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Changes the clone target of oid to another object (toid). This assumes you've got
-oid from <link linkend="s3d_clone">s3d_clone</link> before.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_link</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_link</function></funcdef>
-<paramdef>int <parameter>oid_from</parameter>,
-int <parameter>oid_to</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-A linked object will move along with it's link parent. For example if you have
-a book on a table, you can link the book to the table so the book will 
-"keep on the table" if you move the table around in space.
-It will also rotate with the table etc.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_unlink</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_unlink</function></funcdef>
-<paramdef>int <parameter>oid</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Remove the link of object oid to its target.
-</para>
-</sect2>
-
-<sect2 id="s3d_import_model_file">
-<title>s3d_import_model_file</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_import_model_file</function></funcdef>
-<paramdef>const char *<parameter>fname</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3),
-		or simply everything <ulink url="http://automagically.de/?g3dviewer">libg3d</ulink> supports. :)
-</para>
-<warning><para>Of course, you won't forget to <link linkend="s3d_flags_on">toggle</link> it <link linkend="S3D_OF_VISIBLE">visible</link>, won't you?</para></warning>
-</sect2>
-
-
-<sect2 id="s3d_select_font">
-<title>s3d_select_font</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_select_font</function></funcdef>
-<paramdef>const char *<parameter>mask</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-This selects a font for the <link linkend="s3d_draw_string">s3d_draw_string()</link> function.
-</para>
-<warning><para>Of course, you won't forget to <link linkend="s3d_flags_on">toggle</link> it <link linkend="S3D_OF_VISIBLE">visible</link>, won't you?</para></warning>
-<programlisting>
-    s3d_select_font("vera"); /* will use the vera font face */
-</programlisting>
-</sect2>
-
-
-<sect2 id="s3d_draw_string">
-<title>s3d_draw_string</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_draw_string</function></funcdef>
-<paramdef>const char *<parameter>str</parameter>,
-float *<parameter>xlen</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Renders the string str with in Truetype format with the height 1, returns
-the length of the rendered string in *xlen (or set len=NULL to disable this).
-
-</para>
-<programlisting>
-	char str="hello world!";
-	float len;
-	<link linkend="s3d_select_font">s3d_select_font</link>("vera");
-	<emphasis>s3d_draw_string</emphasis>(str, len);
-
-	/* not interested in the length? do that:
-	 * <emphasis>s3d_draw_string</emphasis>(str, NULL); */
-</programlisting>
-</sect2>
-
-<sect2 id="s3d_strlen">
-<title>s3d_strlen</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>float <function>s3d_strlen</function></funcdef>
-<paramdef>const char *<parameter>str</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Returns the length of the string if it were rendered with the currently <link linkend="s3d_select_font">selected font</link>.
-		That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.
-
-</para>
-</sect2>
-
-<sect2>
-<title>s3d_open_file</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_open_file</function></funcdef>
-<paramdef>const char *<parameter>fname</parameter>,
-char **<parameter>pointer</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-This opens the file fname, setting *pointer to it's memory position. the
-function will return the size of buffer. you can free() the pointer when
-you're finished.
-</para>
-</sect2>
-
-
-
-<sect2 id="s3d_flags_on">
-<title>s3d_flags_on</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_flags_on</function></funcdef>
-<paramdef>int <parameter>object</parameter>,
-uint32_t <parameter>flags</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-turn some flags on for object.
-</para>
-<warning><para>if you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. 
-(at least after you *push()d all your content)</para></warning>
-</sect2>
-
-<sect2 id="s3d_flags_off">
-<title>s3d_flags_off</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_flags_off</function></funcdef>
-<paramdef>int <parameter>object</parameter>,
-uint32_t <parameter>flags</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-turn some flags off for object.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_translate</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_translate</function></funcdef>
-<paramdef>int <parameter>object</parameter>,
-float <parameter>x</parameter>,
-float <parameter>y</parameter>,
-float <parameter>z</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Move the object to some position in space. when you create an object, it's 
-always located at 0.0 , 0.0, 0.0.
-</para>
-<important><para>Translation is absolute, not relative!</para></important>
-<programlisting>
-<emphasis>s3d_translate</emphasis>(object, 2, 0, 0);
-<emphasis>s3d_translate</emphasis>(object, 4, 0, 0);
-/* object will end up at 4,0,0 and not 6,0,0!! */
-</programlisting>
-</sect2>
-
-
-<sect2>
-<title>s3d_rotate</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_rotate</function></funcdef>
-<paramdef>int <parameter>object</parameter>,
-float <parameter>x</parameter>,
-float <parameter>y</parameter>,
-float <parameter>z</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-rotate an object around the x, y and z-axis respectively. x,y,z may have values
-between [0,360] degrees. 
-</para>
-<para>
-You will usually only rotate around one axis, leaving the unused fields on 0, I guess. 
-If you want to rotate around more than one axis, please note: The order of the rotation
-applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates:
-x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your
-bodies axis. (I wonder if that makes it any clearer ;)
-</para>
-<important><para>Rotate is absolute, not relative!</para></important>
-<programlisting>
-<emphasis>s3d_rotate</emphasis>(object, 90,  0, 0);
-<emphasis>s3d_rotate</emphasis>(object, 180, 0, 0);
-/* object will be rotated 180 degrees around the x-axis, not 270 degress! */
-</programlisting>
-</sect2>
-
-
-<sect2>
-<title>s3d_scale</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_scale</function></funcdef>
-<paramdef>int <parameter>object</parameter>,
-float <parameter>s</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.
-</para>
-<important><para>s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative!</para></important>
-</sect2>
-
-<sect2>
-<title>s3d_push_event</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3d_push_event</function></funcdef>
-<paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Pushes an <link linkend="s3d_evt">event</link> onto the event-stack. Usually you don't need to do this manually.
-</para>
-</sect2>
-
-<sect2>
-<title>s3d_pop_event</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>struct s3d_evt *<function>s3d_pop_event</function></funcdef>
-<paramdef>void</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Pops the latest event from the stack. Don't forget to free() both the event
-and its buffer! Returns a pointer to <link linkend="s3d_evt">struct s3d_evt</link>.
-</para>
-</sect2>
-
-<sect2 id="s3d_find_event">
-<title>s3d_find_event</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>struct s3d_evt *<function>s3d_find_event</function></funcdef>
-<paramdef>uint8_t <parameter>event</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Finds the latest occurence of an event, giving the event type as argument.
-Returns a pointer to <link linkend="s3d_evt">struct s3d_evt</link>.
-</para>
-</sect2>
-
-<sect2>
-<title>s3d_delete_event</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_delete_event</function></funcdef>
-<paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-deletes an event, the argument is the pointer to the <link linkend="s3d_evt">event</link> which is to be 
-deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).
-</para>
-</sect2>
-
-<sect2 id="s3d_set_callback">
-<title>s3d_set_callback</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3d_set_callback</function></funcdef>
-<paramdef>uint8_t <parameter>event</parameter>,
-s3d_cb <parameter>func</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-sets a <link linkend="s3d_cb">callback</link> for a certain event. this is very useful for event-oriented 
-applications. event callbacks will not interrupt each other or the mainloop.
-</para>
-<important><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init()</link></para></important>
-<programlisting>
- <![CDATA[#include <inttypes.h>]]>
-
-void obj_click(<link linkend="s3d_evt">struct s3d_evt</link> event)
-{
-	printf("object id %"PRIu32" got clicked", *((uint32_t *)event->buf));
-}
-...
-	<link linkend="s3d_set_callback">s3d_set_callback</link>(<link linkend="S3D_EVENT_NEW_OBJECT">S3D_EVENT_NEW_OBJECT</link>, obj_click);
-
-/* this will tell you when a object got clicked */
-</programlisting>
-</sect2>
-
-
-<sect2>
-<title>s3d_ignore_callback</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3d_ignore_callback</function></funcdef>
-<paramdef>uint8_t <parameter>event</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Sets the callback on ignore, that means it won't be queued up for later use.
-An incoming event of this type will simply be skipped.
-
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_clear_callback</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3d_clear_callback</function></funcdef>
-<paramdef>uint8_t <parameter>event</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Clears the callback which is associated with the event.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_get_callback</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>s3d_cb <function>s3d_get_callback</function></funcdef>
-<paramdef>uint8_t <parameter>event</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Returns the <link linkend="s3d_cb">Callback-function</link> of the event.
-</para>
-<programlisting>
-	<link linkend="s3d_evt">struct s3d_evt</link> e;
-	...
-	<emphasis>s3d_get_callback</emphasis>(<link linkend="S3D_EVENT_KEY">S3D_EVENT_KEY</link>)(e);
-	/* will call the key-handling function with argument e.  */
-
-</programlisting>
-</sect2>
-
-
-<sect2>
-<title>s3d_process_stack</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3d_process_stack</function></funcdef>
-<paramdef>void</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-This function goes through all function of the event-stack and will call 
-functions. this is useful when you define a new function but still have a lot 
-of events of this type on the stack. 
-</para>
-<note><para>This is probably obsolete</para></note>
-</sect2>
-
-<sect2>
-<title>s3d_vector_length</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>float <function>s3d_vector_length</function></funcdef>
-<paramdef>const float <parameter>vector</parameter>[]</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Calculates and returns the length of the given vector (which should be of the type float[3]).
-More info <ulink url="http://en.wikipedia.org/wiki/Vector_%28spatial%29#Length_of_a_vector">on wikipedia</ulink>.
-</para>
-</sect2>
-
-<sect2>
-<title>s3d_vector_subtract</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3d_vector_subtract</function></funcdef>
-<paramdef>const float <parameter>vector1</parameter>[],
-const float <parameter>vector2</parameter>[],
-float <parameter>result_vector</parameter>[]</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Subtracts vector1 from vector2, writing result into result_vector.
-All vectors should have the format  float[3].
-More info <ulink url="http://en.wikipedia.org/wiki/Vector_%28spatial%29#Vector_addition_and_subtraction">on wikipedia</ulink>.
-</para>
-</sect2>
-
-<sect2>
-<title>s3d_vector_dot_product</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>float <function>s3d_vector_dot_product</function></funcdef>
-<paramdef>const float <parameter>vector1</parameter>[],
-const float <parameter>vector2</parameter>[]</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Calculates and returns the dot product of vector1 and vector2.
-All vectors should have the format  float[3].
-More info <ulink url="http://en.wikipedia.org/wiki/Vector_%28spatial%29#Dot_product">on wikipedia</ulink>.
-</para>
-</sect2>
-
-<sect2>
-<title>s3d_vector_cross_product</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3d_vector_cross_product</function></funcdef>
-<paramdef>const float <parameter>vector1</parameter>[],
-const float <parameter>vector2</parameter>[],
-float <parameter>result_vector</parameter>[]</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Calculates and returns the cross product of vector1 and vector2.
-All vectors should have the format  float[3].
-More info <ulink url="http://en.wikipedia.org/wiki/Vector_%28spatial%29#Cross_product">on wikipedia</ulink>.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_vector_angle</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>float <function>s3d_vector_angle</function></funcdef>
-<paramdef>const float <parameter>vector1</parameter>[],
-const float <parameter>vector2</parameter>[]</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI.
-All vectors should have the format  float[3].
-More info <ulink url="http://en.wikipedia.org/wiki/Vector_%28spatial%29#Dot_product">on wikipedia</ulink>.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_angle_to_cam</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>float <function>s3d_angle_to_cam</function></funcdef>
-<paramdef>const float <parameter>obj_pos</parameter>[],
-const float <parameter>cam_pos</parameter>[],
-float *<parameter>angle_rad</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis
-so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera.
-</para>
-</sect2>
-
-
-<sect2>
-<title>s3d_mcp_focus</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_mcp_focus</function></funcdef>
-<paramdef>int <parameter>object</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-This is an mcp-only function. It gives focus (for receiving key-strokes etc.)
-to an app referenced by it's mcp-object-id. 
-</para>
-</sect2>
-
-<sect2>
-<title>s3d_net_check</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3d.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3d_net_check</function></funcdef>
-<paramdef>void</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		This functions is for programs which do not employ a mainloop, hence they need to check
-		for new events on their own. Programs like these must make sure to call this function
-		from time to time to convince the server that they did not freeze or bail out.
-</para>
-</sect2>
-
+&libs3d_func;
 </sect1>
 
 
 <sect1 id="data_types">
 <title>Data types</title>
 
-<sect2 id="s3d_obj_info">
-<title>struct s3d_but_info</title>
-<programlisting>
-struct s3d_obj_info {
-	uint32_t object;
-	uint32_t flags;
-	float trans_x, trans_y, trans_z;
-	float rot_x, rot_y, rot_z;
-	float scale;
-	float r;
-	char name[256];
-};
-</programlisting>
-<para>
-Can be used on the buffer of an <link linkend="s3d_evt">event</link> of type <link linkend="S3D_EVENT_OBJ_INFO">S3D_EVENT_OBJ_INFO</link>.
-name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere
-an object, which will also be interesting for the mcp.
-</para>
-<para>
-Special objects like camera, pointer will have the "sys_" prefix in the name and will be named "pointer0", "pointer1" ... or "cam0", "cam1" ...
-For cam object, scale will contain the aspect ratio.
-</para>
-</sect2>
-
-
-
-<sect2 id="s3d_but_info">
-<title>struct s3d_but_info</title>
-<programlisting>
-struct s3d_but_info {
-	uint8_t button;
-	uint8_t state;
-};
-</programlisting>
-<para>
-Can be used on the buffer of an <link linkend="s3d_evt">event</link> of type <link linkend="S3D_EVENT_MBUTTON">S3D_EVENT_MBUTTON</link>.
-</para>
-</sect2>
-
-
-<sect2 id="mcp_object">
-<title>struct mcp_object</title>
-<programlisting>
-struct mcp_object {
-	uint32_t object;
-	float trans_x, trans_y, trans_z;
-	float r;
-	char name[256];
-};
-
-</programlisting>
-<para>
-obsolete, deprecated, don't use, to be removed soon (use <link linkend="s3d_but_info">struct s3d_but_info</link>). ;)
-</para>
-</sect2>
-
-<sect2 id="s3d_evt">
-<title>struct s3d_evt</title>
-<programlisting>
-struct s3d_evt {
-	uint8_t event;
-	int length;
-	char *buf;
-	struct s3d_evt *next;
-};
-</programlisting>
-<para>
-
-This is the event information holder. 
-<variablelist>
-<varlistentry>
-<term>event</term>
-<listitem><para>gives the <link linkend="s3d_events">event type</link></para></listitem>
-</varlistentry>
-<varlistentry>
-<term>length</term>
-<listitem><para>gives the length of the buffer *buf</para></listitem>
-</varlistentry>
-<varlistentry>
-<term>*buf</term>
-<listitem><para>is the pointer to the multiple purpose buffer, which will have more specific information about the object</para></listitem>
-</varlistentry>
-<varlistentry>
-<term>*next</term>
-<listitem><para>can be safely ignored ;)</para></listitem>
-</varlistentry>
-</variablelist>
-
-Depending on the event, buf can contain the keycode pressed on keyboard event, the <link linkend="s3d_but_info">mouse button state</link> on a mouse event, <link linkend="s3d_obj_info">object information</link> etc.
-</para>
-</sect2>
-
-<sect2 id="s3d_cb">
-<title>typedef s3d_cb</title>
-<programlisting>
-typedef void (*<emphasis>s3d_cb</emphasis>)(<link linkend="s3d_evt">struct s3d_evt</link> *);
-</programlisting>
-<para>
-This defines the callback format. Each callback should return void and take an argument of <link linkend="s3d_evt">struct s3d_evt *</link>.
-Callbacks can be defined with <link linkend="s3d_set_callback">s3d_set_callback()</link>.
-</para>
-<programlisting>
-/* a callback handler could look like this: */
-void my_key_handler(struct s3d_evt *event_data)
-{
-	...
-}
-</programlisting>
-</sect2>
+&libs3d_struct;
+&libs3d_typedef;
 </sect1>
 
 
@@ -1548,7 +64,7 @@
 <sect2 id="s3d_events">
 <title>S3D events</title>
 <para>
-This defines the callback format. Each callback should return void and take an argument of <link linkend="s3d_evt">struct s3d_evt *</link>.
+This defines the callback format. Each callback should return void and take an argument of <link linkend="structs3d_evt">struct s3d_evt *</link>.
 Callbacks can be defined with <link linkend="s3d_set_callback">s3d_set_callback()</link>.
 <variablelist>
 
@@ -1571,7 +87,7 @@
 <varlistentry>
 <term><anchor id="S3D_EVENT_MBUTTON"/>S3D_EVENT_MBUTTON</term>
 <listitem><para>
-A mouse button was clicked. Use <link linkend="s3d_but_info">struct s3d_but_info</link> on buf to get more info.
+A mouse button was clicked. Use <link linkend="structs3d_but_info">struct s3d_but_info</link> on buf to get more info.
 </para></listitem>
 </varlistentry>
 
@@ -1595,7 +111,7 @@
 <term><anchor id="S3D_MCP_OBJECT"/>S3D_MCP_OBJECT</term>
 <listitem><para>
 As the name suggests, those will only happen to the MCP. 
-This tells it about new/changed application object. <link linkend="mcp_object">struct mcp_object</link>
+This tells it about new/changed application object. <link linkend="structmcp_object">struct mcp_object</link>
 can be used on buf. To be removed in the future.
 </para></listitem>
 </varlistentry>
@@ -1604,7 +120,7 @@
 <term><anchor id="S3D_MCP_DEL_OBJECT"/>S3D_MCP_DEL_OBJECT</term>
 <listitem><para>
 As the name suggests, those will only happen to the MCP. 
-This tells it about deleted application object. <link linkend="mcp_object">struct mcp_object</link>
+This tells it about deleted application object. <link linkend="structmcp_object">struct mcp_object</link>
 can be used on buf. To be removed in the future.
 </para></listitem>
 </varlistentry>

Added: trunk/Documentation/libs3d/structs.docbook
===================================================================
--- trunk/Documentation/libs3d/structs.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/libs3d/structs.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -0,0 +1,42 @@
+<sect2 id="structs3d_evt"><title>struct s3d_evt</title><programlisting>struct s3d_evt {
+	uint8_t event;
+	int length;
+	char *buf;
+	struct s3d_evt *next;
+}</programlisting><para>
+</para><para>This is the event information holder.     </para><variablelist><varlistentry><term>event</term><listitem><para>
+</para><para>gives the event type         </para></listitem></varlistentry><varlistentry><term>length</term><listitem><para>
+</para><para>gives the length of the buffer *buf         </para></listitem></varlistentry><varlistentry><term>buf</term><listitem><para>
+</para><para>is the pointer to the multiple purpose buffer, which will have more specific information about the object         </para></listitem></varlistentry><varlistentry><term>next</term><listitem><para>
+</para><para>can be safely ignored ;)         </para></listitem></varlistentry></variablelist></sect2><sect2 id="structmcp_object"><title>struct mcp_object</title><programlisting>struct mcp_object {
+	uint32_t object;
+	float trans_x;
+	float trans_y;
+	float trans_z;
+	float r;
+	char name;
+}</programlisting><para>
+</para><para>Deprecated</para><para>don't use, to be removed soon (use struct s3d_but_info). ;)     </para></sect2><sect2 id="structs3d_obj_info"><title>struct s3d_obj_info</title><programlisting>struct s3d_obj_info {
+	uint32_t object;
+	uint32_t flags;
+	float trans_x;
+	float trans_y;
+	float trans_z;
+	float rot_x;
+	float rot_y;
+	float rot_z;
+	float scale;
+	float r;
+	char name;
+}</programlisting><para>
+</para><para>Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp.</para><para>Special objects like camera, pointer will have the &quot;sys_&quot; prefix in the name and will be named &quot;pointer0&quot;, &quot;pointer1&quot; ... or &quot;cam0&quot;, &quot;cam1&quot; ... For cam object, scale will contain the aspect ratio.     </para></sect2><sect2 id="structs3d_but_info"><title>struct s3d_but_info</title><programlisting>struct s3d_but_info {
+	uint8_t button;
+	uint8_t state;
+}</programlisting><para>
+</para><para>Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.     </para></sect2><sect2 id="structs3d_key_event"><title>struct s3d_key_event</title><programlisting>struct s3d_key_event {
+	uint16_t keysym;
+	uint16_t unicode;
+	uint16_t modifier;
+	uint16_t state;
+}</programlisting><para>
+    </para></sect2>
\ No newline at end of file

Added: trunk/Documentation/libs3d/typedefs.docbook
===================================================================
--- trunk/Documentation/libs3d/typedefs.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/libs3d/typedefs.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -0,0 +1,2 @@
+<sect2 id="s3d_cb"><title>typedef s3d_cb</title><programlisting>typedef int(* s3d_cb)(struct s3d_evt *)</programlisting><para>
+</para><para>This defines the callback format. Each callback should return void and take an argument of struct s3d_evt *. Callbacks can be defined with s3d_set_callback().         </para></sect2>
\ No newline at end of file

Added: trunk/Documentation/libs3dw/functions.docbook
===================================================================
--- trunk/Documentation/libs3dw/functions.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/libs3dw/functions.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -0,0 +1,70 @@
+<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button * <function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter>, const char *<parameter>text</parameter>, float <parameter>posx</parameter>, float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See s3dw_button for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label * <function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter>, const char *<parameter>text</parameter>, float <parameter>posx</parameter>, float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See s3dw_label for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input * <function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter>, float <parameter>width</parameter>, float <parameter>posx</parameter>, float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Creates a new input-box on the surface with a input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with s3dw_input_change_text, and received with s3dw_input_gettext</para><para>See s3dw_input for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox * <function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter>, const char *<parameter>text</parameter>, float <parameter>posx</parameter>, float <parameter>posy</parameter>, float <parameter>width</parameter>, float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See s3dw_textbox for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char * <function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2><sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter>, const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Change the text in the referenced input-box to the specified text.         </para></sect2><sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter>, const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Change the text in the referenced label to the specified text.         </para></sect2><sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface * <function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter>, float <parameter>width</parameter>, float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See s3dw_surface for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget * <function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use s3dw_moveit()</para><programlisting> s3dw_widget *root = s3dw_getroot();
+ // move widget center to (0,5,0). upon creation, it's centered at (0,0,0),
+ // so this might move it up
+ root-&gt;x=0;
+ root-&gt;y=5;
+ root-&gt;z=0;
+ s3dw_moveit(root);
+</programlisting><para>         </para></sect2><sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Scrolls the text in the textbox up by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scrollright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter>, int <parameter>x</parameter>, int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2><sect2 id="s3dw_textbox_change_text"><title>s3dw_textbox_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter>, const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>Change the text in the referenced textbox to the specified text.         </para></sect2><sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specifiy it itself as the clickhandler.</para><programlisting> // way 1:
+ s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dw_handle_click);
+
+ // way 2:
+ ...
+ void click(struct s3d_evt *evt)
+ {
+         s3dw_handle_click(evt);
+         ....
+         // your own clickhandler code
+         ...
+ }
+ ....
+ s3d_set_callback(S3D_EVENT_OBJ_CLICK,click);
+</programlisting><para>         </para></sect2><sect2 id="s3dw_handle_key"><title>s3dw_handle_key</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_key</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;)</para><programlisting> // way 1:
+ s3d_set_callback(S3D_EVENT_KEY,s3dw_handle_key);
+
+ // way 2:
+ ...
+ void key(struct s3d_evt *evt)
+ {
+         s3dw_handle_key(evt);
+         ....
+         // your own keyhandler code
+         ...
+ }
+ ....
+ s3d_set_callback(S3D_EVENT_KEY,key);
+</programlisting><para>         </para></sect2><sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
+</para><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2><sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
+</para><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
+ static struct timespec t={0.33*1000*1000}; // 33 mili seconds
+ void mainloop()
+ {
+         // keep this in your mainloop. this will do smooth animations for you ...
+         s3dw_ani_mate();
+         nanosleep(&amp;t,NULL);
+ }
+
+ ....
+ s3d_mainloop(mainloop);
+</programlisting><para>         </para></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3dw/libs3dw.docbook
===================================================================
--- trunk/Documentation/libs3dw/libs3dw.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/libs3dw/libs3dw.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 <chapter id="libs3dw">
-<title>libs3wd - The S3D Widget Library</title>
+<title>libs3dw - The S3D Widget Library</title>
 <sect1 id="using_3dw">
 <title>Using the <application>s3d</application> widget library</title>
 <sect2 id="gettingstarted_s3dw">
@@ -26,671 +26,16 @@
 <sect1 id="functions_s3dw">
 <title>function reference</title>
 
+&libs3dw_func;
 
-
-<sect2 id="s3dw_surface_new">
-<title>s3dw_surface_new</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>s3dw_surface *<function>s3dw_surface_new</function></funcdef>
-<paramdef>const char         *<parameter>title</parameter>,
-float		  <parameter>width</parameter>,
-float		  <parameter>height</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Creates a new surface (a new window) with title "title" and dimension "width" x "height".
-</para>
-<para>
-		See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.
-</para>
-</sect2>
-
-
-<sect2 id="s3dw_button_new">
-<title>s3dw_button_new</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>s3dw_button *<function>s3dw_button_new</function></funcdef>
-<paramdef>const s3dw_surface *<parameter>surface</parameter>,
-const char         *<parameter>text</parameter>,
-float		  <parameter>posx</parameter>,
-float		  <parameter>posy</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Creates a new button on the <link linkend="s3dw_surface">surface</link>, 
-		with "text" written on it and the upper left 
-		corner at (posx,posy) on the <link linkend="s3dw_surface">surface</link>.
-</para>
-<para>
-		See <link linkend="s3dw_button">s3dw_button</link> for information about callbacks which may be defined.
-</para>
-</sect2>
-
-<sect2 id="s3dw_input_new">
-<title>s3dw_input_new</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>s3dw_input *<function>s3dw_input_new</function></funcdef>
-<paramdef>const s3dw_surface *<parameter>surface</parameter>,
-float		  <parameter>width</parameter>,
-float		  <parameter>posx</parameter>,
-float		  <parameter>posy</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Creates a new input-box on the <link linkend="s3dw_surface">surface</link> with a input width of "width",
-		the upper left  corner at (posx,posy) on the <link linkend="s3dw_surface">surface</link>.
-		The input-box is empty on creation and can be change with <link linkend="s3dw_input_change_text">s3dw_input_change_text</link>,
-		and received with <link linkend="s3dw_input_gettext">s3dw_input_gettext</link>
-</para>
-<para>
-		See <link linkend="s3dw_input">s3dw_input</link> for information about callbacks which may be defined.
-</para>
-</sect2>
-
-<sect2 id="s3dw_label_new">
-<title>s3dw_label_new</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>s3dw_label *<function>s3dw_label_new</function></funcdef>
-<paramdef>const s3dw_surface *<parameter>surface</parameter>,
-const char         *<parameter>text</parameter>,
-float		  <parameter>posx</parameter>,
-float		  <parameter>posy</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Creates a new label on the <link linkend="s3dw_surface">surface</link>, 
-		with "text" written on it and the upper left 
-		corner at (posx,posy) on the <link linkend="s3dw_surface">surface</link>.
-</para>
-<para>
-		See <link linkend="s3dw_label">s3dw_label</link> for information about callbacks which may be defined.
-</para>
-</sect2>
-
-<sect2 id="s3dw_textbox_new">
-<title>s3dw_textbox_new</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>s3dw_textbox *<function>s3dw_textbox_new</function></funcdef>
-<paramdef>const s3dw_surface *<parameter>surface</parameter>,
-const char         *<parameter>text</parameter>,
-float		  <parameter>posx</parameter>,
-float		  <parameter>posy</parameter>,
-float		  <parameter>width</parameter>,
-float		  <parameter>height</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Creates a new textbox on the <link linkend="s3dw_surface">surface</link>,
-		with "text" written on it and the upper left
-		corner at (posx,posy) on the <link linkend="s3dw_surface">surface</link>.
-		Width and height define the size of the textbox including scrollbars which
-		are rendered around the textfield.
-</para>
-<para>
-		See <link linkend="s3dw_textbox">s3dw_textbox</link> for information about callbacks which may be defined.
-</para>
-</sect2>
-
-<sect2 id="s3dw_textbox_scrollup">
-<title>s3dw_textbox_scrollup</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_textbox_scrollup</function></funcdef>
-<paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Scrolls the text in the textbox up by one line, if possible.
-</para>
-</sect2>
-
-<sect2 id="s3dw_textbox_scrolldown">
-<title>s3dw_textbox_scrolldown</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef>
-<paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Scrolls the text in the textbox down by one line, if possible.
-</para>
-</sect2>
-
-<sect2 id="s3dw_textbox_scrollleft">
-<title>s3dw_textbox_scrollleft</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef>
-<paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Scrolls the text in the textbox to the left by one character, if possible.
-</para>
-</sect2>
-
-<sect2 id="s3dw_textbox_scrollright">
-<title>s3dw_textbox_scrollright</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_textbox_scrollright</function></funcdef>
-<paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Scrolls the text in the textbox to the right by one character, if possible.
-</para>
-</sect2>
-
-<sect2 id="s3dw_textbox_scrollto">
-<title>s3dw_textbox_scrollto</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_textbox_scrollto</function></funcdef>
-<paramdef>s3dw_textbox *<parameter>textbox</parameter>,
-int <parameter>x</parameter>,
-int <parameter>y</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Scrolls the text in the textbox so that the character in row y, column x is in the
-		top left corner of the textbox.
-</para>
-</sect2>
-
-
-
-<sect2 id="s3dw_getroot">
-<title>s3dw_getroot</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-	<funcdef>s3dw_widget *<function>s3dw_getroot</function></funcdef>
-<paramdef>void</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Returns the root-<link linkend="s3dw_widget">widget</link>, which holds all the surfaces. E.g. if you want
-		to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit()</link>
-</para>
-<programlisting>
-		<link linkend="s3dw_widget">s3dw_widget</link> *root = <emphasis>s3dw_getroot</emphasis>();
-		/* move <link linkend="s3dw_widget">widget</link> center to (0,5,0). upon creation, it's centered at (0,0,0), 
-		 * so this might move it up */
-		root->x=0;
-		root->y=5;
-		root->z=0;
-		<link linkend="s3dw_moveit">s3dw_moveit</link>(root);
-</programlisting>
-</sect2>
-
-
-<sect2 id="s3dw_input_gettext">
-<title>s3dw_input_gettext</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>char *<function>s3dw_input_gettext</function></funcdef>
-<paramdef>s3dw_input *<parameter>input</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Returns the text which is currently entered in the referenced <link linkend="s3dw_input">input-box</link>.
-</para>
-</sect2>
-
-<sect2 id="s3dw_input_change_text">
-<title>s3dw_input_change_text</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_input_change_text</function></funcdef>
-<paramdef>s3dw_input *<parameter>input</parameter>,
-const 		char *<parameter>text</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Change the text in the referenced <link linkend="s3dw_input">input-box</link> to the specified text.
-</para>
-</sect2>
-
-<sect2 id="s3dw_label_change_text">
-<title>s3dw_label_change_text</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_label_change_text</function></funcdef>
-<paramdef>s3dw_label *<parameter>label</parameter>,
-const 		char *<parameter>text</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Change the text in the referenced <link linkend="s3dw_label">label</link> to the specified text.
-</para>
-</sect2>
-
-<sect2 id="s3dw_textbox_change_text">
-<title>s3dw_textbox_change_text</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_textbox_change_text</function></funcdef>
-<paramdef>s3dw_textbox *<parameter>textbox</parameter>,
-const 		char *<parameter>text</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Change the text in the referenced <link linkend="s3dw_textbox">textbox</link> to the specified text.
-</para>
-</sect2>
-
-
-<sect2 id="s3dw_delete">
-<title>s3dw_delete</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_delete</function></funcdef>
-<paramdef>s3dw_widget *<parameter>widget</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-	Deletes any widget. Should be casted with <link linkend="S3DWIDGET">S3DWIDGET()</link>.
-</para>
-</sect2>
-
-<sect2 id="s3dw_moveit">
-<title>s3dw_moveit</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_moveit</function></funcdef>
-<paramdef>s3dw_widget *<parameter>widget</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Moves/translates the widget as you specified in it's private <link linkend="s3dw_widget">s3dw_widget structure</link>.
-		Should be casted with <link linkend="S3DWIDGET">S3DWIDGET()</link>.
-</para>
-</sect2>
-
-<sect2 id="s3dw_show">
-<title>s3dw_show</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_show</function></funcdef>
-<paramdef>s3dw_widget *<parameter>widget</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Switches a <link linkend="s3dw_widget">widget</link> visible. Should be casted with <link linkend="S3DWIDGET">S3DWIDGET()</link>.
-</para>
-</sect2>
-
-<sect2 id="s3dw_focus">
-<title>s3dw_focus</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_focus</function></funcdef>
-<paramdef>s3dw_widget *<parameter>focus</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		Gives focus to the <link linkend="s3dw_widget">widget</link>, relative to its parent. That means you can focus a 
-		<link linkend="s3dw_surface">surface</link>, and each <link linkend="s3dw_surface">surface</link> can focus 
-		one of its element, e.g. an input field. 
-		Should be casted with <link linkend="S3DWIDGET">S3DWIDGET()</link>.
-</para>
-</sect2>
-
-<sect2 id="s3dw_handle_click">
-<title>s3dw_handle_click</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3dw_handle_click</function></funcdef>
-<paramdef>const		struct s3d_evt *<parameter>event</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-	If you want your widgets on mouseclicks (believe me, you want that), you have to call this
-	either in your clickhandler-function or specifiy it itself as the clickhandler.
-</para>
-<programlisting>
-/* way 1: */
-<link linkend="s3d_set_callback">s3d_set_callback</link>(<link linkend="S3D_EVENT_OBJ_CLICK">S3D_EVENT_OBJ_CLICK</link>,<emphasis>s3dw_handle_click</emphasis>);
-
-/* way 2: */
-...
-void click(<link linkend="s3d_evt">struct s3d_evt</link> *evt)
-{
-	<emphasis>s3dw_handle_click</emphasis>(evt);
-	.... 
-	/* your own clickhandler code */
-	...
-}
-....
-<link linkend="s3d_set_callback">s3d_set_callback</link>(<link linkend="S3D_EVENT_OBJ_CLICK">S3D_EVENT_OBJ_CLICK</link>,click);
-</programlisting>
-</sect2>
-
-
-<sect2 id="s3dw_handle_key">
-<title>s3dw_handle_key</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3dw_handle_key</function></funcdef>
-<paramdef>const		struct s3d_evt *<parameter>event</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-	This is somehow useful to call in your keyhandler functions if you want to 
-	have input-boxes work. ;)
-</para>
-<programlisting>
-/* way 1: */
-<link linkend="s3d_set_callback">s3d_set_callback</link>(<link linkend="S3D_EVENT_KEY">S3D_EVENT_KEY</link>,<emphasis>s3dw_handle_key</emphasis>);
-
-/* way 2: */
-...
-void key(<link linkend="s3d_evt">struct s3d_evt</link> *evt)
-{
-	<emphasis>s3dw_handle_key</emphasis>(evt);
-	.... 
-	/* your own keyhandler code */
-	...
-}
-....
-<link linkend="s3d_set_callback">s3d_set_callback</link>(<link linkend="S3D_EVENT_KEY">S3D_EVENT_KEY</link>,key);
-</programlisting>
-</sect2>
-
-<sect2 id="s3dw_object_info">
-<title>s3dw_object_info</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>int <function>s3dw_object_info</function></funcdef>
-<paramdef>struct s3d_evt *<parameter>event</parameter></paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-		This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this,
-		s3dw can consider the camera position and makes things like following the
-		camera possible.
-</para>
-</sect2>
-
-<sect2 id="s3dw_ani_mate">
-<title>s3dw_ani_mate</title>
-<funcsynopsis>
-<funcsynopsisinfo><![CDATA[#include <s3dw.h>]]></funcsynopsisinfo>
-<funcprototype>
-<funcdef>void <function>s3dw_ani_mate</function></funcdef>
-<paramdef>void</paramdef>
-</funcprototype>
-</funcsynopsis>
-<para>
-	Just call this in your mainloop if you want
-	some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)
-</para>
-<programlisting>
-<![CDATA[#include <time.h>]]>   /* nanosleep() */
-static struct timespec t={0,33*1000*1000}; /* 33 mili seconds */
-void mainloop()
-{
-    /* keep this in your mainloop. this will do smooth animations for you ... */
-    s3dw_ani_mate();
-    nanosleep(<![CDATA[&t,NULL]]>);
-}
-
-....
-<link linkend="s3d_mainloop">s3d_mainloop</link>(mainloop);
-</programlisting>
-</sect2>
-
 </sect1>
 <sect1 id="data_types_s3dw">
 <title>Data types</title>
 
 
 
-<sect2 id="s3dw_widget">
-<title>s3dw_widget</title>
-<programlisting>
-struct _s3dw_widget {
-	/* private .. */
-	int         type;
-	s3dw_widget *parent;
-	s3dw_style  *style;
-	int         nobj;          /* number of children objects */
-	s3dw_widget **pobj;        /* pointer to list of children objects */
-	int         focus;         /* index of the widget focused in pobj */
-	int         flags;         /* flags like visibility */
-	float       ax, ay, az;    /* current position for animation */
-	float       as;            /* current scale factor */
-	float       arx, ary, arz; /* current rotation */
-	float       width, height; /* width and height of the widget, outer size */
-	uint32_t    oid;           /* the main object which is used for transformations etc ...*/
-	/* public */
-	void        *ptr;          /* a pointer to a user structure, to use in callbacks etc */
-	float       x, y, z;       /* position, relative to the surface usually */
-	float       s;             /* scale factor */
-	float       rx, ry, rz;    /* rotation around the axis */
-};
-typedef struct _s3dw_widget     s3dw_widget;
+&libs3dw_struct;
+&libs3dw_typedef;
 
-/* type may be one of the following ... */		
-
-enum {
-	S3DW_TROOT,
-	S3DW_TCAM,
-	S3DW_TSURFACE,
-	S3DW_TBUTTON,
-	S3DW_TLABEL,
-	S3DW_TINPUT,
-	S3DW_TTEXTBOX,
-	S3DW_TSCROLLBAR,
-	S3DW_NTYPES
-};
-<anchor id="S3DWIDGET"/>
-#define     S3DWIDGET(x)    ((s3dw_widget *)x)
-						
-</programlisting>
-<para>
-		This is the most basic widget type, it contains all the "general" widget information. If you want to move a widget, you'd
-		change x,y,z,s and rx,ry,rz and call <link linkend="s3dw_moveit">s3dw_moveit</link> to turn your action reality. Every other
-		widget has this type as first entry, so a simple typecast to <emphasis>s3dw_widget</emphasis> will give you the widgets "general"
-		information. For typecast, you may use S3DWIDGET().
-</para>
-<para>
-		The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event,
-		and the program must now find out on which data the user reacted.
-</para>
-</sect2>
-
-<sect2 id="s3dw_button">
-<title>s3dw_button</title>
-<programlisting>
-typedef struct _s3dw_button     s3dw_button;
-struct _s3dw_button {
-    /* private */
-	<link linkend="s3dw_widget">s3dw_widget</link>      widget;
-	char            *text;
-	uint32_t    oid_text;
-	/* public */
-	<link linkend="s3dw_callback">s3dw_callback</link>    onclick;
-};
-</programlisting>
-<para>
-	The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.
-</para>
-</sect2>
-
-
-<sect2 id="s3dw_input">
-<title>s3dw_input</title>
-<programlisting>
-typedef struct _s3dw_input     s3dw_input;
-struct _s3dw_input {
-    /* private */
-	<link linkend="s3dw_widget">s3dw_widget</link>      widget;
-	char            *text;
-	uint32_t    oid_text;
-	/* public */
-	<link linkend="s3dw_callback">s3dw_callback</link>    onclick;
-	<link linkend="s3dw_callback">s3dw_callback</link>    onedit;
-};
-</programlisting>
-<para>
-		The inputs is an input-field where a user may type things. onclick reacts on click in the field,
-		onedit notifies you when someone writes in the field.
-</para>
-</sect2>
-
-<sect2 id="s3dw_textbox">
-<title>s3dw_textbox</title>
-<programlisting>
-typedef struct _s3dw_textbox     s3dw_textbox;
-struct _s3dw_textbox {
-    /* private */
-	<link linkend="s3dw_widget">s3dw_widget</link>      widget;
-	<link linkend="s3dw_widget">s3dw_scrollbar</link>      *scroll_vertical, *scroll_horizontal;
-	char            *text;
-	int				n_lineoids, *p_lineoids;
-	int 			window_x, window_y;
-	/* public */
-	<link linkend="s3dw_callback">s3dw_callback</link>    onclick;
-};
-</programlisting>
-<para>
-	A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.
-</para>
-</sect2>
-
-<sect2 id="s3dw_scrollbar">
-<title>s3dw_scrollbar</title>
-<programlisting>
-typedef struct _s3dw_scrollbar     s3dw_scrollbar;
-struct _s3dw_scrollbar {
-    /* private */
-	<link linkend="s3dw_widget">s3dw_widget</link>      widget;
-	float			pos, max;
-	int				type;  /* 0 = horizontal, 1 = vertical */
-	int 			loid, roid, baroid;
-	/* public */
-	<link linkend="s3dw_callback">s3dw_callback</link>    lonclick, ronclick;
-};
-</programlisting>
-<para>
-		The Scrollbar should be placed around scrollable content. Currently only the
-		left and right icons are clickable (lonclick and ronclick callbacks), in
-		vertical mode lonclick is the callback for the up icon,
-		ronclick the callback for the down icon.
-</para>
-</sect2>
-
-
-
-<sect2 id="s3dw_label">
-<title>s3dw_label</title>
-<programlisting>
-typedef struct _s3dw_label     s3dw_label;
-struct _s3dw_label {
-    /* private */
-	<link linkend="s3dw_widget">s3dw_widget</link>      widget;
-	char            *text;
-	/* public */
-	<link linkend="s3dw_callback">s3dw_callback</link>    onclick;
-};
-</programlisting>
-<para>
-		The labels is an label-field where a user may type things. onclick reacts on click in the field,
-		onedit notifies you when someone writes in the field.
-</para>
-</sect2>
-
-<sect2 id="s3dw_surface">
-<title>s3dw_surface</title>
-<programlisting>
-typedef struct _s3dw_surface     s3dw_surface;
-struct _s3dw_surface {
-    /* private */
-	<link linkend="s3dw_widget">s3dw_widget</link>      widget;
-	uint32_t         oid_title;
-	uint32_t         oid_tbar;
-	char            *title;
-};
-</programlisting>
-<para>
-	A surface is the window of this widget library, holding all of our elements like <link linkend="s3dw_button">buttons</link>, 
-	<link linkend="s3dw_input">inputfields</link> etc ...
-</para>
-</sect2>
-
-
-<sect2 id="s3dw_style">
-<title>s3dw_style</title>
-<programlisting>
-typedef struct _s3dw_style     s3dw_style;
-/* style */
-struct _s3dw_style {
-    char *name;                 /* name of the style ... kind of redundant */
-    char *fontface;             /* font face for all used fonts */
-    float surface_mat[12];      /* material for the surface background */
-    float input_mat[12];        /* material for buttonboxes and other widgets */
-    float inputback_mat[12];    /* material for inputfield background */
-    float text_mat[12];         /* material for the text on buttons and inputs */
-    float title_mat[12];        /* material for the title bar */
-    float title_text_mat[12];   /* material for the text on the title bar */
-};
-
-</programlisting>
-<para>
-	With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in 
-	<link linkend="s3d_push_materials_a">s3d_push_materials_a</link>, that means red,green,blue and alpha float values 
-	(between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.
-</para>
-</sect2>
-
-<sect2 id="s3dw_callback">
-<title>s3dw_callback</title>
-<programlisting>
-typedef void (*s3dw_callback)(s3dw_widget *);
-
-</programlisting>
-<para>
-	The callback type. Receive the widget which is affected as argument.
-</para>
-<programlisting>
-/* example */
-void my_handler(<link linkend="s3dw_widget">s3dw_widget</link> *widget)
-{
-	/* do something with the widget */
-	...
-}
-</programlisting>
-</sect2>
-
-
 </sect1>
 </chapter>

Added: trunk/Documentation/libs3dw/structs.docbook
===================================================================
--- trunk/Documentation/libs3dw/structs.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/libs3dw/structs.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -0,0 +1,92 @@
+<sect2 id="struct_s3dw_style"><title>struct _s3dw_style</title><programlisting>struct _s3dw_style {
+	char *name;
+	char *fontface;
+	float surface_mat;
+	float input_mat;
+	float inputback_mat;
+	float text_mat;
+	float title_mat;
+	float title_text_mat;
+}</programlisting><para>
+</para><para>With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.     </para><variablelist><varlistentry><term>name</term><listitem><para>
+</para><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>
+</para><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>
+</para><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>
+</para><para>material for buttonboxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>
+</para><para>material for inputfield background         </para></listitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>
+</para><para>material for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>
+</para><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>
+</para><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2><sect2 id="struct_s3dw_widget"><title>struct _s3dw_widget</title><programlisting>struct _s3dw_widget {
+	int type;
+	s3dw_widget *parent;
+	s3dw_style *style;
+	int nobj;
+	s3dw_widget **pobj;
+	int focus;
+	int flags;
+	float ax;
+	float ay;
+	float az;
+	float as;
+	float arx;
+	float ary;
+	float arz;
+	float width;
+	float height;
+	uint32_t oid;
+	void *ptr;
+	float x;
+	float y;
+	float z;
+	float s;
+	float rx;
+	float ry;
+	float rz;
+}</programlisting><para>
+</para><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2><sect2 id="struct_s3dw_button"><title>struct _s3dw_button</title><programlisting>struct _s3dw_button {
+	s3dw_widget widget;
+	char *text;
+	uint32_t oid_text;
+	s3dw_callback onclick;
+}</programlisting><para>
+</para><para>The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.     </para></sect2><sect2 id="struct_s3dw_label"><title>struct _s3dw_label</title><programlisting>struct _s3dw_label {
+	s3dw_widget widget;
+	char *text;
+	s3dw_callback onclick;
+}</programlisting><para>
+</para><para>The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_scrollbar"><title>struct _s3dw_scrollbar</title><programlisting>struct _s3dw_scrollbar {
+	s3dw_widget widget;
+	float pos;
+	float max;
+	int type;
+	int loid;
+	int roid;
+	int baroid;
+	s3dw_callback lonclick;
+	s3dw_callback ronclick;
+}</programlisting><para>
+</para><para>The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.     </para></sect2><sect2 id="struct_s3dw_textbox"><title>struct _s3dw_textbox</title><programlisting>struct _s3dw_textbox {
+	s3dw_widget widget;
+	s3dw_scrollbar *scroll_vertical;
+	s3dw_scrollbar *scroll_horizontal;
+	char *text;
+	int n_lineoids;
+	int *p_lineoids;
+	int window_x;
+	int window_y;
+	s3dw_callback onclick;
+}</programlisting><para>
+</para><para>A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.     </para></sect2><sect2 id="struct_s3dw_input"><title>struct _s3dw_input</title><programlisting>struct _s3dw_input {
+	s3dw_widget widget;
+	char *text;
+	uint32_t oid_text;
+	s3dw_callback onclick;
+	s3dw_callback onedit;
+}</programlisting><para>
+</para><para>The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_surface"><title>struct _s3dw_surface</title><programlisting>struct _s3dw_surface {
+	s3dw_widget widget;
+	uint32_t oid_title;
+	uint32_t oid_tbar;
+	char *title;
+}</programlisting><para>
+</para><para>A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...     </para></sect2>
\ No newline at end of file

Added: trunk/Documentation/libs3dw/typedefs.docbook
===================================================================
--- trunk/Documentation/libs3dw/typedefs.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/libs3dw/typedefs.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -0,0 +1,16 @@
+<sect2 id="s3dw_widget"><title>typedef s3dw_widget</title><programlisting>typedef struct _s3dw_widget s3dw_widget</programlisting><para>
+        </para></sect2><sect2 id="s3dw_button"><title>typedef s3dw_button</title><programlisting>typedef struct _s3dw_button s3dw_button</programlisting><para>
+        </para></sect2><sect2 id="s3dw_label"><title>typedef s3dw_label</title><programlisting>typedef struct _s3dw_label s3dw_label</programlisting><para>
+        </para></sect2><sect2 id="s3dw_textbox"><title>typedef s3dw_textbox</title><programlisting>typedef struct _s3dw_textbox s3dw_textbox</programlisting><para>
+        </para></sect2><sect2 id="s3dw_scrollbar"><title>typedef s3dw_scrollbar</title><programlisting>typedef struct _s3dw_scrollbar s3dw_scrollbar</programlisting><para>
+        </para></sect2><sect2 id="s3dw_input"><title>typedef s3dw_input</title><programlisting>typedef struct _s3dw_input s3dw_input</programlisting><para>
+        </para></sect2><sect2 id="s3dw_surface"><title>typedef s3dw_surface</title><programlisting>typedef struct _s3dw_surface s3dw_surface</programlisting><para>
+        </para></sect2><sect2 id="s3dw_style"><title>typedef s3dw_style</title><programlisting>typedef struct _s3dw_style s3dw_style</programlisting><para>
+        </para></sect2><sect2 id="s3dw_callback"><title>typedef s3dw_callback</title><programlisting>typedef void(* s3dw_callback)(s3dw_widget *)</programlisting><para>
+</para><para>The callback type. Receive the widget which is affected as argument.</para><programlisting> // example
+ void my_handler(s3dw_widget *widget)
+ {
+         // do something with the widget
+         ...
+ }
+</programlisting><para>         </para></sect2>
\ No newline at end of file

Modified: trunk/Documentation/s3d.docbook
===================================================================
--- trunk/Documentation/s3d.docbook	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/s3d.docbook	2008-08-31 22:19:18 UTC (rev 980)
@@ -6,6 +6,12 @@
   <!ENTITY server SYSTEM "server/server.docbook">
   <!ENTITY libs3d SYSTEM "libs3d/libs3d.docbook">
   <!ENTITY libs3dw SYSTEM "libs3dw/libs3dw.docbook">
+  <!ENTITY libs3d_func SYSTEM "libs3d/functions.docbook">
+  <!ENTITY libs3d_struct SYSTEM "libs3d/structs.docbook">
+  <!ENTITY libs3d_typedef SYSTEM "libs3d/typedefs.docbook">
+  <!ENTITY libs3dw_func SYSTEM "libs3dw/functions.docbook">
+  <!ENTITY libs3dw_struct SYSTEM "libs3dw/structs.docbook">
+  <!ENTITY libs3dw_typedef SYSTEM "libs3dw/typedefs.docbook">
 ]>
 <book id="s3d" lang="en">
 &bookinfo;

Added: trunk/Documentation/xml.doxygen
===================================================================
--- trunk/Documentation/xml.doxygen	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/Documentation/xml.doxygen	2008-08-31 22:19:18 UTC (rev 980)
@@ -0,0 +1,136 @@
+# Doxyfile 1.5.6
+
+#---------------------------------------------------------------------------
+# Project related configuration options
+#---------------------------------------------------------------------------
+DOXYFILE_ENCODING      = UTF-8
+PROJECT_NAME           = libs3d
+PROJECT_NUMBER         = 0.2.1
+OUTPUT_DIRECTORY       = .
+CREATE_SUBDIRS         = NO
+OUTPUT_LANGUAGE        = English
+BRIEF_MEMBER_DESC      = YES
+REPEAT_BRIEF           = YES
+ABBREVIATE_BRIEF       = "The $name class" \
+                         "The $name widget" \
+                         "The $name file" \
+                         is \
+                         provides \
+                         specifies \
+                         contains \
+                         represents \
+                         a \
+                         an \
+                         the
+ALWAYS_DETAILED_SEC    = NO
+INLINE_INHERITED_MEMB  = NO
+FULL_PATH_NAMES        = YES
+STRIP_FROM_PATH        = 
+STRIP_FROM_INC_PATH    = 
+SHORT_NAMES            = NO
+JAVADOC_AUTOBRIEF      = NO
+QT_AUTOBRIEF           = NO
+MULTILINE_CPP_IS_BRIEF = NO
+DETAILS_AT_TOP         = NO
+INHERIT_DOCS           = YES
+SEPARATE_MEMBER_PAGES  = NO
+TAB_SIZE               = 3
+ALIASES                = 
+OPTIMIZE_OUTPUT_FOR_C  = YES
+OPTIMIZE_OUTPUT_JAVA   = NO
+OPTIMIZE_FOR_FORTRAN   = NO
+OPTIMIZE_OUTPUT_VHDL   = NO
+BUILTIN_STL_SUPPORT    = NO
+CPP_CLI_SUPPORT        = NO
+SIP_SUPPORT            = NO
+IDL_PROPERTY_SUPPORT   = YES
+DISTRIBUTE_GROUP_DOC   = NO
+SUBGROUPING            = YES
+TYPEDEF_HIDES_STRUCT   = NO
+#---------------------------------------------------------------------------
+# Build related configuration options
+#---------------------------------------------------------------------------
+EXTRACT_ALL            = NO
+EXTRACT_PRIVATE        = NO
+EXTRACT_STATIC         = NO
+EXTRACT_LOCAL_CLASSES  = YES
+EXTRACT_LOCAL_METHODS  = NO
+EXTRACT_ANON_NSPACES   = NO
+HIDE_UNDOC_MEMBERS     = YES
+HIDE_UNDOC_CLASSES     = YES
+HIDE_FRIEND_COMPOUNDS  = NO
+HIDE_IN_BODY_DOCS      = NO
+INTERNAL_DOCS          = NO
+CASE_SENSE_NAMES       = YES
+HIDE_SCOPE_NAMES       = NO
+SHOW_INCLUDE_FILES     = YES
+INLINE_INFO            = YES
+SORT_MEMBER_DOCS       = YES
+SORT_BRIEF_DOCS        = NO
+SORT_GROUP_NAMES       = NO
+SORT_BY_SCOPE_NAME     = NO
+GENERATE_TODOLIST      = YES
+GENERATE_TESTLIST      = YES
+GENERATE_BUGLIST       = YES
+GENERATE_DEPRECATEDLIST= YES
+ENABLED_SECTIONS       = 
+MAX_INITIALIZER_LINES  = 30
+SHOW_USED_FILES        = NO
+SHOW_DIRECTORIES       = NO
+SHOW_FILES             = NO
+SHOW_NAMESPACES        = NO
+FILE_VERSION_FILTER    = 
+#---------------------------------------------------------------------------
+# configuration options related to warning and progress messages
+#---------------------------------------------------------------------------
+QUIET                  = NO
+WARNINGS               = YES
+WARN_IF_UNDOCUMENTED   = YES
+WARN_IF_DOC_ERROR      = YES
+WARN_NO_PARAMDOC       = NO
+WARN_FORMAT            = "$file:$line: $text"
+WARN_LOGFILE           = 
+#---------------------------------------------------------------------------
+# configuration options related to the input files
+#---------------------------------------------------------------------------
+INPUT                  = ../libs3d \
+                         ../libs3dw
+INPUT_ENCODING         = UTF-8
+FILE_PATTERNS          = *.c \
+                         *.h
+RECURSIVE              = NO
+EXCLUDE                = 
+EXCLUDE_SYMLINKS       = NO
+EXCLUDE_PATTERNS       = 
+EXCLUDE_SYMBOLS        = 
+EXAMPLE_PATH           = 
+EXAMPLE_PATTERNS       = *
+EXAMPLE_RECURSIVE      = NO
+IMAGE_PATH             = 
+INPUT_FILTER           = 
+FILTER_PATTERNS        = 
+FILTER_SOURCE_FILES    = NO
+#---------------------------------------------------------------------------
+# configuration options related to the XML output
+#---------------------------------------------------------------------------
+GENERATE_XML           = YES
+XML_OUTPUT             = xml
+XML_SCHEMA             = 
+XML_DTD                = 
+XML_PROGRAMLISTING     = NO
+#---------------------------------------------------------------------------
+# Configuration options related to the preprocessor   
+#---------------------------------------------------------------------------
+ENABLE_PREPROCESSING   = YES
+MACRO_EXPANSION        = NO
+EXPAND_ONLY_PREDEF     = NO
+SEARCH_INCLUDES        = YES
+INCLUDE_PATH           = 
+INCLUDE_FILE_PATTERNS  = 
+PREDEFINED             = 
+EXPAND_AS_DEFINED      = 
+SKIP_FUNCTION_MACROS   = YES
+#---------------------------------------------------------------------------
+# Configuration::additions related to the search engine   
+#---------------------------------------------------------------------------
+SEARCHENGINE           = NO

Modified: trunk/libs3d/callback.c
===================================================================
--- trunk/libs3d/callback.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/callback.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -56,22 +56,58 @@
 	/* do plain nothing */
 	return(0);
 }
-/*  sets a callback */
+
+/**
+ * sets a callback for a certain event. this is very useful for event-oriented
+ * applications. event callbacks will not interrupt each other or the mainloop.
+ *
+ * \remarks Defining callbacks will only work after calling s3d_init()
+ *
+ * \code
+ * #include <inttypes.h>
+ *
+ * void obj_click(struct s3d_evt event)
+ * {
+ *         printf("object id %"PRIu32" got clicked", *((uint32_t *)event->buf));
+ * }
+ * ...
+ * s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click);
+ * // this will tell you when a object got clicked
+ * \endcode
+ */
 void s3d_set_callback(uint8_t event, s3d_cb func)
 {
 	s3d_cb_list[(int)event] = func;
 	s3d_process_stack();
 }
-/*  clears a callback, same as s3d_set_callback(event, (s3d_cb) S3D_CBNIL); */
+
+/**
+ * Clears the callback which is associated with the event.
+ */
 void s3d_clear_callback(uint8_t event)
 {
 	s3d_cb_list[(int)event] = S3D_CBNIL;
 }
-/* ignores an event ... */
+
+/**
+ * Sets the callback on ignore, that means it won't be queued up for later use.
+ * An incoming event of this type will simply be skipped.
+ */
 void s3d_ignore_callback(uint8_t event)
 {
 	s3d_set_callback(event, _s3d_ignore);
 }
+
+/**
+ * Returns the Callback-function of the event.
+ *
+ * \code
+ * struct s3d_evt e;
+ * ...
+ * s3d_get_callback(S3D_EVENT_KEY)(e);
+ * // will call the key-handling function with argument e.
+ * \endcode
+ */
 s3d_cb s3d_get_callback(uint8_t event)
 {
 	return(s3d_cb_list[(int)event]);

Modified: trunk/libs3d/event.c
===================================================================
--- trunk/libs3d/event.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/event.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -29,6 +29,11 @@
 
 static struct s3d_evt *s3d_stack;
 int cb_lock = 2;  /*  callback lock */
+
+/**
+ * Pushes an event onto the event-stack. Usually you don't need to do this
+ * manually.
+ */
 void s3d_push_event(struct s3d_evt *newevt)
 {
 	struct s3d_evt *p;
@@ -56,12 +61,22 @@
 	} else
 		s3d_stack = newevt;
 }
+
+/**
+ * Pops the latest event from the stack. Don't forget to free() both the event
+ * and its buffer! Returns a pointer to struct s3d_evt.
+ */
 struct s3d_evt *s3d_pop_event(void) {
 	struct s3d_evt *ret;
 	if ((ret = s3d_stack) != NULL)
 		s3d_stack = s3d_stack->next;
 	return ret;
 }
+
+/**
+ * Finds the latest occurence of an event, giving the event type as argument.
+ * Returns a pointer to struct s3d_evt.
+ */
 struct s3d_evt *s3d_find_event(uint8_t event) {
 	struct s3d_evt *p;
 	p = s3d_stack;
@@ -72,6 +87,11 @@
 	}
 	return(NULL);
 }
+
+/**
+ * deletes an event, the argument is the pointer to the event which is to be
+ * deleted (maybe obtained from s3d_find_event).
+ */
 int s3d_delete_event(const struct s3d_evt *devt)
 {
 	struct s3d_evt *previous = NULL;
@@ -93,7 +113,14 @@
 	}
 	return(-1);
 }
-/*  this function checks the stack for callbacks. */
+
+/**
+ * This function goes through all function of the event-stack and will call
+ * functions. this is useful when you define a new function but still have a lot
+ * of events of this type on the stack.
+ *
+ * \deprecated This is probably obsolete
+ */
 void s3d_process_stack(void)
 {
 	struct s3d_evt *p;

Modified: trunk/libs3d/freetype.c
===================================================================
--- trunk/libs3d/freetype.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/freetype.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -301,6 +301,16 @@
 	*xoff += tess_buf[a].xoff;  /*  xoffset */
 	return(0);
 }
+
+/**
+ * This selects a font for the s3d_draw_string() function.
+ *
+ * \remarks Of course, you won't forget to toggle it visible, won't you?
+ *
+ * \code
+ * s3d_select_font("vera"); // will use the vera font face
+ * \endcode
+ */
 int s3d_select_font(const char *path)
 {
 	char    *oldfont = memory_font;
@@ -337,7 +347,19 @@
 	return(-1);
 }
 
-/*  draws a simple string. */
+/**
+ * Renders the string str with in Truetype format with the height 1, returns the
+ * length of the rendered string in *xlen (or set len=NULL to disable this).
+ *
+ * \code
+ * char str="hello world!";
+ * float len;
+ * s3d_select_font("vera");
+ * s3d_draw_string(str, len);
+ *
+ * // not interested in the length? do that: s3d_draw_string(str, NULL);
+ * \endcode
+ */
 int s3d_draw_string(const char *str, float *xlen)
 {
 	int i;
@@ -366,7 +388,12 @@
 	if (xlen != NULL) *xlen = xoff;
 	return(f_oid);
 }
-/* get the string length before actually drawing it. */
+
+/**
+ * Returns the length of the string if it were rendered with the currently
+ * selected font. That might be useful to estimate the size used for a text and
+ * render the background or bounding box before inserting the text.
+ */
 float s3d_strlen(const char *str)
 {
 	int i;

Modified: trunk/libs3d/io.c
===================================================================
--- trunk/libs3d/io.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/io.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -64,6 +64,11 @@
 }
 
 #endif
+
+/**
+ * Prints the possible parameter for the client library (which can be passed in
+ * s3d_init())
+ */
 void s3d_usage(void)
 {
 	printf("s3d-parameters:\n");
@@ -110,6 +115,23 @@
 	return(0);
 }
 /*  external functions go here ... */
+/**
+ * This will initialize the s3d-library and the connection to the Server. It
+ * will return 0 on success in Server initializion. name specifies the your
+ * programs name.
+ *
+ * \code
+ * int main(char argc, char **argv)
+ * {
+ *         if (!s3d_init(&argc, &argv, "Hello world"))
+ *         {
+ *                 ...
+ *                 s3d_quit();
+ *         }
+ *         return(0);
+ * }
+ * \endcode
+ */
 int s3d_init(int *argc, char ***argv, const char *name)
 {
 	char     *s;
@@ -165,7 +187,11 @@
 	}
 	return(-1);
 }
-/*  shuts down the socket, clearing the stack */
+
+/**
+ * closes the connection and cleares the event-stack. it can also be used to
+ * leave the s3d_mainloop().
+ */
 int s3d_quit(void)
 {
 	struct s3d_evt *ret;
@@ -196,8 +222,23 @@
 	}
 	return(0);
 }
-/*  apps should use that as main loop for their programs. */
-int s3d_mainloop(void (*f)())
+
+/**
+ * takes a function as argument. it will loop this function until a quit-event
+ * is received. you can pass NULL if you have no function to be looped, but its
+ * better to sleep some time if you have nothing to do anyway to save cpu-time.
+ *
+ * \code
+ * void mainloop(void)
+ * {
+ *         usleep(1000); // sleep 1 ms in every cycle
+ * }
+ * ...
+ *
+ * s3d_mainloop(mainloop());
+ * \endcode
+ */
+int s3d_mainloop(void (*f)(void))
 {
 	while (con_type != CON_NULL) {
 		cb_lock++;   /* no callbacks while we are in mainloop */
@@ -208,8 +249,12 @@
 	}
 	return(0);
 }
-/*  opens a file returning it's filesize  */
-/*  and setting *pointer to the buffer. to be freed */
+
+/**
+ * This opens the file fname, setting *pointer to it's memory position. the
+ * function will return the size of buffer. you can free() the pointer when
+ * you're finished.
+ */
 int s3d_open_file(const char *fname, char **pointer)
 {
 	FILE *fp;

Modified: trunk/libs3d/modelread.c
===================================================================
--- trunk/libs3d/modelread.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/modelread.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -42,7 +42,13 @@
 
 #define MAXSTRN  20
 static int model_load(char *file);
-/*  just a helper function for reading from file instead of memory. */
+/**
+ * Imports an 3d object file and returns the object number. Quite a number of
+ * formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb,
+ * .lwo), Quake Models (.md3), or simply everything libg3d supports. :)
+ *
+ * \remarks Of course, you won't forget to toggle it visible, won't you?
+ */
 int s3d_import_model_file(const char *fname)
 {
 	char *buf, *ptr, *next;

Modified: trunk/libs3d/network.c
===================================================================
--- trunk/libs3d/network.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/network.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -65,6 +65,12 @@
 	return(_s3d_tcp_net_receive());
 }
 #endif
+/**
+ * This functions is for programs which do not employ a mainloop, hence they
+ * need to check for new events on their own. Programs like these must make sure
+ * to call this function from time to time to convince the server that they did
+ * not freeze or bail out.
+ */
 int s3d_net_check(void)
 {
 	switch (con_type) {

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/proto_out.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -37,7 +37,12 @@
 #endif
 
 #define MF_LEN 65530  /*  maximum fragmentation length */
-/*  creates a new object */
+
+/**
+ * Creates a new object, returning the object id.
+ *
+ * \remarks Of course, you won't forget to toggle it visible, won't you?
+ */
 int s3d_new_object(void)
 {
 	int oid;
@@ -47,7 +52,14 @@
 	cb_lock--; /* no new callbacks and nothing happened */
 	return(oid);
 }
-/*  clones an object */
+
+/**
+ * Clones an already exisiting object. They get just look the same as the
+ * parent-object and will change when the parent-object changes. Cloning
+ * especially makes sense if you want to use the same object a lot of times.
+ * Move and transform is independent from the parent. The function returns the
+ * childs object id.
+ */
 int s3d_clone(int oid)
 {
 	uint32_t res;
@@ -56,7 +68,10 @@
 	return(res);
 }
 
-/*  changes the target of a clone-object */
+/**
+ * Changes the clone target of oid to another object (toid). This assumes you've
+ * got oid from s3d_clone before.
+ */
 int s3d_clone_target(int oid, int toid)
 {
 	uint32_t buf[2];
@@ -66,15 +81,23 @@
 	/*  s3dprintf(MED,"... changed clone-target of object %d to %d", oid, toid); */
 	return oid;
 }
-/*  deletes an object */
+
+/**
+ * Deletes the object referenced by oid.
+ */
 int s3d_del_object(int oid)
 {
 	uint32_t res = htonl(oid);
 	net_send(S3D_P_C_DEL_OBJ, (char *)&res, 4);
 	return oid;
 }
-/*  creates a link from object oid_from to object oid_to in order to copy */
-/*  translations/rotations */
+
+/**
+ * A linked object will move along with it's link parent. For example if you
+ * have a book on a table, you can link the book to the table so the book will
+ * "keep on the table" if you move the table around in space. It will also
+ * rotate with the table etc.
+ */
 int s3d_link(int oid_from, int oid_to)
 {
 	uint32_t buf[2];
@@ -83,7 +106,10 @@
 	net_send(S3D_P_C_LINK, (char *)buf, 8);
 	return(0);
 }
-/*  remove the link to another object */
+
+/**
+ * Remove the link of object oid to its target.
+ */
 int s3d_unlink(int oid)
 {
 	uint32_t buf;
@@ -93,7 +119,11 @@
 }
 /*  pushing functions */
 
-/*  has float always the same size? i'm not quite sure ... */
+/**
+ * pushes a vertex onto the vertex stack. make sure that you count how many
+ * vertices you've pushed because you'll need that for referencing when you push
+ * your polygons.
+ */
 int s3d_push_vertex(int object, float x, float y, float z)
 {
 	char    buf[4+3*4], *ptr;
@@ -111,8 +141,18 @@
 	net_send(S3D_P_C_PUSH_VERTEX, buf, len);
 	return(0);
 }
-/*  like vertex add, but you can add a lot of vertices with this. */
-/*  it's to be used for file readers or fast coders :) */
+
+/**
+ * push some vertices from an array. that's much better for performing than
+ * using s3d_push_vertex() if you have a lot of vertices (and that's probably
+ * the usual case).
+ * \code
+ * float vertices[] = { 0.0, 0.0, 0.0,
+ *                      1.0, 2.0, 3.0,
+ *                      3.0, 2.0, 1.0};
+ * s3d_push_vertices(object, vertices, 3); // pushing 3 vertices
+ * \endcode
+ */
 int s3d_push_vertices(int object, const float *vbuf, uint16_t n)
 {
 	char    buf[MF_LEN+4], *ptr;
@@ -138,8 +178,15 @@
 	return(0);
 }
 
-/*  pushes a new material onto the stack */
-/*  a vectored version of this would be wise ... */
+/**
+ * pushes a material for an object. you will have to count them yourself too,
+ * as polygons will ask for the material index number. the material properties
+ * are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum,
+ * 1.0 is the maximum a color value can be. the specular color is the color
+ * which is directly reflected from the light source. the diffuse color is the
+ * color which can be seen in the bright side of the object, and the ambience
+ * color is the color of the shadow side of the object.
+ */
 int s3d_push_material(int object,
                       float amb_r, float amb_g, float amb_b,
                       float spec_r, float spec_g, float spec_b,
@@ -181,7 +228,11 @@
 	net_send(S3D_P_C_PUSH_MAT, buf, len);
 	return(0);  /*  nothing yet */
 }
-/*  same as s3d_push_material, but with values for alpha */
+
+/**
+ * Same as s3d_push_material, but color has alpha value added. Use
+ * s3d_push_materials_a() if you have a lot of materials to push.
+ */
 int s3d_push_material_a(int object,
                         float amb_r, float amb_g, float amb_b, float amb_a,
                         float spec_r, float spec_g, float spec_b, float spec_a,
@@ -223,7 +274,31 @@
 	net_send(S3D_P_C_PUSH_MAT, buf, len);
 	return(0);  /*  nothing yet */
 }
-/*  push a material array (with alpha information!) */
+
+/**
+ * Pushes a buffer of Materials. Those Materials are in the format float[n*12],
+ * with
+ * - mbuf[n*12 + 0-3] - ambience
+ * - mbuf[n*12 + 4-7] - specular
+ * - mbuf[n *12 + 8-11] - diffusion values
+ *
+ * of each entry. n is the number of materials pushed. The values are in the
+ * order r,g,b,a. If you only want to push one material, use the more easy
+ * s3d_push_material_a() function.
+ *
+ * \code
+ * // each line has r,g,b,a value
+ * float bla[24]=
+ *         {1, 0, 0, 1,
+ *          1, 0, 0, 1,
+ *          1, 0, 0, 1,
+ *          0, 1, 1, 1,
+ *          0, 1, 1, 1,
+ *          0, 1, 1, 1};
+ *
+ * s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material
+ * \endcode
+ */
 int s3d_push_materials_a(int object, const float *mbuf, uint16_t n)
 {
 	char    buf[MF_LEN+4], *ptr;
@@ -248,6 +323,21 @@
 	/*  free(buf); */
 	return(0);
 }
+
+/**
+ * push one polygon on the polygonstack of the object. it takes 3 vertex-index
+ * numbers and one material material-index-nr. as argument.
+ *
+ * \code
+ * int oid = s3d_new_object();   // create a new object
+ * s3d_push_vertex(oid, 0.0, 0.0, 0.0);
+ * s3d_push_vertex(oid, 0.0, 1.0, 0.0);
+ * s3d_push_vertex(oid, 1.0, 0.0, 0.0);
+ * s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
+ * s3d_push_polygon(oid, 0, 1, 2, 0);
+ * // this will create a red polygon
+ * \endcode
+ */
 int s3d_push_polygon(int object, uint32_t v1, uint32_t v2, uint32_t v3, uint32_t material)
 {
 	char    buf[4+4*4], *ptr;
@@ -267,6 +357,12 @@
 	net_send(S3D_P_C_PUSH_POLY, buf, len);
 	return(0);
 }
+
+/**
+ * Push one line on the linestack of the object. It takes 2 vertex-index-
+ * numbers and one material material-index-nr. as argument. If you have a lot of
+ * lines to push, use s3d_push_lines()
+ */
 int s3d_push_line(int object, uint32_t v1, uint32_t v2, uint32_t material)
 {
 	char    buf[4+3*4], *ptr;
@@ -285,8 +381,20 @@
 	return(0);
 }
 
-/*  this is the polygon array version */
-/*  assumes to have a list of polys which consists of v1,v2,v3,material */
+/**
+ * as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.
+ *
+ * \code
+ * uint32_t pbuf[] = { 0, 1, 2, 0};
+ * int oid = s3d_new_object();   // create a new object
+ * s3d_push_vertex(oid, 0.0, 0.0, 0.0);
+ * s3d_push_vertex(oid, 0.0, 1.0, 0.0);
+ * s3d_push_vertex(oid, 1.0, 0.0, 0.0);
+ * s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
+ * s3d_push_polygons(oid, pbuf, 1);
+ * // push one polygon with the pbuf data
+ * \endcode
+ */
 int s3d_push_polygons(int object, const uint32_t *pbuf, uint16_t n)
 {
 	uint32_t  buf[(MF_LEN+4)/4];
@@ -312,6 +420,12 @@
 	}
 	return(0);
 }
+
+/**
+ * Pushing n lines on the linestack of the object, each lbuf has a size of n*3,
+ * each entry has the index number of the first vertex, second vertex and
+ * material number just as in s3d_push_line().
+ */
 int s3d_push_lines(int object, const uint32_t *lbuf, uint16_t n)
 {
 	uint32_t  buf[(MF_LEN+4)/4];
@@ -339,6 +453,10 @@
 	}
 	return(0);
 }
+
+/**
+ * Adds a new texture with height w and height h on the texturestack.
+ */
 int s3d_push_texture(int object, uint16_t w, uint16_t h)
 {
 	char    buf[4+2*2], *ptr;
@@ -353,6 +471,12 @@
 	net_send(S3D_P_C_PUSH_TEX, buf, len);
 	return(0);
 }
+
+/**
+ * As for vertices, you can push arrays of textures on the texture stack to have
+ * greater performance. The tbuf should contain n texture sizes which consist of
+ * 2 uint16_t values for width and height for each texture.
+ */
 int s3d_push_textures(int object, const uint16_t *tbuf, uint16_t n)
 {
 	uint32_t  buf[(MF_LEN+4)/4];
@@ -382,7 +506,9 @@
 }
 /*  popping functions  */
 
-/*  delete n vertices */
+/**
+ * Deletes the latest n vertices from the vertex stack of the object.
+ */
 int s3d_pop_vertex(int object, uint32_t n)
 {
 	uint32_t  buf[2];
@@ -392,7 +518,10 @@
 	return(0);
 
 }
-/*  delete n materials */
+
+/**
+ * Deletes the latest n material from the material stack of the object.
+ */
 int s3d_pop_material(int object, uint32_t n)
 {
 	uint32_t  buf[2];
@@ -402,7 +531,10 @@
 	return(0);
 
 }
-/*  delete n polygons */
+
+/**
+ * Deletes the latest n polygon from the polygon stack of the object.
+ */
 int s3d_pop_polygon(int object, uint32_t n)
 {
 	uint32_t  buf[2];
@@ -412,7 +544,10 @@
 	return(0);
 
 }
-/*  delete n lines */
+
+/**
+ * Deletes the latest n lines from the line stack of the object.
+ */
 int s3d_pop_line(int object, uint32_t n)
 {
 	uint32_t  buf[2];
@@ -422,7 +557,10 @@
 	return(0);
 
 }
-/*  delete n polygons */
+
+/**
+ * Deletes the latest n textures from the texture stack of the object.
+ */
 int s3d_pop_texture(int object, uint32_t n)
 {
 	uint32_t  buf[2];
@@ -434,7 +572,10 @@
 }
 /*  pepping/loading functions */
 
-/*  overwrites the last material with this one */
+/**
+ * Overwriting the latest pushed Material, overwriting the current value with
+ * the specified one. See s3d_pep_materials_a if you want to pep more materials.
+ */
 int s3d_pep_material(int object,
                      float amb_r, float amb_g, float amb_b,
                      float spec_r, float spec_g, float spec_b,
@@ -476,7 +617,12 @@
 	net_send(S3D_P_C_PEP_MAT, buf, len);
 	return(0);  /*  nothing yet */
 }
-/*  same as above, with alpha */
+
+/**
+ * Overwriting the latest pushed Material, overwriting the current value with
+ * the specified one, with alpha value in contrast to s3d_pep_material See
+ * s3d_push_materials_a if you want to pep more materials.
+ */
 int s3d_pep_material_a(int object,
                        float amb_r, float amb_g, float amb_b, float amb_a,
                        float spec_r, float spec_g, float spec_b, float spec_a,
@@ -518,6 +664,12 @@
 	net_send(S3D_P_C_PEP_MAT, buf, len);
 	return(0);  /*  nothing yet */
 }
+
+/**
+ * Alters the last n pushed Materials. See s3d_push_materials_a() for more
+ * information how mbuf should look like. Use s3d_pep_material_a() if you only
+ * want to alter the latest material.
+ */
 int s3d_pep_materials_a(int object, const float *mbuf, uint16_t n)
 {
 	char    buf[MF_LEN+4];
@@ -531,7 +683,17 @@
 	return(0);
 }
 
-/*  adds normal information to the last n polygons. */
+/**
+ * Adds normal information to polygons, giving each vertex of a polygon a normal
+ * information. With this, you can achieve smoothed edge effects.
+ *
+ * nbuf should contain n * 9 float values, for each vertex a normal vector
+ * (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float
+ * values per Polygon in Total. Don't worry if you don't use this, it's kind of
+ * hard to calculate and the server will always use some proper normal values
+ * (same for every vertex, calculated by the plane which is defined by the 3
+ * points of the polygon.
+ */
 int s3d_pep_polygon_normals(int object, const float *nbuf, uint16_t n)
 {
 	uint8_t buf[MF_LEN+4];
@@ -545,7 +707,16 @@
 	return(0);
 
 }
-/*  adds normal information to the last n line. */
+
+/**
+ * Adds normal information to lines, giving each vertex of a line a normal
+ * information. This makes lines somewhat nicer, you'll need that especially
+ * when you're going to build wireframe models.
+ *
+ * nbuf should contain n * 6 float values, for each vertex a normal vector
+ * (x,y,z), and you have 2 Vertices for each line so that makes 6 float values
+ * per line in Total.
+ */
 int s3d_pep_line_normals(int object, const float *nbuf, uint16_t n)
 {
 	uint8_t buf[MF_LEN+4];
@@ -559,7 +730,10 @@
 	return(0);
 
 }
-/*  replaces the last vertex. */
+
+/**
+ * Alter the latest pushed vertex, overwriting with the supplied values.
+ */
 int s3d_pep_vertex(int object, float x, float y, float z)
 {
 	char    buf[4+3*4], *ptr;
@@ -577,7 +751,10 @@
 	net_send(S3D_P_C_PEP_VERTEX, buf, len);
 	return(0);
 }
-/* replaces the last line */
+
+/**
+ * Alter the latest pushed line, overwriting with the supplied values.
+ */
 int s3d_pep_line(int object, int v1, int v2, int material)
 {
 	char    buf[4+3*4], *ptr;
@@ -597,7 +774,11 @@
 }
 
 
-/*  replaces the last n lines. */
+/**
+ * Alter the latest n pushed lines. lbuf holds the values which are used to
+ * overwrite the old data, n entries with each 3 uint32_t specifying first,
+ * second vertex and material of each line.
+ */
 int s3d_pep_lines(int object, const uint32_t *lbuf, uint16_t n)
 {
 	uint32_t  buf[MF_LEN+4];
@@ -613,7 +794,12 @@
 	return(0);
 
 }
-/*  replaces the last n vertices. */
+
+/**
+ * Alter the latest n pushed vertex. vbuf holds the values which are used to
+ * overwrite the old data, n entries with each 3 floats specifying x,y,z of the
+ * vertices.
+ */
 int s3d_pep_vertices(int object, const float *vbuf, uint16_t n)
 {
 	uint8_t buf[MF_LEN+4];
@@ -627,7 +813,14 @@
 	return(0);
 
 }
-/*  peps the last polygon with some texture coords */
+
+/**
+ * Pimp the last polygon pushed with some textures coordinates, x and y values
+ * for each vertex point respectively. Those values may be between 0 and 1 and
+ * are vertex points on the  texture defined in the material of the polygon. If
+ * you have more polygons which should get a texture, use
+ * s3d_pep_polygon_tex_coords()
+ */
 int s3d_pep_polygon_tex_coord(int object, float x1, float y1, float x2, float y2, float x3, float y3)
 {
 	char *ptr, buf[4*6+4];
@@ -649,7 +842,12 @@
 	net_send(S3D_P_C_PEP_POLY_TEXC, (char *)buf, 6*4 + 4);
 	return(0);
 }
-/*  adds texture coordinates to the last n polygons. */
+
+/**
+ * Pimp the latest n polygons with texture coordinates. tbuf has 6*n float
+ * values for its entries, which are supplied in the order as in
+ * s3d_pep_polygon_tex_coord()
+ */
 int s3d_pep_polygon_tex_coords(int object, const float *tbuf, uint16_t n)
 {
 	char buf[MF_LEN+4];
@@ -662,7 +860,11 @@
 	net_send(S3D_P_C_PEP_POLY_TEXC, (char *)buf, n*6*sizeof(float) + 4);
 	return(0);
 }
-/*  adds normal information to the last n polygons. */
+
+/**
+ * Just as s3d_pep_polygon_normals(), with the difference you won't alter the
+ * latest n polygons but n polygons starting with index start.
+ */
 int s3d_load_polygon_normals(int object, const float *nbuf, uint32_t start, uint16_t n)
 {
 	char    buf[MF_LEN+4], *ptr;
@@ -690,7 +892,11 @@
 	}
 	return(0);
 }
-/*  adds normal information to the last n polygons. */
+
+/**
+ * Just as s3d_pep_line_normals(), with the difference you won't alter the
+ * latest n lines but n lines starting with index start.
+ */
 int s3d_load_line_normals(int object, const float *nbuf, uint32_t start, uint16_t n)
 {
 	char    buf[MF_LEN+4], *ptr;
@@ -718,7 +924,11 @@
 	}
 	return(0);
 }
-/*  adds texture coordinates to the last n polygons. */
+
+/**
+ * Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the
+ * latest n polygons but n polygons starting with index start.
+ */
 int s3d_load_polygon_tex_coords(int object, const float *tbuf, uint32_t start, uint16_t n)
 {
 	char    buf[MF_LEN+4], *ptr;
@@ -746,7 +956,11 @@
 	}
 	return(0);
 }
-/*  load n materials at position start, overwriting old ones */
+
+/**
+ * Loads n materials starting from index position start into the Material stack.
+ * See s3d_push_materials_a for more informatino about the values in mbuf.
+ */
 int s3d_load_materials_a(int object, const float *mbuf, uint32_t start, uint16_t n)
 {
 	char    buf[MF_LEN+4], *ptr;
@@ -774,6 +988,11 @@
 	}
 	return(0);
 }
+
+/**
+ * Assign the latest material a texture referenced by the index tex. Of course,
+ * you will have pushed this texture with s3d_push_texture()
+ */
 int s3d_pep_material_texture(int object, uint32_t tex)
 {
 	char    buf[4*2], *ptr;
@@ -805,7 +1024,12 @@
 	return(0);
 
 }
-/*  load data (which has width w and height h) into object, texture tex at position (xpos,ypos) */
+
+/**
+ * Creates a new object, returning the object id.
+ *
+ * \remarks Of course, you won't forget to toggle it visible, won't you?
+ */
 int s3d_load_texture(int object, uint32_t tex, uint16_t xpos, uint16_t ypos, uint16_t w, uint16_t h, const uint8_t *data)
 {
 	char    buf[MF_LEN+4], *ptr;
@@ -839,6 +1063,13 @@
 	}
 	return(0);
 }
+
+/**
+ * turn some flags on for object.
+ *
+ * \remarks If you don't toggle OF_VISIBLE on, you won't see your object. usually
+ * you want this. (at least after you *push()d all your content)
+ */
 int s3d_flags_on(int object, uint32_t flags)
 {
 	char    buf[4+1+4], *ptr;
@@ -854,6 +1085,10 @@
 	net_send(S3D_P_C_TOGGLE_FLAGS, buf, len);
 	return(0);
 }
+
+/**
+ * turn some flags off for object.
+ */
 int s3d_flags_off(int object, uint32_t flags)
 {
 	char    buf[4+1+4], *ptr;
@@ -869,6 +1104,19 @@
 	net_send(S3D_P_C_TOGGLE_FLAGS, buf, len);
 	return(0);
 }
+
+/**
+ * Move the object to some position in space. when you create an object, it's
+ * always located at 0.0 , 0.0, 0.0.
+ *
+ * \remarks Translation is absolute, not relative!
+ *
+ * \code
+ * s3d_translate(object, 2, 0, 0);
+ * s3d_translate(object, 4, 0, 0);
+ * // object will end up at 4,0,0 and not 6,0,0!!
+ * \endcode
+ */
 int s3d_translate(int object, float x, float y, float z)
 {
 	char    buf[4+4*3], *ptr;
@@ -886,7 +1134,26 @@
 	return(0);
 
 }
-/*  rotation about the x-axis, y-axis and z-axis */
+
+/**
+ * rotate an object around the x, y and z-axis respectively. x,y,z may have
+ * values between [0,360] degrees.
+ *
+ * You will usually only rotate around one axis, leaving the unused fields on 0,
+ * I guess. If you want to rotate around more than one axis, please note: The
+ * order of the rotation applies is y-axis, x-axis, and then z-axis. You can
+ * think of it as the earth position coordinates: x is the longitude, y is the
+ * latitude, and z is the rotation at this point of the earth around your bodies
+ * axis. (I wonder if that makes it any clearer ;)
+ *
+ * \remarks Rotate is absolute, not relative!
+ *
+ * \code
+ * s3d_rotate(object, 90,  0, 0);
+ * s3d_rotate(object, 180, 0, 0);
+ * // object will be rotated 180 degrees around the x-axis, not 270 degress!
+ * \endcode
+ */
 int s3d_rotate(int object, float x, float y, float z)
 {
 	char    buf[4+4*3], *ptr;
@@ -903,8 +1170,14 @@
 	net_send(S3D_P_C_ROTATE, buf, len);
 	return(0);
 }
-/*  scale the object .. */
 
+/**
+ * Scales the object. about factor s. s=1 will be the original size, -1 will
+ * mirror it.
+ *
+ * \remarks s=0 is forbidden and will be ignored! s3d_scale is also absolute,
+ * not relative!
+ */
 int s3d_scale(int object, float s)
 {
 	char    buf[4+4], *ptr;
@@ -916,7 +1189,11 @@
 	net_send(S3D_P_C_SCALE, buf, len);
 	return(0);
 }
-/*  sets the focused app through it's mcp object number */
+
+/**
+ * This is an mcp-only function. It gives focus (for receiving key-strokes etc.)
+ * to an app referenced by it's mcp-object-id.
+ */
 int s3d_mcp_focus(int object)
 {
 	uint32_t buf = htonl(object);

Modified: trunk/libs3d/s3d.h
===================================================================
--- trunk/libs3d/s3d.h	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/s3d.h	2008-08-31 22:19:18 UTC (rev 980)
@@ -21,6 +21,8 @@
  * along with the s3d API; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
+
 #ifndef LIBS3D_H
 #define LIBS3D_H
 
@@ -32,13 +34,23 @@
 
 #include <stdint.h>  /* [u]intXX_t type definitions*/
 /* definitions */
+
+/**
+ * This is the event information holder.
+ */
 struct s3d_evt {
-	uint8_t event;
-	int length;
-	char *buf;
-	struct s3d_evt *next;
+	uint8_t event; /**< gives the event type */
+	int length; /**< gives the length of the buffer *buf */
+	char *buf; /**< is the pointer to the multiple purpose buffer,
+             *  which will have more specific information about the object */
+	struct s3d_evt *next; /**< can be safely ignored ;) */
 };
 
+/**
+ * This defines the callback format. Each callback should return void and take
+ * an argument of struct s3d_evt *. Callbacks can be defined with
+ * s3d_set_callback().
+ */
 typedef int (*s3d_cb)(struct s3d_evt *);
 
 #define S3D_EVENT_OBJ_CLICK  1
@@ -60,6 +72,10 @@
 #define S3D_OF_VISIBLE   0x00000001
 #define S3D_OF_SELECTABLE  0x00000002
 #define S3D_OF_POINTABLE  0x00000004
+
+/**
+ *  \deprecated don't use, to be removed soon (use struct s3d_but_info). ;)
+ */
 struct mcp_object {
 	uint32_t object;
 	float trans_x, trans_y, trans_z;
@@ -67,6 +83,16 @@
 #define MCP_NEW_OBJECT 1
 	char name[256];
 };
+/**
+ * Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will
+ * usually contain nothing for usual objects, but mcp objects will contain the
+ * applications names here. r is the radius of the convex sphere an object,
+ * which will also be interesting for the mcp.
+ *
+ * Special objects like camera, pointer will have the "sys_" prefix in the name
+ * and will be named "pointer0", "pointer1" ... or "cam0", "cam1" ... For cam
+ * object, scale will contain the aspect ratio.
+ */
 struct s3d_obj_info {
 	uint32_t object;
 	uint32_t flags;
@@ -76,6 +102,10 @@
 	float r;
 	char name[256];
 };
+
+/**
+ * Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.
+ */
 struct s3d_but_info {
 	uint8_t button; /* 0 = left, 1 = middle, 2 = right */
 	uint8_t state;  /* 0 = down, 1 = up, 2 = moving */
@@ -96,7 +126,7 @@
 	S3DEXPORT void s3d_usage(void);
 	S3DEXPORT int s3d_init(int *argc, char ***argv, const char *name);
 	S3DEXPORT int s3d_quit(void);
-	S3DEXPORT int s3d_mainloop(void (*f)(void));
+	S3DEXPORT int s3d_mainloop(void(*f)(void));
 
 	/* object manipulations */
 	S3DEXPORT int s3d_push_vertex(int object, float x, float y, float z);

Modified: trunk/libs3d/vector.c
===================================================================
--- trunk/libs3d/vector.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3d/vector.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -26,16 +26,11 @@
 #include <math.h>  /* sqrt() */
 #include "s3d.h"
 
-/***
- *
- * calculate length of a vector => http://en.wikipedia.org/wiki/Vector_%28spatial%29#Length_of_a_vector
- *
- *   vector   =>   given vector
- *
- *   return length
- *
- ***/
-
+/**
+ * Calculates and returns the length of the given vector (which should be of the
+ * type float[3]). More info on wikipedia
+ * http://en.wikipedia.org/wiki/Vector_(spatial)
+ */
 float s3d_vector_length(const float vector[])
 {
 
@@ -43,17 +38,11 @@
 
 }
 
-
-/***
- *
- * substract vector1 from vector2 => http://en.wikipedia.org/wiki/Vector_%28spatial%29#Vector_addition_and_subtraction
- *
- *   vector1         =>   given vector1
- *   vector2         =>   given vector2
- *   result_vector   =>   save resulting vector here
- *
- ***/
-
+/**
+ * Subtracts vector1 from vector2, writing result into result_vector. All vectors
+ * should have the format float[3]. More info on wikipedia.
+ * http://en.wikipedia.org/wiki/Vector_(spatial)
+ */
 void s3d_vector_subtract(const float vector1[], const float vector2[], float result_vector[])
 {
 
@@ -63,52 +52,35 @@
 
 }
 
-/***
- *
- * calculate dot product of 2 vectors => http://en.wikipedia.org/wiki/Vector_%28spatial%29#Dot_product
- *
- *   vector1   =>   given vector1
- *   vector2   =>   given vector2
- *
- *   return dot product
- *
- ***/
-
+/**
+ * Calculates and returns the dot product of vector1 and vector2. All vectors
+ * should have the format float[3]. More info on wikipedia.
+ * http://en.wikipedia.org/wiki/Vector_(spatial)
+ */
 float s3d_vector_dot_product(const float vector1[], const float vector2[])
 {
 	return (vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2]);
 }
 
-/***
- *
- * calculate cross product of 2 vectors => http://en.wikipedia.org/wiki/Cross_product
- *
- *   vector1         =>   given vector1
- *   vector2         =>   given vector2
- *  result_vector   =>   save resulting vector here
- *   return dot product
- *
- ***/
-
+/**
+ * Calculates and returns the cross product of vector1 and vector2. All vectors
+ * should have the format float[3]. More info on wikipedia.
+ * http://en.wikipedia.org/wiki/Vector_(spatial)
+ */
 void s3d_vector_cross_product(const float vector1[], const float vector2[], float result_vector[])
 {
 	result_vector[0] = vector1[1] * vector2[2] - vector1[2] * vector2[1];
 	result_vector[1] = vector1[2] * vector2[0] - vector1[0] * vector2[2];
 	result_vector[2] = vector1[0] * vector2[1] - vector1[1] * vector2[0];
 }
-/***
- *
- * calculate angle between 2 vectors => http://en.wikipedia.org/wiki/Vector_%28spatial%29#Dot_product
- *
- *   vector1   =>   given vector1
- *   vector2   =>   given vector2
- *
- *   return angle
- *
- *   NOTE: angle is between 0 and PI, therefore not covering the whole period!
- *
- ***/
 
+/**
+ * Calculates and returns the angle between vector1 and vector2. Please note that
+ * the resulting angle is between 0 and PI, therefore not covering the whole
+ * period! To convert in degrees just do result*180/M_PI. All vectors should
+ * have the format float[3]. More info on wikipedia.
+ * http://en.wikipedia.org/wiki/Vector_(spatial)
+ */
 float s3d_vector_angle(const float vector1[], const float vector2[])
 {
 
@@ -116,18 +88,13 @@
 
 }
 
-/***
- *
- * rotate e.g. description text so that it is always readable
- *
- *   obj_id    =>   id of object
- *   obj_pos   =>   position vector (x,y,z) of object
- *   cam_pos   =>   position vector (x,y,z) of camera
- *
- *   return degree to rotate
- *
- ***/
-
+/**
+ * Given obj_pos and cam_pos in the format float[3], angle_rad about which angle
+ * the object should be rotated around the y-axis so that it faces the camera.
+ * This might become handy if you have some text floating in space and want it
+ * to face the camera.
+ * http://en.wikipedia.org/wiki/Vector_(spatial)
+ */
 float s3d_angle_to_cam(const float obj_pos[], const float cam_pos[], float *angle_rad)
 {
 

Modified: trunk/libs3dw/animate.c
===================================================================
--- trunk/libs3dw/animate.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/animate.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -143,7 +143,24 @@
 
 }
 
-/* doing the whole animation thing */
+/**
+ * Just call this in your mainloop if you want some nice window sliding
+ * animations. it's somewhat bloating, but you don't want to miss it ;)
+ *
+ * \code
+ * #include <time.h>   // nanosleep()
+ * static struct timespec t={0.33*1000*1000}; // 33 mili seconds
+ * void mainloop()
+ * {
+ *         // keep this in your mainloop. this will do smooth animations for you ...
+ *         s3dw_ani_mate();
+ *         nanosleep(&t,NULL);
+ * }
+ *
+ * ....
+ * s3d_mainloop(mainloop);
+ * \endcode
+ */
 void s3dw_ani_mate(void)
 {
 	int i;

Modified: trunk/libs3dw/button.c
===================================================================
--- trunk/libs3dw/button.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/button.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -86,7 +86,12 @@
 	widget->height = 2;
 }
 
-/* create a new button in the surface */
+/**
+ * Creates a new button on the surface, with "text" written on it and the upper
+ * left corner at (posx,posy) on the surface.
+ *
+ * See s3dw_button for information about callbacks which may be defined.
+ */
 s3dw_button *s3dw_button_new(const s3dw_surface *surface, const char *text, float posx, float posy)
 {
 	s3dw_button *button;

Modified: trunk/libs3dw/event.c
===================================================================
--- trunk/libs3dw/event.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/event.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -25,17 +25,66 @@
 #include <s3dw.h>
 #include <s3dw_int.h>
 
+/**
+ * If you want your widgets on mouseclicks (believe me, you want that), you have
+ * to call this either in your clickhandler-function or specifiy it itself as
+ * the clickhandler.
+ *
+ * \code
+ * // way 1:
+ * s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dw_handle_click);
+ *
+ * // way 2:
+ * ...
+ * void click(struct s3d_evt *evt)
+ * {
+ *         s3dw_handle_click(evt);
+ *         ....
+ *         // your own clickhandler code
+ *         ...
+ * }
+ * ....
+ * s3d_set_callback(S3D_EVENT_OBJ_CLICK,click);
+ * \endcode
+ */
 int s3dw_handle_click(const struct s3d_evt *evt)
 {
 	uint32_t oid = *((uint32_t *)evt->buf);
 	return(s3dw_widget_event_click(s3dw_getroot(), oid));
 }
+
+/**
+ * This is somehow useful to call in your keyhandler functions if you want to
+ * have input-boxes work. ;)
+ *
+ * \code
+ * // way 1:
+ * s3d_set_callback(S3D_EVENT_KEY,s3dw_handle_key);
+ *
+ * // way 2:
+ * ...
+ * void key(struct s3d_evt *evt)
+ * {
+ *         s3dw_handle_key(evt);
+ *         ....
+ *         // your own keyhandler code
+ *         ...
+ * }
+ * ....
+ * s3d_set_callback(S3D_EVENT_KEY,key);
+ * \endcode
+ */
 int s3dw_handle_key(const struct s3d_evt *evt)
 {
 	struct s3d_key_event *keys = (struct s3d_key_event *)evt->buf;
 	return(s3dw_widget_event_key(s3dw_getroot(), keys));
 }
 
+/**
+ * This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this,
+ * s3dw can consider the camera position and makes things like following the
+ * camera possible.
+ */
 int s3dw_object_info(struct s3d_evt *evt)
 {
 	struct s3d_obj_info *info = (struct s3d_obj_info *)evt->buf;

Modified: trunk/libs3dw/input.c
===================================================================
--- trunk/libs3dw/input.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/input.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -137,7 +137,15 @@
 	s3d_flags_off(widget->oid, S3D_OF_VISIBLE | S3D_OF_SELECTABLE);
 	s3d_flags_off(input->oid_text, S3D_OF_VISIBLE | S3D_OF_SELECTABLE);
 }
-/* create a new input in the surface */
+
+/**
+ * Creates a new input-box on the surface with a input width of "width", the
+ * upper left corner at (posx,posy) on the surface. The input-box is empty on
+ * creation and can be change with s3dw_input_change_text, and received with
+ * s3dw_input_gettext
+ *
+ * See s3dw_input for information about callbacks which may be defined.
+ */
 s3dw_input *s3dw_input_new(const s3dw_surface *surface, float width, float posx, float posy)
 {
 	s3dw_input *input;
@@ -172,7 +180,10 @@
 	free(input->text);
 	free(input);
 }
-/* changes the text of the input */
+
+/**
+ * Change the text in the referenced input-box to the specified text.
+ */
 void s3dw_input_change_text(s3dw_input *input, const char *text)
 {
 	s3dw_widget *widget = (s3dw_widget *)input;
@@ -232,6 +243,10 @@
 	}
 	return(0);
 }
+
+/**
+ * Returns the text which is currently entered in the referenced input-box.
+ */
 char *s3dw_input_gettext(s3dw_input *input)
 {
 	return(strdup(input->text));

Modified: trunk/libs3dw/label.c
===================================================================
--- trunk/libs3dw/label.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/label.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -49,7 +49,10 @@
 {
 	s3d_flags_off(widget->oid, S3D_OF_VISIBLE | S3D_OF_SELECTABLE);
 }
-/* change label text */
+
+/**
+ * Change the text in the referenced label to the specified text.
+ */
 void s3dw_label_change_text(s3dw_label *label, const char *text)
 {
 	s3dw_widget *widget = (s3dw_widget *)label;
@@ -63,8 +66,12 @@
 		s3dw_label_show(widget);
 }
 
-
-/* create a new label in the surface */
+/**
+ * Creates a new label on the surface, with "text" written on it and the upper
+ * left corner at (posx,posy) on the surface.
+ *
+ * See s3dw_label for information about callbacks which may be defined.
+ */
 s3dw_label *s3dw_label_new(const s3dw_surface *surface, const char *text, float posx, float posy)
 {
 	s3dw_label *label;

Modified: trunk/libs3dw/root.c
===================================================================
--- trunk/libs3dw/root.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/root.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -76,7 +76,20 @@
 	return(NULL);
 }
 
-/* get the root .... if it's NULL, the lib is not initialized, so do this too ... */
+/**
+ * Returns the root-widget, which holds all the surfaces. E.g. if you want to
+ * move all widgets at once, adjust the root-widgets x,y,z and use s3dw_moveit()
+ *
+ * \code
+ * s3dw_widget *root = s3dw_getroot();
+ * // move widget center to (0,5,0). upon creation, it's centered at (0,0,0),
+ * // so this might move it up
+ * root->x=0;
+ * root->y=5;
+ * root->z=0;
+ * s3dw_moveit(root);
+ * \endcode
+ */
 s3dw_widget* s3dw_getroot(void)
 {
 	if (root == NULL) {

Modified: trunk/libs3dw/s3dw.h
===================================================================
--- trunk/libs3dw/s3dw.h	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/s3dw.h	2008-08-31 22:19:18 UTC (rev 980)
@@ -70,10 +70,36 @@
 typedef struct _s3dw_input   s3dw_input;
 typedef struct _s3dw_surface   s3dw_surface;
 typedef struct _s3dw_style   s3dw_style;
-typedef void (*s3dw_callback)(s3dw_widget *);
 
+/**
+ * With s3dw_style you can change the colors/materials of your widgets.
+ * materials are in the same as in s3d_push_materials_a, that means
+ * red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience,
+ * Specular and Diffuse Color.
+ */
+struct _s3dw_style {
+	char *name;     /**< name of the style ... kind of redundant */
+	char *fontface;    /**< font face for all used fonts */
+	float surface_mat[12];  /**< material for the surface background */
+	float input_mat[12];  /**< material for buttonboxes and other widgets */
+	float inputback_mat[12]; /**< material for inputfield background */
+	float text_mat[12];   /**< material for the text on buttons and inputs */
+	float title_mat[12];  /**< material for the title bar */
+	float title_text_mat[12]; /**< material for the text on the title bar */
+};
 
-struct _s3dw_widget {
+/**
+ * This is the most basic widget type, it contains all the "general" widget
+ * information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz
+ * and call s3dw_moveit to turn your action reality. Every other widget has this
+ * type as first entry, so a simple typecast to s3dw_widget will give you the
+ * widgets "general" information. For typecast, you may use S3DWIDGET().
+ *
+ * The pointer ptr allows linking to user-specific datastructures. That comes in
+ * handy if the widget is called back by an event, and the program must now find
+ * out on which data the user reacted.
+ */
+ struct _s3dw_widget {
 	/* private .. */
 	int      type;
 	s3dw_widget *parent;
@@ -94,7 +120,24 @@
 	float    rx, ry, rz;  /* rotation around the axis */
 };
 
+/**
+ * The callback type. Receive the widget which is affected as argument.
+ *
+ * \code
+ * // example
+ * void my_handler(s3dw_widget *widget)
+ * {
+ *         // do something with the widget
+ *         ...
+ * }
+ * \endcode
+ */
+typedef void (*s3dw_callback)(s3dw_widget *);
 
+/**
+ * The buttons is just a button as you would expect it in a 2D widget library.
+ * It only reacts on clicks.
+ */
 struct _s3dw_button {
 	/* private */
 	s3dw_widget   widget;
@@ -103,14 +146,25 @@
 	/* public */
 	s3dw_callback   onclick;
 };
+
+/**
+ * The labels is an label-field where a user may type things. onclick reacts on
+ * click in the field, onedit notifies you when someone writes in the field.
+ */
 struct _s3dw_label {
 	/* private */
 	s3dw_widget   widget;
 	char    *text;
 	/* public */
 	s3dw_callback   onclick;
+};
 
-};
+/**
+ * The Scrollbar should be placed around scrollable content. Currently only the
+ * left and right icons are clickable (lonclick and ronclick callbacks), in
+ * vertical mode lonclick is the callback for the up icon, ronclick the callback
+ * for the down icon.
+ */
 struct _s3dw_scrollbar {
 	/* private */
 	s3dw_widget   widget;
@@ -123,6 +177,10 @@
 
 };
 
+/**
+ * A textbox shows some text with scrollbars to scroll around. It can currently
+ * only react to a click event.
+ */
 struct _s3dw_textbox {
 	/* private */
 	s3dw_widget   widget;
@@ -136,6 +194,10 @@
 
 };
 
+/**
+ * The inputs is an input-field where a user may type things. onclick reacts on
+ * click in the field, onedit notifies you when someone writes in the field.
+ */
 struct _s3dw_input {
 	/* private */
 	s3dw_widget   widget;
@@ -146,6 +208,10 @@
 	s3dw_callback   onedit;
 };
 
+/**
+ * A surface is the window of this widget library, holding all of our elements
+ * like buttons, inputfields etc ...
+ */
 struct _s3dw_surface {
 	/* private */
 	s3dw_widget     widget;
@@ -154,18 +220,6 @@
 	char     *title;
 };
 
-/* style */
-struct _s3dw_style {
-	char *name;     /* name of the style ... kind of redundant */
-	char *fontface;    /* font face for all used fonts */
-	float surface_mat[12];  /* material for the surface background */
-	float input_mat[12];  /* material for buttonboxes and other widgets */
-	float inputback_mat[12]; /* material for inputfield background */
-	float text_mat[12];   /* material for the text on buttons and inputs */
-	float title_mat[12];  /* material for the title bar */
-	float title_text_mat[12]; /* material for the text on the title bar */
-};
-
 #if defined(__cplusplus) || defined(c_plusplus)
 extern "C"
 {

Modified: trunk/libs3dw/surface.c
===================================================================
--- trunk/libs3dw/surface.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/surface.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -125,7 +125,13 @@
 	s3d_flags_off(surface->oid_title, S3D_OF_VISIBLE | S3D_OF_SELECTABLE);
 	s3d_flags_off(surface->oid_tbar, S3D_OF_VISIBLE | S3D_OF_SELECTABLE);
 }
-/* create a new surface */
+
+/**
+ * Creates a new surface (a new window) with title "title" and dimension "width"
+ * x "height".
+ *
+ * See s3dw_surface for information about callbacks which may be defined.
+ */
 s3dw_surface *s3dw_surface_new(const char *title, float width, float height)
 {
 	s3dw_surface *surface;

Modified: trunk/libs3dw/textbox.c
===================================================================
--- trunk/libs3dw/textbox.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/textbox.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -195,7 +195,13 @@
 	s3dw_textbox_scrollright((s3dw_textbox *)widget->parent);
 }
 
-/* create a new textbox in the surface */
+/**
+ * Creates a new textbox on the surface, with "text" written on it and the upper
+ * left corner at (posx,posy) on the surface. Width and height define the size
+ * of the textbox including scrollbars which are rendered around the textfield.
+ *
+ * See s3dw_textbox for information about callbacks which may be defined.
+ */
 s3dw_textbox *s3dw_textbox_new(const s3dw_surface *surface, const char *text, float posx, float posy, float width, float height)
 {
 	s3dw_textbox *textbox;
@@ -232,29 +238,49 @@
 		s3dw_textbox_show(widget);
 }
 
+/**
+ * Scrolls the text in the textbox up by one line, if possible.
+ */
 void s3dw_textbox_scrollup(s3dw_textbox *textbox)
 {
 	if (textbox->window_y > 0)
 		textbox->window_y--;
 	s3dw_textbox_redraw(S3DWIDGET(textbox));
 }
+
+/**
+ * Scrolls the text in the textbox down by one line, if possible.
+ */
 void s3dw_textbox_scrolldown(s3dw_textbox *textbox)
 {
 	textbox->window_y++;
 	s3dw_textbox_redraw(S3DWIDGET(textbox));
 
 }
+
+/**
+ * Scrolls the text in the textbox to the left by one character, if possible.
+ */
 void s3dw_textbox_scrollleft(s3dw_textbox *textbox)
 {
 	if (textbox->window_x > 0)
 		textbox->window_x--;
 	s3dw_textbox_redraw(S3DWIDGET(textbox));
 }
+
+/**
+ * Scrolls the text in the textbox to the right by one character, if possible.
+ */
 void s3dw_textbox_scrollright(s3dw_textbox *textbox)
 {
 	textbox->window_x++;
 	s3dw_textbox_redraw(S3DWIDGET(textbox));
 }
+
+/**
+ * Scrolls the text in the textbox so that the character in row y, column x is
+ * in the top left corner of the textbox.
+ */
 void s3dw_textbox_scrollto(s3dw_textbox *textbox, int x, int y)
 {
 	s3dw_widget *widget = (s3dw_widget *)textbox;
@@ -265,6 +291,9 @@
 	s3dw_textbox_redraw(widget);
 }
 
+/**
+ * Change the text in the referenced textbox to the specified text.
+ */
 void s3dw_textbox_change_text(s3dw_textbox *textbox, const char *text)
 {
 	s3dw_widget *widget = (s3dw_widget *)textbox;

Modified: trunk/libs3dw/widget.c
===================================================================
--- trunk/libs3dw/widget.c	2008-08-29 17:00:25 UTC (rev 979)
+++ trunk/libs3dw/widget.c	2008-08-31 22:19:18 UTC (rev 980)
@@ -97,7 +97,10 @@
 			parent->nobj--;
 		}
 }
-/* properly delete the object, removing kids, own structure and link from parent. */
+
+/**
+ * Deletes any widget. Should be casted with S3DWIDGET().
+ */
 void s3dw_delete(s3dw_widget *widget)
 {
 	s3dw_widget_remove(widget);
@@ -107,12 +110,21 @@
 	free(widget->pobj);
 	s3dwcb_destroy[widget->type](widget); /* type-specific destroy */
 }
-/* toggle a widget visible and show it */
+
+/**
+ * Switches a widget visible. Should be casted with S3DWIDGET().
+ */
 void s3dw_show(s3dw_widget *widget)
 {
 	widget->flags |= S3DW_VISIBLE;
 	s3dw_widget_visible(widget);
 }
+
+/**
+ * Gives focus to the widget, relative to its parent. That means you can focus a
+ * surface, and each surface can focus one of its element, e.g. an input field.
+ * Should be casted with S3DWIDGET().
+ */
 void s3dw_focus(s3dw_widget *focus)
 {
 	int i;
@@ -136,7 +148,11 @@
 	widget->flags |= S3DW_ONSCREEN;
 	s3dwcb_show[widget->type](widget);
 }
-/* apply the moves ... */
+
+/**
+ * Moves/translates the widget as you specified in it's private s3dw_widget
+ * structure. Should be casted with S3DWIDGET().
+ */
 void     s3dw_moveit(s3dw_widget *widget)
 {
 	s3dw_ani_add(widget);



From lazhur at mail.berlios.de  Mon Sep  1 20:44:59 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 1 Sep 2008 20:44:59 +0200
Subject: [S3d-svn] r981 - trunk/Documentation
Message-ID: <200809011844.m81Iix5v005154@sheep.berlios.de>

Author: lazhur
Date: 2008-09-01 20:44:59 +0200 (Mon, 01 Sep 2008)
New Revision: 981

Modified:
   trunk/Documentation/extractdefinitions.py
Log:
Use paramdef for every parameter and not for all one

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-08-31 22:19:18 UTC (rev 980)
+++ trunk/Documentation/extractdefinitions.py	2008-09-01 18:44:59 UTC (rev 981)
@@ -279,11 +279,9 @@
 		create_append_text(sgml, func, function['name'])
 
 		# add parameter to function definition
-		paramdef = create_append(sgml, funcprototype, 'paramdef')
 		param_num = len(function['param'])
 		for i in range(0, param_num):
-			if i != 0:
-				create_append_text(sgml, paramdef, ", ")
+			paramdef = create_append(sgml, funcprototype, 'paramdef')
 
 			create_append_text(sgml, paramdef, function['param'][i]['type'])
 



From lazhur at mail.berlios.de  Mon Sep  1 20:45:10 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 1 Sep 2008 20:45:10 +0200
Subject: [S3d-svn] r982 - in trunk/Documentation: . libs3d libs3dw manpages
	manpages/man1 manpages/man3 manpages/man9
Message-ID: <200809011845.m81IjAWv005221@sheep.berlios.de>

Author: lazhur
Date: 2008-09-01 20:45:05 +0200 (Mon, 01 Sep 2008)
New Revision: 982

Added:
   trunk/Documentation/manpages/man1/
   trunk/Documentation/manpages/man1/dot_mcp.1
   trunk/Documentation/manpages/man1/kism3d.1
   trunk/Documentation/manpages/man1/meshs3d.1
   trunk/Documentation/manpages/man1/s3d.1
   trunk/Documentation/manpages/man1/s3d_x11gate.1
   trunk/Documentation/manpages/man1/s3dfm.1
   trunk/Documentation/manpages/man1/s3dosm.1
   trunk/Documentation/manpages/man1/s3dvt.1
   trunk/Documentation/manpages/man3/
   trunk/Documentation/manpages/man3/s3d_angle_to_cam.3
   trunk/Documentation/manpages/man3/s3d_clear_callback.3
   trunk/Documentation/manpages/man3/s3d_clone.3
   trunk/Documentation/manpages/man3/s3d_clone_target.3
   trunk/Documentation/manpages/man3/s3d_del_object.3
   trunk/Documentation/manpages/man3/s3d_delete_event.3
   trunk/Documentation/manpages/man3/s3d_draw_string.3
   trunk/Documentation/manpages/man3/s3d_find_event.3
   trunk/Documentation/manpages/man3/s3d_flags_off.3
   trunk/Documentation/manpages/man3/s3d_flags_on.3
   trunk/Documentation/manpages/man3/s3d_get_callback.3
   trunk/Documentation/manpages/man3/s3d_ignore_callback.3
   trunk/Documentation/manpages/man3/s3d_import_model_file.3
   trunk/Documentation/manpages/man3/s3d_init.3
   trunk/Documentation/manpages/man3/s3d_link.3
   trunk/Documentation/manpages/man3/s3d_load_line_normals.3
   trunk/Documentation/manpages/man3/s3d_load_materials_a.3
   trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3
   trunk/Documentation/manpages/man3/s3d_load_texture.3
   trunk/Documentation/manpages/man3/s3d_mainloop.3
   trunk/Documentation/manpages/man3/s3d_mcp_focus.3
   trunk/Documentation/manpages/man3/s3d_net_check.3
   trunk/Documentation/manpages/man3/s3d_new_object.3
   trunk/Documentation/manpages/man3/s3d_open_file.3
   trunk/Documentation/manpages/man3/s3d_pep_line.3
   trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_lines.3
   trunk/Documentation/manpages/man3/s3d_pep_material.3
   trunk/Documentation/manpages/man3/s3d_pep_material_a.3
   trunk/Documentation/manpages/man3/s3d_pep_material_texture.3
   trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3
   trunk/Documentation/manpages/man3/s3d_pep_vertex.3
   trunk/Documentation/manpages/man3/s3d_pep_vertices.3
   trunk/Documentation/manpages/man3/s3d_pop_event.3
   trunk/Documentation/manpages/man3/s3d_pop_line.3
   trunk/Documentation/manpages/man3/s3d_pop_material.3
   trunk/Documentation/manpages/man3/s3d_pop_polygon.3
   trunk/Documentation/manpages/man3/s3d_pop_texture.3
   trunk/Documentation/manpages/man3/s3d_pop_vertex.3
   trunk/Documentation/manpages/man3/s3d_process_stack.3
   trunk/Documentation/manpages/man3/s3d_push_event.3
   trunk/Documentation/manpages/man3/s3d_push_line.3
   trunk/Documentation/manpages/man3/s3d_push_lines.3
   trunk/Documentation/manpages/man3/s3d_push_material.3
   trunk/Documentation/manpages/man3/s3d_push_material_a.3
   trunk/Documentation/manpages/man3/s3d_push_materials_a.3
   trunk/Documentation/manpages/man3/s3d_push_polygon.3
   trunk/Documentation/manpages/man3/s3d_push_polygons.3
   trunk/Documentation/manpages/man3/s3d_push_texture.3
   trunk/Documentation/manpages/man3/s3d_push_textures.3
   trunk/Documentation/manpages/man3/s3d_push_vertex.3
   trunk/Documentation/manpages/man3/s3d_push_vertices.3
   trunk/Documentation/manpages/man3/s3d_quit.3
   trunk/Documentation/manpages/man3/s3d_rotate.3
   trunk/Documentation/manpages/man3/s3d_scale.3
   trunk/Documentation/manpages/man3/s3d_select_font.3
   trunk/Documentation/manpages/man3/s3d_set_callback.3
   trunk/Documentation/manpages/man3/s3d_strlen.3
   trunk/Documentation/manpages/man3/s3d_translate.3
   trunk/Documentation/manpages/man3/s3d_unlink.3
   trunk/Documentation/manpages/man3/s3d_usage.3
   trunk/Documentation/manpages/man3/s3d_vector_angle.3
   trunk/Documentation/manpages/man3/s3d_vector_cross_product.3
   trunk/Documentation/manpages/man3/s3d_vector_dot_product.3
   trunk/Documentation/manpages/man3/s3d_vector_length.3
   trunk/Documentation/manpages/man3/s3d_vector_subtract.3
   trunk/Documentation/manpages/man3/s3dw_ani_mate.3
   trunk/Documentation/manpages/man3/s3dw_button_new.3
   trunk/Documentation/manpages/man3/s3dw_delete.3
   trunk/Documentation/manpages/man3/s3dw_focus.3
   trunk/Documentation/manpages/man3/s3dw_getroot.3
   trunk/Documentation/manpages/man3/s3dw_handle_click.3
   trunk/Documentation/manpages/man3/s3dw_handle_key.3
   trunk/Documentation/manpages/man3/s3dw_input_change_text.3
   trunk/Documentation/manpages/man3/s3dw_input_gettext.3
   trunk/Documentation/manpages/man3/s3dw_input_new.3
   trunk/Documentation/manpages/man3/s3dw_label_change_text.3
   trunk/Documentation/manpages/man3/s3dw_label_new.3
   trunk/Documentation/manpages/man3/s3dw_moveit.3
   trunk/Documentation/manpages/man3/s3dw_object_info.3
   trunk/Documentation/manpages/man3/s3dw_show.3
   trunk/Documentation/manpages/man3/s3dw_surface_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3
   trunk/Documentation/manpages/man3/s3dw_textbox_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3
   trunk/Documentation/manpages/man9/
   trunk/Documentation/manpages/man9/mcp_object.9
   trunk/Documentation/manpages/man9/s3d_but_info.9
   trunk/Documentation/manpages/man9/s3d_evt.9
   trunk/Documentation/manpages/man9/s3d_key_event.9
   trunk/Documentation/manpages/man9/s3d_obj_info.9
   trunk/Documentation/manpages/man9/s3dw_button.9
   trunk/Documentation/manpages/man9/s3dw_input.9
   trunk/Documentation/manpages/man9/s3dw_label.9
   trunk/Documentation/manpages/man9/s3dw_scrollbar.9
   trunk/Documentation/manpages/man9/s3dw_style.9
   trunk/Documentation/manpages/man9/s3dw_surface.9
   trunk/Documentation/manpages/man9/s3dw_textbox.9
   trunk/Documentation/manpages/man9/s3dw_widget.9
Removed:
   trunk/Documentation/manpages/dot_mcp.1
   trunk/Documentation/manpages/dot_mcpmanpage.sgml
   trunk/Documentation/manpages/kism3d.1
   trunk/Documentation/manpages/kism3dmanpage.sgml
   trunk/Documentation/manpages/meshs3d.1
   trunk/Documentation/manpages/meshs3dmanpage.sgml
   trunk/Documentation/manpages/s3d.1
   trunk/Documentation/manpages/s3d_x11gate.1
   trunk/Documentation/manpages/s3d_x11gatemanpage.sgml
   trunk/Documentation/manpages/s3dfm.1
   trunk/Documentation/manpages/s3dfmmanpage.sgml
   trunk/Documentation/manpages/s3dmanpage.sgml
   trunk/Documentation/manpages/s3dosm.1
   trunk/Documentation/manpages/s3dosmmanpage.sgml
   trunk/Documentation/manpages/s3dvt.1
   trunk/Documentation/manpages/s3dvtmanpage.sgml
Modified:
   trunk/Documentation/CMakeLists.txt
   trunk/Documentation/README
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/libs3d/structs.docbook
   trunk/Documentation/libs3d/typedefs.docbook
   trunk/Documentation/libs3dw/functions.docbook
   trunk/Documentation/libs3dw/structs.docbook
   trunk/Documentation/libs3dw/typedefs.docbook
   trunk/Documentation/manpages/CMakeLists.txt
   trunk/Documentation/manpages/build-manpages.sh
Log:
Generate man pages for functions and structs

Modified: trunk/Documentation/CMakeLists.txt
===================================================================
--- trunk/Documentation/CMakeLists.txt	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/CMakeLists.txt	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,6 +1,5 @@
 add_subdirectory(libs3d)
 add_subdirectory(libs3dw)
-add_subdirectory(manpages)
 add_subdirectory(server)
 
 project(Documentation C)
@@ -29,7 +28,7 @@
 	)
 
 	# install
-	set(DOC_DIR ${CMAKE_INSTALL_PREFIX}/share/doc/s3d)
+	set(DOC_DIR "${CMAKE_INSTALL_PREFIX}/share/doc/s3d")
 	install(CODE "file(GLOB DOCS ${Documentation_BINARY_DIR}/doc_output/*)\n foreach(file \${DOCS}) \n file(INSTALL DESTINATION ${DOC_DIR} TYPE FILE FILES \"\${file}\") \n endforeach (file \"\${DOCS}\")")
 else (DOCBOOK2HTML_COMPILER)
 	PkgStatus_Later("docbook2html (pkg name: docbook-utils)")
@@ -37,3 +36,5 @@
 	# print late status
 	Collected_PkgStatus("documentation")
 endif (DOCBOOK2HTML_COMPILER)
+
+add_subdirectory(manpages)
\ No newline at end of file

Modified: trunk/Documentation/README
===================================================================
--- trunk/Documentation/README	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/README	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,8 +1,21 @@
-You can read this online on
+You can read this online on http://s3d.berlios.de/doc or compile it yourself,
+for example with docbook2html s3d.docbook
 
-http://s3d.berlios.de/doc
+These source files are partially automatic generated. To update them you must
+run "doxygen xml.doxygen" and ./extractdefinitions.py afterwards.
+manpages can then be generated by running "cd manpages && ./build-manpages.sh"
+and normal html help will be generated by the normal build process.
 
-or compile it yourself, for example with
+When new documentation should generated following files generated by the
+mentioned steps are important for the scm:
 
-docbook2html s3d.docbook
-
+libs3d/functions.docbook
+libs3d/structs.docbook
+libs3d/typedefs.docbook
+libs3dw/functions.docbook
+libs3dw/structs.docbook
+libs3dw/typedefs.docbook
+manpages/man1/*.1
+manpages/man3/*.3 (sgml must not be added to the scm after running ./build-manpages.sh)
+manpages/man9/*.9 (sgml must not be added to the scm after running ./build-manpages.sh)
+build-manpages.sh

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/extractdefinitions.py	2008-09-01 18:45:05 UTC (rev 982)
@@ -33,7 +33,38 @@
 	docbook_typedefs.generate('libs3d', libs3d_typedef)
 	docbook_typedefs.generate('libs3dw', libs3dw_typedef)
 
+	rm_files('./manpages/man3/')
+	manpage_functions.generate("s3d.h", libs3d_func)
+	manpage_functions.generate("s3dw.h", libs3dw_func)
+
+	rm_files('./manpages/man9/')
+	manpage_structs.generate("s3d.h", libs3d_struct)
+	manpage_structs.generate("s3dw.h", libs3dw_struct)
+
+
 """
+Remove all files in a directory and creates it when it does not exist
+"""
+def rm_files(top):
+	try:
+		os.makedirs(top)
+	except OSError:
+		pass
+	for entry in os.listdir(top):
+		if os.path.isfile(os.path.join(top, entry)):
+			os.remove(os.path.join(top, entry))
+
+"""
+Removes _ from beginning of a string
+"""
+def cleanup_stringbegin(string):
+	new_str = string
+	while new_str[0] in ['_']:
+		new_str = new_str[1:]
+	return new_str
+	
+
+"""
 Generate text from all childNodes
 """
 def get_text(node):
@@ -135,6 +166,8 @@
 				para = create_append(sgml, extra_para, 'para')
 				create_append_text(sgml, para, p['text'])
 			else:
+				if p['text'].strip() == '':
+					continue
 				para = create_append(sgml, sect, p['type'])
 				create_append_text(sgml, para, p['text'])
 
@@ -400,5 +433,173 @@
 	generate = Callable(generate)
 	generate_sgml = Callable(generate_sgml)
 
+class manpage_functions:
+	"""
+	Generate manpage docbook file with informations to functions
+	"""
+	def generate(synopsis, functionlist):
+		for func in functionlist:
+			func_file = open('./manpages/man3/'+cleanup_stringbegin(func['name'])+'.sgml', "w")
+			func_file.write('<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">\n')
+			sgml = manpage_functions.generate_sgml(func, synopsis)
+			sgml.writexml(func_file)
+			func_file.close()
+
+	"""
+	Generate manpage docbook dom with informations to a specific function
+	"""
+	def generate_sgml(function, synopsis):
+		sgml = xml.dom.minidom.Document()
+
+		refentry = create_append(sgml, sgml, 'refentry')
+		refentry.setAttribute('id', cleanup_stringbegin(function['name']))
+
+		refmeta = create_append(sgml, refentry, 'refmeta')
+
+		refentrytitle = create_append(sgml, refmeta, 'refentrytitle')
+		create_append_text(sgml, refentrytitle, function['name'])
+
+		manvolnum = create_append(sgml, refmeta, 'manvolnum')
+		create_append_text(sgml, manvolnum, '3')
+
+		refnamediv = create_append(sgml, refentry, 'refnamediv')
+
+		refname = create_append(sgml, refnamediv, 'refname')
+		create_append_text(sgml, refname, function['name'])
+		refpurpose = create_append(sgml, refnamediv, 'refpurpose')
+		create_append_text(sgml, refpurpose, "")
+
+		# synopsis
+		refsynopsisdiv = create_append(sgml, refentry, 'refsynopsisdiv')
+		funcsynopsis = create_append(sgml, refsynopsisdiv, 'funcsynopsis')
+		funcsynopsisinfo = create_append(sgml, funcsynopsis, 'funcsynopsisinfo')
+		create_append_text(sgml, funcsynopsisinfo, "#include <"+synopsis+">")
+
+		# prototype
+		funcprototype = create_append(sgml, funcsynopsis, 'funcprototype')
+
+		funcdef = create_append(sgml, funcprototype, 'funcdef')
+		create_append_text(sgml, funcdef, function['return']+" ")
+
+		func = create_append(sgml, funcdef, 'function')
+		create_append_text(sgml, func, function['name'])
+
+		# add parameter to function definition
+		
+		param_num = len(function['param'])
+		for i in range(0, param_num):
+			paramdef = create_append(sgml, funcprototype, 'paramdef')
+			create_append_text(sgml, paramdef, "\t"+function['param'][i]['type'])
+
+			if function['param'][i]['declname'] != '':
+				if function['param'][i]['type'][-1:] != "*":
+					# dont add space between * and name
+					create_append_text(sgml, paramdef, " ")
+				parameter = create_append(sgml, paramdef, 'parameter')
+				create_append_text(sgml, parameter, function['param'][i]['declname'])
+
+			if function['param'][i]['array'] != '':
+				create_append_text(sgml, paramdef, function['param'][i]['array'])
+
+		# add help to function
+		refsect1 = create_append(sgml, refentry, 'refsect1')
+		title = create_append(sgml, refsect1, 'title')
+		create_append_text(sgml, title, "Description")
+		help_append(sgml, refsect1, function['help'])
+
+		return refentry
+
+	# make functions "static"
+	generate = Callable(generate)
+	generate_sgml = Callable(generate_sgml)
+
+class manpage_structs:
+	"""
+	Generate manpage docbook file with informations to all structs
+	"""
+	def generate(synopsis, structlist):
+		for func in structlist:
+			func_file = open('./manpages/man9/'+cleanup_stringbegin(func['name'])+'.sgml', "w")
+			func_file.write('<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">\n')
+			sgml = manpage_structs.generate_sgml(func, synopsis)
+			sgml.writexml(func_file)
+			func_file.close()
+
+	"""
+	Generate manpage docbook dom with informations to a specific struct
+	"""
+	def generate_sgml(struct, synopsis):
+		sgml = xml.dom.minidom.Document()
+
+		refentry = create_append(sgml, sgml, 'refentry')
+		refentry.setAttribute('id', cleanup_stringbegin(struct['name']))
+
+		refmeta = create_append(sgml, refentry, 'refmeta')
+
+		refentrytitle = create_append(sgml, refmeta, 'refentrytitle')
+		create_append_text(sgml, refentrytitle, struct['name'])
+
+		manvolnum = create_append(sgml, refmeta, 'manvolnum')
+		create_append_text(sgml, manvolnum, '9')
+
+		refnamediv = create_append(sgml, refentry, 'refnamediv')
+
+		refname = create_append(sgml, refnamediv, 'refname')
+		create_append_text(sgml, refname, 'struct ' + struct['name'])
+		refpurpose = create_append(sgml, refnamediv, 'refpurpose')
+		create_append_text(sgml, refpurpose, "")
+
+		# synopsis
+		refsynopsisdiv = create_append(sgml, refentry, 'refsynopsisdiv')
+		funcsynopsis = create_append(sgml, refsynopsisdiv, 'funcsynopsis')
+		funcsynopsisinfo = create_append(sgml, funcsynopsis, 'funcsynopsisinfo')
+		create_append_text(sgml, funcsynopsisinfo, "#include <"+synopsis+">")
+
+		# add definition of struct
+		refsect1 = create_append(sgml, refentry, 'refsect1')
+		title = create_append(sgml, refsect1, 'title')
+		create_append_text(sgml, title, "Structure Members")
+		
+		programlisting = create_append(sgml, refsect1, 'programlisting')
+		create_append_text(sgml, programlisting, 'struct '+struct['name']+' {\n')
+		for element in struct['elements']:
+			create_append_text(sgml, programlisting, '\t'+element['type'])
+			if element['type'][-1:] != "*":
+				# dont add space between * and name
+				create_append_text(sgml, programlisting, " ")
+			create_append_text(sgml, programlisting, element['name']+';\n')
+		create_append_text(sgml, programlisting, '}')
+
+		# add help to struct
+		refsect1 = create_append(sgml, refentry, 'refsect1')
+		title = create_append(sgml, refsect1, 'title')
+		create_append_text(sgml, title, "Description")
+		help_append(sgml, refsect1, struct['help'])
+
+		# add list of struct members with their help
+		variablelist = create_append(sgml, refsect1, 'variablelist')
+		for element in struct['elements']:
+			# ignore members with empty help texts
+			if len(element['help']) == 1 and element['help'][0]['text'].strip() == '':
+				continue
+
+			varlistentry = create_append(sgml, variablelist, 'varlistentry')
+			term = create_append(sgml, varlistentry, 'term')
+			create_append_text(sgml, term, element['name'])
+			listitem = create_append(sgml, varlistentry, 'listitem')
+
+			# add help to struct member
+			help_append(sgml, listitem, element['help'])
+
+		# remove empty variablelist
+		if len(variablelist.childNodes) == 0:
+			refsect1.removeChild(variablelist)
+
+		return refentry
+
+	# make functions "static"
+	generate = Callable(generate)
+	generate_sgml = Callable(generate_sgml)
+
 if __name__ == '__main__':
 	main()

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,6 +1,4 @@
-<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Prints the possible parameter for the client library (which can be passed in s3d_init())         </para></sect2><sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter>, char ***<parameter>argv</parameter>, const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
+<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in s3d_init())         </para></sect2><sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
  {
          if (!s3d_init(&amp;argc, &amp;argv, &quot;Hello world&quot;))
          {
@@ -9,26 +7,18 @@
          }
          return(0);
  }
-</programlisting><para>         </para></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
-</para><para>closes the connection and cleares the event-stack. it can also be used to leave the s3d_mainloop().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>takes a function as argument. it will loop this function until a quit-event is received. you can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
+</programlisting></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>closes the connection and cleares the event-stack. it can also be used to leave the s3d_mainloop().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>takes a function as argument. it will loop this function until a quit-event is received. you can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
  {
          usleep(1000); // sleep 1 ms in every cycle
  }
  ...
 
  s3d_mainloop(mainloop());
-</programlisting><para>         </para></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>vbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
+</programlisting></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef!
 ><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
                       1.0, 2.0, 3.0,
                       3.0, 2.0, 1.0};
  s3d_push_vertices(object, vertices, 3); // pushing 3 vertices
-</programlisting><para>         </para></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. the specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <param!
 eter>spec_b</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>amb_a</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>spec_a</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter>, float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
+</programlisting></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given!
  in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. the specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <paramete!
 r>diff_r</parameter></paramdef><paramdef>float <parameter>diff!
 _g</para
meter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter!
 ></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
 </para><para>mbuf[n*12 + 0-3] - ambience</para><para>mbuf[n*12 + 4-7] - specular</para><para>mbuf[n *12 + 8-11] - diffusion values
 </para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy s3d_push_material_a() function.</para><programlisting> // each line has r,g,b,a value
  float bla[24]=
@@ -40,19 +30,14 @@
           0, 1, 1, 1};
 
  s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material
-</programlisting><para>         </para></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>amb_a</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>spec_a</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter>, float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.         </para></sect2><sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>v1</parameter>, uint32_t <parameter>v2</parameter>, uint32_t <parameter>v3</parameter>, uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = s3d_new_object();   // create a new object
+</programlisting></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynop!
 sis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.         </para></sect2><sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;<!
 /funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_lo!
 ad_mater
ials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>!
 push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = s3d_new_object();   // create a new object
  s3d_push_vertex(oid, 0.0, 0.0, 0.0);
  s3d_push_vertex(oid, 0.0, 1.0, 0.0);
  s3d_push_vertex(oid, 1.0, 0.0, 0.0);
  s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
  s3d_push_polygon(oid, 0, 1, 2, 0);
  // this will create a red polygon
-</programlisting><para>         </para></sect2><sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>pbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
+</programlisting></sect2><sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>pbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
  int oid = s3d_new_object();   // create a new object
  s3d_push_vertex(oid, 0.0, 0.0, 0.0);
  s3d_push_vertex(oid, 0.0, 1.0, 0.0);
@@ -60,77 +45,28 @@
  s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
  s3d_push_polygons(oid, pbuf, 1);
  // push one polygon with the pbuf data
-</programlisting><para>         </para></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>v1</parameter>, uint32_t <parameter>v2</parameter>, uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>lbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint16_t <parameter>w</parameter>, uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter>, const uint16_t *<parameter>tbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in Total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x1</parameter>, float <parameter>y1</parameter>, float <parameter>x2</parameter>, float <parameter>y2</parame!
 ter>, float <parameter>x3</parameter>, float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>tbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()         </para></sect2><sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>vbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter>, int <parameter>v1</parameter>, int <parameter>v2</parameter>, int <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Alter the latest pushed line, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>lbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>tbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>tex</parameter>, uint16_t <parameter>xpos</parameter>, uint16_t <parameter>ypos</parameter>, uint16_t <parameter>w</parameter>, uint16_t <parameter>h</parameter>, const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter>, int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter>, int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&quot; if you move the table around in space. It will also rotate with the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
-        </para></warning></sect2><sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>turn some flags off for object.         </para></sect2><sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.</para><warning><para>Translation is absolute, not relative!
+</programlisting></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>l!
 buf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>!
 int <function>s3d_push_textures</function></funcdef><paramdef>!
 int <par
ameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsi!
 sinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <paramete!
 r>object</parameter></paramdef><paramdef>uint32_t <parameter>n!
 </parame
ter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis>!
 <para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in Total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>n!
 buf should contain n * 9 float values, for each vertex a norma!
 l vector
 (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp t!
 he last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()         </para></sect2><sect2 id="s3d_pep_material_te!
 xture"><title>s3d_pep_material_texture</title><funcsynopsis><f!
 uncsynop
sisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3!
 d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramd!
 ef></funcprototype></funcsynopsis><para>Alter the latest pushe!
 d line, 
overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter!
 >nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 i!
 d="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_co!
 ords</ti
tle><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parame!
 ter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2><sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sec!
 t2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&!
 quot; if you move the table around in space. It will also rota!
 te with 
the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
+        </para></warning></sect2><sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>turn some flags off for object.         </para></sect2><sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.<!
 /para><warning><para>Translation is absolute, not relative!
 </para></warning><programlisting> s3d_translate(object, 2, 0, 0);
  s3d_translate(object, 4, 0, 0);
  // object will end up at 4,0,0 and not 6,0,0!!
-</programlisting><para>         </para></sect2><sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes it any clearer ;)</para><warning><para>Rotate is absolute, not relative!
+</programlisting></sect2><sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes i!
 t any clearer ;)</para><warning><para>Rotate is absolute, not relative!
 </para></warning><programlisting> s3d_rotate(object, 90,  0, 0);
  s3d_rotate(object, 180, 0, 0);
  // object will be rotated 180 degrees around the x-axis, not 270 degress!
-</programlisting><para>         </para></sect2><sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative! 
-        </para></warning></sect2><sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter>, char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2><sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>This selects a font for the s3d_draw_string() function.</para><warning><para>Of course, you won't forget to toggle it visible, won't you?
+</programlisting></sect2><sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative! 
+        </para></warning></sect2><sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype></funcsynopsis><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2><sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef><paramdef>char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2><sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>This selects a font for the s3d_draw_string() function.</para><warning><para>Of course, you won't forget to togg!
 le it visible, won't you?
 </para></warning><programlisting> s3d_select_font(&quot;vera&quot;); // will use the vera font face
-</programlisting><para>         </para></sect2><sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter>, float *<parameter>xlen</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
+</programlisting></sect2><sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef><paramdef>float *<parameter>xlen</parameter></paramdef></funcprototype></funcsynopsis><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
  float len;
  s3d_select_font(&quot;vera&quot;);
  s3d_draw_string(str, len);
 
  // not interested in the length? do that: s3d_draw_string(str, NULL);
-</programlisting><para>         </para></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[], float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[], const float <parameter>cam_pos</parameter>[], float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[], float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter>, s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling s3d_init()
+</programlisting></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://!
 en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</param!
 eter>[]</paramdef><paramdef>float <parameter>result_vector</pa!
 rameter>
[]</paramdef></funcprototype></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="!
 s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>!
 const float <parameter>vector1</parameter>[]</paramdef><paramd!
 ef>const
 float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>v!
 oid</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>deletes an event, the argu!
 ment is the pointer to the event which is to be deleted (maybe!
  obtaine
d from s3d_find_event).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling s3d_init()
 </para></warning><programlisting> #include &lt;inttypes.h&gt;
 
  void obj_click(struct s3d_evt event)
@@ -140,14 +76,8 @@
  ...
  s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click);
  // this will tell you when a object got clicked
-</programlisting><para>         </para></sect2><sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Clears the callback which is associated with the event.         </para></sect2><sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2><sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Returns the Callback-function of the event.</para><programlisting> struct s3d_evt e;
+</programlisting></sect2><sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Clears the callback which is associated with the event.         </para></sect2><sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2><sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d!
 .h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the Callback-function of the event.</para><programlisting> struct s3d_evt e;
  ...
  s3d_get_callback(S3D_EVENT_KEY)(e);
  // will call the key-handling function with argument e.
-</programlisting><para>         </para></sect2><sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
-</para><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2><sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.         </para></sect2><sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
-</para><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>
\ No newline at end of file
+</programlisting></sect2><sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2><sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.      !
    </para></sect2><sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3d/structs.docbook
===================================================================
--- trunk/Documentation/libs3d/structs.docbook	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/libs3d/structs.docbook	2008-09-01 18:45:05 UTC (rev 982)
@@ -3,20 +3,14 @@
 	int length;
 	char *buf;
 	struct s3d_evt *next;
-}</programlisting><para>
-</para><para>This is the event information holder.     </para><variablelist><varlistentry><term>event</term><listitem><para>
-</para><para>gives the event type         </para></listitem></varlistentry><varlistentry><term>length</term><listitem><para>
-</para><para>gives the length of the buffer *buf         </para></listitem></varlistentry><varlistentry><term>buf</term><listitem><para>
-</para><para>is the pointer to the multiple purpose buffer, which will have more specific information about the object         </para></listitem></varlistentry><varlistentry><term>next</term><listitem><para>
-</para><para>can be safely ignored ;)         </para></listitem></varlistentry></variablelist></sect2><sect2 id="structmcp_object"><title>struct mcp_object</title><programlisting>struct mcp_object {
+}</programlisting><para>This is the event information holder.     </para><variablelist><varlistentry><term>event</term><listitem><para>gives the event type         </para></listitem></varlistentry><varlistentry><term>length</term><listitem><para>gives the length of the buffer *buf         </para></listitem></varlistentry><varlistentry><term>buf</term><listitem><para>is the pointer to the multiple purpose buffer, which will have more specific information about the object         </para></listitem></varlistentry><varlistentry><term>next</term><listitem><para>can be safely ignored ;)         </para></listitem></varlistentry></variablelist></sect2><sect2 id="structmcp_object"><title>struct mcp_object</title><programlisting>struct mcp_object {
 	uint32_t object;
 	float trans_x;
 	float trans_y;
 	float trans_z;
 	float r;
 	char name;
-}</programlisting><para>
-</para><para>Deprecated</para><para>don't use, to be removed soon (use struct s3d_but_info). ;)     </para></sect2><sect2 id="structs3d_obj_info"><title>struct s3d_obj_info</title><programlisting>struct s3d_obj_info {
+}</programlisting><para>Deprecated</para><para>don't use, to be removed soon (use struct s3d_but_info). ;)     </para></sect2><sect2 id="structs3d_obj_info"><title>struct s3d_obj_info</title><programlisting>struct s3d_obj_info {
 	uint32_t object;
 	uint32_t flags;
 	float trans_x;
@@ -28,15 +22,12 @@
 	float scale;
 	float r;
 	char name;
-}</programlisting><para>
-</para><para>Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp.</para><para>Special objects like camera, pointer will have the &quot;sys_&quot; prefix in the name and will be named &quot;pointer0&quot;, &quot;pointer1&quot; ... or &quot;cam0&quot;, &quot;cam1&quot; ... For cam object, scale will contain the aspect ratio.     </para></sect2><sect2 id="structs3d_but_info"><title>struct s3d_but_info</title><programlisting>struct s3d_but_info {
+}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp.</para><para>Special objects like camera, pointer will have the &quot;sys_&quot; prefix in the name and will be named &quot;pointer0&quot;, &quot;pointer1&quot; ... or &quot;cam0&quot;, &quot;cam1&quot; ... For cam object, scale will contain the aspect ratio.     </para></sect2><sect2 id="structs3d_but_info"><title>struct s3d_but_info</title><programlisting>struct s3d_but_info {
 	uint8_t button;
 	uint8_t state;
-}</programlisting><para>
-</para><para>Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.     </para></sect2><sect2 id="structs3d_key_event"><title>struct s3d_key_event</title><programlisting>struct s3d_key_event {
+}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.     </para></sect2><sect2 id="structs3d_key_event"><title>struct s3d_key_event</title><programlisting>struct s3d_key_event {
 	uint16_t keysym;
 	uint16_t unicode;
 	uint16_t modifier;
 	uint16_t state;
-}</programlisting><para>
-    </para></sect2>
\ No newline at end of file
+}</programlisting></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3d/typedefs.docbook
===================================================================
--- trunk/Documentation/libs3d/typedefs.docbook	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/libs3d/typedefs.docbook	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,2 +1 @@
-<sect2 id="s3d_cb"><title>typedef s3d_cb</title><programlisting>typedef int(* s3d_cb)(struct s3d_evt *)</programlisting><para>
-</para><para>This defines the callback format. Each callback should return void and take an argument of struct s3d_evt *. Callbacks can be defined with s3d_set_callback().         </para></sect2>
\ No newline at end of file
+<sect2 id="s3d_cb"><title>typedef s3d_cb</title><programlisting>typedef int(* s3d_cb)(struct s3d_evt *)</programlisting><para>This defines the callback format. Each callback should return void and take an argument of struct s3d_evt *. Callbacks can be defined with s3d_set_callback().         </para></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3dw/functions.docbook
===================================================================
--- trunk/Documentation/libs3dw/functions.docbook	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/libs3dw/functions.docbook	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,31 +1,11 @@
-<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button * <function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter>, const char *<parameter>text</parameter>, float <parameter>posx</parameter>, float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See s3dw_button for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label * <function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter>, const char *<parameter>text</parameter>, float <parameter>posx</parameter>, float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See s3dw_label for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input * <function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter>, float <parameter>width</parameter>, float <parameter>posx</parameter>, float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Creates a new input-box on the surface with a input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with s3dw_input_change_text, and received with s3dw_input_gettext</para><para>See s3dw_input for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox * <function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter>, const char *<parameter>text</parameter>, float <parameter>posx</parameter>, float <parameter>posy</parameter>, float <parameter>width</parameter>, float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See s3dw_textbox for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char * <function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2><sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter>, const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Change the text in the referenced input-box to the specified text.         </para></sect2><sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter>, const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Change the text in the referenced label to the specified text.         </para></sect2><sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface * <function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter>, float <parameter>width</parameter>, float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See s3dw_surface for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget * <function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use s3dw_moveit()</para><programlisting> s3dw_widget *root = s3dw_getroot();
+<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button * <function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See s3dw_button for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label * <function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface<!
 /parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See s3dw_label for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input * <function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new input-box on the surface with a!
  input width of &quot;width&quot;, the upper left corner at (p!
 osx,posy
) on the surface. The input-box is empty on creation and can be change with s3dw_input_change_text, and received with s3dw_input_gettext</para><para>See s3dw_input for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox * <function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and !
 height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See s3dw_textbox for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char * <function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2><sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></fun!
 csynopsis><para>Change the text in the referenced input-box to!
  the spe
cified text.         </para></sect2><sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2><sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface * <function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quo!
 t;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See s3dw_surface for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget * <function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use s3dw_moveit()</para><programlisting> s3dw_widget *root = s3dw_getroot();
  // move widget center to (0,5,0). upon creation, it's centered at (0,0,0),
  // so this might move it up
  root-&gt;x=0;
  root-&gt;y=5;
  root-&gt;z=0;
  s3dw_moveit(root);
-</programlisting><para>         </para></sect2><sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Scrolls the text in the textbox up by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scrollright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter>, int <parameter>x</parameter>, int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2><sect2 id="s3dw_textbox_change_text"><title>s3dw_textbox_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter>, const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>Change the text in the referenced textbox to the specified text.         </para></sect2><sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specifiy it itself as the clickhandler.</para><programlisting> // way 1:
+</programlisting></sect2><sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <fun!
 ction>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>tex!
 tbox</parameter></paramdef></funcprototype></funcsynopsis><par!
 a>Scroll
s the text in the textbox up by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scro!
 llright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2><sect2 id="s3dw_textbox_change_text"><title>s3dw_te!
 xtbox_change_text</title><funcsynopsis><funcsynopsisinfo>#incl!
 ude &lt;
s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2><sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specifiy it itself as the clickhandler.</para><programlisting> // way 1:
  s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dw_handle_click);
 
  // way 2:
@@ -39,8 +19,7 @@
  }
  ....
  s3d_set_callback(S3D_EVENT_OBJ_CLICK,click);
-</programlisting><para>         </para></sect2><sect2 id="s3dw_handle_key"><title>s3dw_handle_key</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_key</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;)</para><programlisting> // way 1:
+</programlisting></sect2><sect2 id="s3dw_handle_key"><title>s3dw_handle_key</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_key</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;)</para><programlisting> // way 1:
  s3d_set_callback(S3D_EVENT_KEY,s3dw_handle_key);
 
  // way 2:
@@ -54,9 +33,7 @@
  }
  ....
  s3d_set_callback(S3D_EVENT_KEY,key);
-</programlisting><para>         </para></sect2><sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
-</para><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2><sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
-</para><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
+</programlisting></sect2><sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2><sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
  static struct timespec t={0.33*1000*1000}; // 33 mili seconds
  void mainloop()
  {
@@ -67,4 +44,4 @@
 
  ....
  s3d_mainloop(mainloop);
-</programlisting><para>         </para></sect2>
\ No newline at end of file
+</programlisting></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3dw/structs.docbook
===================================================================
--- trunk/Documentation/libs3dw/structs.docbook	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/libs3dw/structs.docbook	2008-09-01 18:45:05 UTC (rev 982)
@@ -7,16 +7,7 @@
 	float text_mat;
 	float title_mat;
 	float title_text_mat;
-}</programlisting><para>
-</para><para>With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.     </para><variablelist><varlistentry><term>name</term><listitem><para>
-</para><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>
-</para><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>
-</para><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>
-</para><para>material for buttonboxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>
-</para><para>material for inputfield background         </para></listitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>
-</para><para>material for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>
-</para><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>
-</para><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2><sect2 id="struct_s3dw_widget"><title>struct _s3dw_widget</title><programlisting>struct _s3dw_widget {
+}</programlisting><para>With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.     </para><variablelist><varlistentry><term>name</term><listitem><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>material for buttonboxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>material for inputfield background         </para></listitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>mate!
 rial for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2><sect2 id="struct_s3dw_widget"><title>struct _s3dw_widget</title><programlisting>struct _s3dw_widget {
 	int type;
 	s3dw_widget *parent;
 	s3dw_style *style;
@@ -42,19 +33,16 @@
 	float rx;
 	float ry;
 	float rz;
-}</programlisting><para>
-</para><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2><sect2 id="struct_s3dw_button"><title>struct _s3dw_button</title><programlisting>struct _s3dw_button {
+}</programlisting><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2><sect2 id="struct_s3dw_button"><title>struct _s3dw_button</title><programlisting>struct _s3dw_button {
 	s3dw_widget widget;
 	char *text;
 	uint32_t oid_text;
 	s3dw_callback onclick;
-}</programlisting><para>
-</para><para>The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.     </para></sect2><sect2 id="struct_s3dw_label"><title>struct _s3dw_label</title><programlisting>struct _s3dw_label {
+}</programlisting><para>The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.     </para></sect2><sect2 id="struct_s3dw_label"><title>struct _s3dw_label</title><programlisting>struct _s3dw_label {
 	s3dw_widget widget;
 	char *text;
 	s3dw_callback onclick;
-}</programlisting><para>
-</para><para>The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_scrollbar"><title>struct _s3dw_scrollbar</title><programlisting>struct _s3dw_scrollbar {
+}</programlisting><para>The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_scrollbar"><title>struct _s3dw_scrollbar</title><programlisting>struct _s3dw_scrollbar {
 	s3dw_widget widget;
 	float pos;
 	float max;
@@ -64,8 +52,7 @@
 	int baroid;
 	s3dw_callback lonclick;
 	s3dw_callback ronclick;
-}</programlisting><para>
-</para><para>The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.     </para></sect2><sect2 id="struct_s3dw_textbox"><title>struct _s3dw_textbox</title><programlisting>struct _s3dw_textbox {
+}</programlisting><para>The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.     </para></sect2><sect2 id="struct_s3dw_textbox"><title>struct _s3dw_textbox</title><programlisting>struct _s3dw_textbox {
 	s3dw_widget widget;
 	s3dw_scrollbar *scroll_vertical;
 	s3dw_scrollbar *scroll_horizontal;
@@ -75,18 +62,15 @@
 	int window_x;
 	int window_y;
 	s3dw_callback onclick;
-}</programlisting><para>
-</para><para>A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.     </para></sect2><sect2 id="struct_s3dw_input"><title>struct _s3dw_input</title><programlisting>struct _s3dw_input {
+}</programlisting><para>A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.     </para></sect2><sect2 id="struct_s3dw_input"><title>struct _s3dw_input</title><programlisting>struct _s3dw_input {
 	s3dw_widget widget;
 	char *text;
 	uint32_t oid_text;
 	s3dw_callback onclick;
 	s3dw_callback onedit;
-}</programlisting><para>
-</para><para>The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_surface"><title>struct _s3dw_surface</title><programlisting>struct _s3dw_surface {
+}</programlisting><para>The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_surface"><title>struct _s3dw_surface</title><programlisting>struct _s3dw_surface {
 	s3dw_widget widget;
 	uint32_t oid_title;
 	uint32_t oid_tbar;
 	char *title;
-}</programlisting><para>
-</para><para>A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...     </para></sect2>
\ No newline at end of file
+}</programlisting><para>A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...     </para></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3dw/typedefs.docbook
===================================================================
--- trunk/Documentation/libs3dw/typedefs.docbook	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/libs3dw/typedefs.docbook	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,16 +1,7 @@
-<sect2 id="s3dw_widget"><title>typedef s3dw_widget</title><programlisting>typedef struct _s3dw_widget s3dw_widget</programlisting><para>
-        </para></sect2><sect2 id="s3dw_button"><title>typedef s3dw_button</title><programlisting>typedef struct _s3dw_button s3dw_button</programlisting><para>
-        </para></sect2><sect2 id="s3dw_label"><title>typedef s3dw_label</title><programlisting>typedef struct _s3dw_label s3dw_label</programlisting><para>
-        </para></sect2><sect2 id="s3dw_textbox"><title>typedef s3dw_textbox</title><programlisting>typedef struct _s3dw_textbox s3dw_textbox</programlisting><para>
-        </para></sect2><sect2 id="s3dw_scrollbar"><title>typedef s3dw_scrollbar</title><programlisting>typedef struct _s3dw_scrollbar s3dw_scrollbar</programlisting><para>
-        </para></sect2><sect2 id="s3dw_input"><title>typedef s3dw_input</title><programlisting>typedef struct _s3dw_input s3dw_input</programlisting><para>
-        </para></sect2><sect2 id="s3dw_surface"><title>typedef s3dw_surface</title><programlisting>typedef struct _s3dw_surface s3dw_surface</programlisting><para>
-        </para></sect2><sect2 id="s3dw_style"><title>typedef s3dw_style</title><programlisting>typedef struct _s3dw_style s3dw_style</programlisting><para>
-        </para></sect2><sect2 id="s3dw_callback"><title>typedef s3dw_callback</title><programlisting>typedef void(* s3dw_callback)(s3dw_widget *)</programlisting><para>
-</para><para>The callback type. Receive the widget which is affected as argument.</para><programlisting> // example
+<sect2 id="s3dw_widget"><title>typedef s3dw_widget</title><programlisting>typedef struct _s3dw_widget s3dw_widget</programlisting></sect2><sect2 id="s3dw_button"><title>typedef s3dw_button</title><programlisting>typedef struct _s3dw_button s3dw_button</programlisting></sect2><sect2 id="s3dw_label"><title>typedef s3dw_label</title><programlisting>typedef struct _s3dw_label s3dw_label</programlisting></sect2><sect2 id="s3dw_textbox"><title>typedef s3dw_textbox</title><programlisting>typedef struct _s3dw_textbox s3dw_textbox</programlisting></sect2><sect2 id="s3dw_scrollbar"><title>typedef s3dw_scrollbar</title><programlisting>typedef struct _s3dw_scrollbar s3dw_scrollbar</programlisting></sect2><sect2 id="s3dw_input"><title>typedef s3dw_input</title><programlisting>typedef struct _s3dw_input s3dw_input</programlisting></sect2><sect2 id="s3dw_surface"><title>typedef s3dw_surface</title><programlisting>typedef struct _s3dw_surface s3dw_surface</programlisting></sect2><sect2 id=!
 "s3dw_style"><title>typedef s3dw_style</title><programlisting>typedef struct _s3dw_style s3dw_style</programlisting></sect2><sect2 id="s3dw_callback"><title>typedef s3dw_callback</title><programlisting>typedef void(* s3dw_callback)(s3dw_widget *)</programlisting><para>The callback type. Receive the widget which is affected as argument.</para><programlisting> // example
  void my_handler(s3dw_widget *widget)
  {
          // do something with the widget
          ...
  }
-</programlisting><para>         </para></sect2>
\ No newline at end of file
+</programlisting></sect2>
\ No newline at end of file

Modified: trunk/Documentation/manpages/CMakeLists.txt
===================================================================
--- trunk/Documentation/manpages/CMakeLists.txt	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/CMakeLists.txt	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,8 +1,6 @@
-install(FILES "dot_mcp.1" DESTINATION share/man/man1)
-install(FILES "kism3d.1" DESTINATION share/man/man1)
-install(FILES "meshs3d.1" DESTINATION share/man/man1)
-install(FILES "s3dfm.1" DESTINATION share/man/man1)
-install(FILES "s3d.1" DESTINATION share/man/man1)
-install(FILES "s3dosm.1" DESTINATION share/man/man1)
-install(FILES "s3dvt.1" DESTINATION share/man/man1)
-install(FILES "s3d_x11gate.1" DESTINATION share/man/man1)
+file(GLOB man1 "${Documentation_SOURCE_DIR}/manpages/man1/*.1")
+install(FILES ${man1} DESTINATION share/man/man1)
+file(GLOB man3 "${Documentation_SOURCE_DIR}/manpages/man3/*.3")
+install(FILES ${man3} DESTINATION share/man/man3)
+file(GLOB man9 "${Documentation_SOURCE_DIR}/manpages/man9/*.9")
+install(FILES ${man9} DESTINATION share/man/man9)

Modified: trunk/Documentation/manpages/build-manpages.sh
===================================================================
--- trunk/Documentation/manpages/build-manpages.sh	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/build-manpages.sh	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,4 +1,9 @@
 #! /bin/sh -e
-for man in dot_mcp.1  kism3d.1  meshs3d.1  s3d.1  s3dfm.1  s3dosm.1  s3dvt.1  s3d_x11gate.1; \
-               do docbook-to-man ${man%??}manpage.sgml >$man; \
+
+for i in 1 3 9; do
+	for man in man${i}/*.sgml; do
+		if [ -e ${man}  ] ; then
+			docbook-to-man ${man} >${man%.sgml}.${i};
+		fi
+	done
 done

Deleted: trunk/Documentation/manpages/dot_mcp.1
===================================================================
--- trunk/Documentation/manpages/dot_mcp.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/dot_mcp.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,25 +0,0 @@
-.TH "dot_mcp" "1" 
-.SH "NAME" 
-dot_mcp \(em  mcp for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBdot_mcp\fR [\-\-s3d-url \fIurl\fR]  
-.SH "OPTIONS" 
-.PP 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBdot_mcp\fR is below. 
- 
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "DESCRIPTION" 
-.PP 
-\fBdot_mcp(1)\fR is a mcp (which is the window manager in s3d-terms) for s3d. 
- 
-.PP 
- 
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Fri 29 Aug 2008, 18:39 

Deleted: trunk/Documentation/manpages/dot_mcpmanpage.sgml
===================================================================
--- trunk/Documentation/manpages/dot_mcpmanpage.sgml	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/dot_mcpmanpage.sgml	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,58 +0,0 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
-  <!ENTITY gnu         "<acronym>GNU</acronym>">
-
-  <!ENTITY program     "dot_mcp">
-]>
-<refentry id="dotmcp">
-
-	<refmeta> 
-		<refentrytitle>&program;</refentrytitle>
-		<manvolnum>1</manvolnum>
-	</refmeta> 
-	
-	<refnamediv> 
-		<refname>&program;</refname>
-		<refpurpose> mcp for s3d </refpurpose>
-	</refnamediv>
-
-	<refsynopsisdiv>
-		<cmdsynopsis>
-			<command>&program;</command>
-			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
-		</cmdsynopsis>
-	</refsynopsisdiv>
-
-	<refsect1>
-		<title>OPTIONS</title>
-		<para>
-			This program follows the usual &gnu; command line syntax. A summary of
-			the options supported by <command>&program;</command> is below.
-		</para>
-		<variablelist>
-			<varlistentry>
-				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
-				<listitem>
-					<para> skip S3D environment and connect to this url </para>
-				</listitem>
-			</varlistentry>
-		</variablelist>
-	</refsect1> 
-	
-	<refsect1> 
-		<title>DESCRIPTION</title> 
-		<para>
-			<command>&program;(1)</command> is a mcp (which is the window manager in s3d-terms) for s3d.
-		</para>
-		<para> </para>
-	</refsect1> 
-	
-	<refsect1>
-		<title>SEE ALSO</title>
-		<para><command>s3d</command>(1).</para>
-
-		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
-		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
-	</refsect1>
-	
-</refentry> 
-

Deleted: trunk/Documentation/manpages/kism3d.1
===================================================================
--- trunk/Documentation/manpages/kism3d.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/kism3d.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,26 +0,0 @@
-.TH "kism3d" "1" 
-.SH "NAME" 
-kism3d \(em  802.11 visualizer for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBkism3d\fR [\-\-s3d-url \fIurl\fR] \fIHOST\fR:\fIPORT\fR  
-.SH "DESCRIPTION" 
-.PP 
-\fBkism3d(1)\fR is a 3D 802.11 visualizer for kismet. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
- 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBkism3d\fR is below. 
- 
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1), \fBkismet\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Fri 29 Aug 2008, 18:39 

Deleted: trunk/Documentation/manpages/kism3dmanpage.sgml
===================================================================
--- trunk/Documentation/manpages/kism3dmanpage.sgml	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/kism3dmanpage.sgml	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,59 +0,0 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
-  <!ENTITY gnu         "<acronym>GNU</acronym>">
-
-  <!ENTITY program     "kism3d">
-]>
-<refentry id="kism3d">
-
-	<refmeta> 
-		<refentrytitle>&program;</refentrytitle>
-		<manvolnum>1</manvolnum>
-	</refmeta> 
-	
-	<refnamediv> 
-		<refname>&program;</refname>
-		<refpurpose> 802.11 visualizer for s3d </refpurpose>
-	</refnamediv>
-	
-	<refsynopsisdiv> 
-		<cmdsynopsis> 
-			<command>&program;</command>
-			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
-			<arg choice="plain"><replaceable>HOST</replaceable>:<replaceable>PORT</replaceable></arg>
-		</cmdsynopsis>
-	</refsynopsisdiv> 
-	
-	<refsect1> 
-		<title>DESCRIPTION</title> 
-		<para>
-			<command>&program;(1)</command> is a 3D 802.11 visualizer for kismet.
-		</para>
-		<para> </para>
-	</refsect1> 
-	
-	<refsect1>
-		<title>OPTIONS</title> 
-		<para> 
-			This program follows the usual &gnu; command line syntax. A summary of
-			the options supported by <command>&program;</command> is below.
-		</para>
-		<variablelist>
-			<varlistentry>
-				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
-				<listitem>
-					<para> skip S3D environment and connect to this url </para>
-				</listitem>
-			</varlistentry>
-		</variablelist> 
-	</refsect1> 
-		
-	<refsect1> 
-		<title>SEE ALSO</title>
-		<para> <command>s3d</command>(1), <command>kismet</command>(1).</para>
-
-		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
-		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
-	</refsect1>
-	
-</refentry> 
-

Copied: trunk/Documentation/manpages/man1/dot_mcp.1 (from rev 981, trunk/Documentation/manpages/dot_mcp.1)
===================================================================
--- trunk/Documentation/manpages/dot_mcp.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man1/dot_mcp.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,25 @@
+.TH "dot_mcp" "1" 
+.SH "NAME" 
+dot_mcp \(em  mcp for s3d  
+.SH "SYNOPSIS" 
+.PP 
+\fBdot_mcp\fR [\-\-s3d-url \fIurl\fR]  
+.SH "OPTIONS" 
+.PP 
+This program follows the usual GNU command line syntax. A summary of 
+the options supported by \fBdot_mcp\fR is below. 
+ 
+.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
+skip S3D environment and connect to this url  
+.SH "DESCRIPTION" 
+.PP 
+\fBdot_mcp(1)\fR is a mcp (which is the window manager in s3d-terms) for s3d. 
+ 
+.PP 
+ 
+.SH "SEE ALSO" 
+.PP 
+\fBs3d\fR(1). 
+.PP 
+\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Copied: trunk/Documentation/manpages/man1/kism3d.1 (from rev 981, trunk/Documentation/manpages/kism3d.1)
===================================================================
--- trunk/Documentation/manpages/kism3d.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man1/kism3d.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,26 @@
+.TH "kism3d" "1" 
+.SH "NAME" 
+kism3d \(em  802.11 visualizer for s3d  
+.SH "SYNOPSIS" 
+.PP 
+\fBkism3d\fR [\-\-s3d-url \fIurl\fR] \fIHOST\fR:\fIPORT\fR  
+.SH "DESCRIPTION" 
+.PP 
+\fBkism3d(1)\fR is a 3D 802.11 visualizer for kismet. 
+ 
+.PP 
+ 
+.SH "OPTIONS" 
+.PP 
+ 
+This program follows the usual GNU command line syntax. A summary of 
+the options supported by \fBkism3d\fR is below. 
+ 
+.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
+skip S3D environment and connect to this url  
+.SH "SEE ALSO" 
+.PP 
+\fBs3d\fR(1), \fBkismet\fR(1). 
+.PP 
+\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Copied: trunk/Documentation/manpages/man1/meshs3d.1 (from rev 981, trunk/Documentation/manpages/meshs3d.1)
===================================================================
--- trunk/Documentation/manpages/meshs3d.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man1/meshs3d.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,32 @@
+.TH "meshs3d" "1" 
+.SH "NAME" 
+meshs3d \(em  olsr/batman topology visualizer for s3d  
+.SH "SYNOPSIS" 
+.PP 
+\fBmeshs3d\fR [\-d]  [\-H \fInode\fR]  [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
+.SH "DESCRIPTION" 
+.PP 
+\fBmeshs3d(1)\fR is a 3D topology visualizer for olsr/batman and compatible data. 
+ 
+.PP 
+ 
+.SH "OPTIONS" 
+.PP 
+ 
+This program follows the usual GNU command line syntax. A summary of 
+the options supported by \fBmeshs3d\fR is below. 
+ 
+.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
+Show summary of options and exit.  
+.IP "\fB-d\fP" 10 
+Enable debug mode  
+.IP "\fB-H \fInode\fR\fP" 10 
+connect to olsr node. By default meshs3d uses localhost 
+.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
+skip S3D environment and connect to this url  
+.SH "SEE ALSO" 
+.PP 
+\fBs3d\fR(1), \fBolsrd\fR(8), \fBbatmand\fR (8). 
+.PP 
+\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Copied: trunk/Documentation/manpages/man1/s3d.1 (from rev 981, trunk/Documentation/manpages/s3d.1)
===================================================================
--- trunk/Documentation/manpages/s3d.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man1/s3d.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,34 @@
+.TH "s3d" "1" 
+.SH "NAME" 
+s3d \(em  network display server  
+.SH "SYNOPSIS" 
+.PP 
+\fBs3d\fR [\-s|\-\-use-sdl]  [\-r|\-\-rc \fIrc-script\fR]  [\-n|\-\-no-rc]  
+.SH "DESCRIPTION" 
+.PP 
+\fBs3d(1)\fR is a network display server which can be used as 3d desktop environment. 
+ 
+.PP 
+ 
+.SH "OPTIONS" 
+.PP 
+ 
+This program follows the usual GNU command line syntax. A summary of 
+the options supported by \fBs3d\fR is below. 
+ 
+.IP "\fB-s\fP, \fB\-\-use-sdl\fP" 10 
+Tells s3d to use SDL as graphics framework system.  
+.IP "\fB-r \fIrc-script\fR\fP, \fB\-\-rc \fIrc-script\fR\fP" 10 
+Use the specified file as rc-script. By default s3d uses ~/.s3drc as 
+per-user rc-script and /etc/s3drc as system-wide rc-script 
+.IP "\fB-n\fP, \fB\-\-no-rc\fP" 10 
+Don't use rc-scripts even if the exist in the apropriate locations.  
+.SH "SEE ALSO" 
+.PP 
+\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
+.SH "AUTHOR" 
+.PP 
+This manual page was written by Timo Schneider timo.schneider at s2004.tu-chemnitz.de  
+for the \fBDebian\fP project (but may be used by others). 
+ 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Copied: trunk/Documentation/manpages/man1/s3d_x11gate.1 (from rev 981, trunk/Documentation/manpages/s3d_x11gate.1)
===================================================================
--- trunk/Documentation/manpages/s3d_x11gate.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man1/s3d_x11gate.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,27 @@
+.TH "s3d_x11gate" "1" 
+.SH "NAME" 
+s3d_x11gate \(em  3d gateway for x11 desktops  
+.SH "SYNOPSIS" 
+.PP 
+\fBs3d_x11gate\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
+.SH "DESCRIPTION" 
+.PP 
+\fBs3d_x11gate(1)\fR is a 3D gateway for x11 desktops. 
+ 
+.PP 
+ 
+.SH "OPTIONS" 
+.PP 
+This program follows the usual GNU command line syntax. A summary of 
+the options supported by \fBs3d_x11gate\fR is below. 
+ 
+.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
+Show summary of options and exit.  
+.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
+skip S3D environment and connect to this url  
+.SH "SEE ALSO" 
+.PP 
+\fBs3d\fR(1). 
+.PP 
+\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Copied: trunk/Documentation/manpages/man1/s3dfm.1 (from rev 981, trunk/Documentation/manpages/s3dfm.1)
===================================================================
--- trunk/Documentation/manpages/s3dfm.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man1/s3dfm.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,28 @@
+.TH "s3dfm" "1" 
+.SH "NAME" 
+s3dfm \(em  s3d file manager  
+.SH "SYNOPSIS" 
+.PP 
+\fBs3dfm\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
+.SH "DESCRIPTION" 
+.PP 
+\fBs3dfm(1)\fR is a 3D file manager. 
+ 
+.PP 
+ 
+.SH "OPTIONS" 
+.PP 
+ 
+This program follows the usual GNU command line syntax. A summary of 
+the options supported by \fBs3dfm\fR is below. 
+ 
+.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
+Show summary of options and exit.  
+.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
+skip S3D environment and connect to this url  
+.SH "SEE ALSO" 
+.PP 
+\fBs3d\fR(1). 
+.PP 
+\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Copied: trunk/Documentation/manpages/man1/s3dosm.1 (from rev 981, trunk/Documentation/manpages/s3dosm.1)
===================================================================
--- trunk/Documentation/manpages/s3dosm.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man1/s3dosm.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,45 @@
+.TH "s3dosm" "1" 
+.SH "NAME" 
+s3dosm \(em  gps card application for s3d  
+.SH "SYNOPSIS" 
+.PP 
+\fBs3dosm\fR [\-o|\-\-osm \fIMINLAT\fR,\fIMINLON\fR,\fIMAXLAT\fR,\fIMAXLON\fR]  [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  [\fIfiles\fR]  
+.SH "DESCRIPTION" 
+.PP 
+\fBs3dosm(1)\fR is a 3D gps card application for openstreetmap/kismet xml card data. 
+ 
+.PP 
+ 
+.SH "OPTIONS" 
+.PP 
+This program follows the usual GNU command line syntax. A summary of 
+the options supported by \fBs3dosm\fR is below. 
+ 
+.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
+Show summary of options and exit.  
+.IP "\fB-o\fP, \fB\-\-osm\fP \fIMINLAT\fR,\fIMINLON\fR,\fIMAXLAT\fR,\fIMAXLON\fR 				" 10 
+Load a map with the given bounding box from the openstreetmap server.  
+.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
+skip S3D environment and connect to this url  
+.SH "EXAMPLES" 
+.PP 
+ 
+.PP 
+.nf 
+$  
+.ft B 
+s3osm \-\-osm \fI12.90142,50.82475,12.93352,50.84592\fR 
+.ft  
+$  
+.ft B 
+s3osm \fIosmdata\fR.xml 
+.ft 
+.fi 
+ 
+ 
+.SH "SEE ALSO" 
+.PP 
+\fBs3d\fR(1). 
+.PP 
+\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Copied: trunk/Documentation/manpages/man1/s3dvt.1 (from rev 981, trunk/Documentation/manpages/s3dvt.1)
===================================================================
--- trunk/Documentation/manpages/s3dvt.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man1/s3dvt.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,27 @@
+.TH "s3dvt" "1" 
+.SH "NAME" 
+s3dvt \(em  3d terminal emulator for s3d  
+.SH "SYNOPSIS" 
+.PP 
+\fBs3dvt\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
+.SH "DESCRIPTION" 
+.PP 
+\fBs3dvt(1)\fR is a terminal emulator. 
+ 
+.PP 
+ 
+.SH "OPTIONS" 
+.PP 
+This program follows the usual GNU command line syntax. A summary of 
+the options supported by \fBs3dvt\fR is below. 
+ 
+.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
+Show summary of options and exit.  
+.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
+skip S3D environment and connect to this url  
+.SH "SEE ALSO" 
+.PP 
+\fBs3d\fR(1). 
+.PP 
+\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_angle_to_cam.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_angle_to_cam.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_angle_to_cam.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_angle_to_cam" "3" 
+.SH "NAME" 
+s3d_angle_to_cam \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBfloat \fBs3d_angle_to_cam\fP\fR( 
+\fB	const float \fBobj_pos\fR[]\fR, 
+\fB	const float \fBcam_pos\fR[]\fR, 
+\fB	float *\fBangle_rad\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_clear_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clear_callback.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_clear_callback.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_clear_callback" "3" 
+.SH "NAME" 
+s3d_clear_callback \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBvoid \fBs3d_clear_callback\fP\fR( 
+\fB	uint8_t \fBevent\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Clears the callback which is associated with the event.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_clone.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_clone" "3" 
+.SH "NAME" 
+s3d_clone \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_clone\fP\fR( 
+\fB	int \fBoid\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_clone_target.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone_target.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_clone_target.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_clone_target" "3" 
+.SH "NAME" 
+s3d_clone_target \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_clone_target\fP\fR( 
+\fB	int \fBoid\fR\fR, 
+\fB	int \fBtoid\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_del_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_del_object.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_del_object.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_del_object" "3" 
+.SH "NAME" 
+s3d_del_object \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_del_object\fP\fR( 
+\fB	int \fBoid\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Deletes the object referenced by oid.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_delete_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_delete_event" "3" 
+.SH "NAME" 
+s3d_delete_event \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_delete_event\fP\fR( 
+\fB	const struct s3d_evt *\fBdevt\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event).          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_draw_string.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_draw_string.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_draw_string.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,26 @@
+.TH "s3d_draw_string" "3" 
+.SH "NAME" 
+s3d_draw_string \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_draw_string\fP\fR( 
+\fB	const char *\fBstr\fR\fR, 
+\fB	float *\fBxlen\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this). 
+.PP 
+.nf 
+char str="hello world!"; 
+float len; 
+s3d_select_font("vera"); 
+s3d_draw_string(str, len); 
+ 
+// not interested in the length? do that: s3d_draw_string(str, NULL); 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_find_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_find_event" "3" 
+.SH "NAME" 
+s3d_find_event \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBstruct s3d_evt * \fBs3d_find_event\fP\fR( 
+\fB	uint8_t \fBevent\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_flags_off.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_flags_off" "3" 
+.SH "NAME" 
+s3d_flags_off \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_flags_off\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBflags\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+turn some flags off for object.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_flags_on.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,23 @@
+.TH "s3d_flags_on" "3" 
+.SH "NAME" 
+s3d_flags_on \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_flags_on\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBflags\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+turn some flags on for object. 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content)  
+ 
+.RE 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_get_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_get_callback.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_get_callback.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,23 @@
+.TH "s3d_get_callback" "3" 
+.SH "NAME" 
+s3d_get_callback \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBs3d_cb \fBs3d_get_callback\fP\fR( 
+\fB	uint8_t \fBevent\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Returns the Callback-function of the event. 
+.PP 
+.nf 
+struct s3d_evt e; 
+... 
+s3d_get_callback(S3D_EVENT_KEY)(e); 
+// will call the key-handling function with argument e. 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_ignore_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_ignore_callback.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_ignore_callback.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_ignore_callback" "3" 
+.SH "NAME" 
+s3d_ignore_callback \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBvoid \fBs3d_ignore_callback\fP\fR( 
+\fB	uint8_t \fBevent\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_import_model_file.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_import_model_file.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_import_model_file.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,22 @@
+.TH "s3d_import_model_file" "3" 
+.SH "NAME" 
+s3d_import_model_file \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_import_model_file\fP\fR( 
+\fB	const char *\fBfname\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :) 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+Of course, you won't forget to toggle it visible, won't you?  
+ 
+.RE 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_init.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_init.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_init.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,30 @@
+.TH "s3d_init" "3" 
+.SH "NAME" 
+s3d_init \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_init\fP\fR( 
+\fB	int *\fBargc\fR\fR, 
+\fB	char ***\fBargv\fR\fR, 
+\fB	const char *\fBname\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name. 
+.PP 
+.nf 
+int main(char argc, char **argv) 
+{ 
+if (!s3d_init(&argc, &argv, "Hello world")) 
+{ 
+... 
+s3d_quit(); 
+} 
+return(0); 
+} 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_link.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_link.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_link.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_link" "3" 
+.SH "NAME" 
+s3d_link \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_link\fP\fR( 
+\fB	int \fBoid_from\fR\fR, 
+\fB	int \fBoid_to\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will "keep on the table" if you move the table around in space. It will also rotate with the table etc.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_load_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_line_normals.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_load_line_normals.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,18 @@
+.TH "s3d_load_line_normals" "3" 
+.SH "NAME" 
+s3d_load_line_normals \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_load_line_normals\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBnbuf\fR\fR, 
+\fB	uint32_t \fBstart\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_load_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,18 @@
+.TH "s3d_load_materials_a" "3" 
+.SH "NAME" 
+s3d_load_materials_a \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_load_materials_a\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBmbuf\fR\fR, 
+\fB	uint32_t \fBstart\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,18 @@
+.TH "s3d_load_polygon_normals" "3" 
+.SH "NAME" 
+s3d_load_polygon_normals \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_load_polygon_normals\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBnbuf\fR\fR, 
+\fB	uint32_t \fBstart\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,18 @@
+.TH "s3d_load_polygon_tex_coords" "3" 
+.SH "NAME" 
+s3d_load_polygon_tex_coords \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_load_polygon_tex_coords\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBtbuf\fR\fR, 
+\fB	uint32_t \fBstart\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_load_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,28 @@
+.TH "s3d_load_texture" "3" 
+.SH "NAME" 
+s3d_load_texture \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_load_texture\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBtex\fR\fR, 
+\fB	uint16_t \fBxpos\fR\fR, 
+\fB	uint16_t \fBypos\fR\fR, 
+\fB	uint16_t \fBw\fR\fR, 
+\fB	uint16_t \fBh\fR\fR, 
+\fB	const uint8_t *\fBdata\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Creates a new object, returning the object id. 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+Of course, you won't forget to toggle it visible, won't you?  
+ 
+.RE 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_mainloop.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,26 @@
+.TH "s3d_mainloop" "3" 
+.SH "NAME" 
+s3d_mainloop \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_mainloop\fP\fR( 
+\fB	void(*)(void) \fBf\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+takes a function as argument. it will loop this function until a quit-event is received. you can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time. 
+.PP 
+.nf 
+void mainloop(void) 
+{ 
+usleep(1000); // sleep 1 ms in every cycle 
+} 
+... 
+ 
+s3d_mainloop(mainloop()); 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_mcp_focus.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mcp_focus.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_mcp_focus.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_mcp_focus" "3" 
+.SH "NAME" 
+s3d_mcp_focus \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_mcp_focus\fP\fR( 
+\fB	int \fBobject\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_net_check.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_net_check" "3" 
+.SH "NAME" 
+s3d_net_check \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_net_check\fP\fR( 
+\fB	void\fR); 
+.fi 
+.SH "Description" 
+.PP 
+This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_new_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,22 @@
+.TH "s3d_new_object" "3" 
+.SH "NAME" 
+s3d_new_object \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_new_object\fP\fR( 
+\fB	void\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Creates a new object, returning the object id. 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+Of course, you won't forget to toggle it visible, won't you?  
+ 
+.RE 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_open_file.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_open_file.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_open_file.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_open_file" "3" 
+.SH "NAME" 
+s3d_open_file \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_open_file\fP\fR( 
+\fB	const char *\fBfname\fR\fR, 
+\fB	char **\fBpointer\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_line.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,18 @@
+.TH "s3d_pep_line" "3" 
+.SH "NAME" 
+s3d_pep_line \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_line\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	int \fBv1\fR\fR, 
+\fB	int \fBv2\fR\fR, 
+\fB	int \fBmaterial\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Alter the latest pushed line, overwriting with the supplied values.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,19 @@
+.TH "s3d_pep_line_normals" "3" 
+.SH "NAME" 
+s3d_pep_line_normals \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_line_normals\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBnbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models. 
+.PP 
+nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in Total.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_lines.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_lines.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_pep_lines" "3" 
+.SH "NAME" 
+s3d_pep_lines \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_lines\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const uint32_t *\fBlbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,24 @@
+.TH "s3d_pep_material" "3" 
+.SH "NAME" 
+s3d_pep_material \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_material\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBamb_r\fR\fR, 
+\fB	float \fBamb_g\fR\fR, 
+\fB	float \fBamb_b\fR\fR, 
+\fB	float \fBspec_r\fR\fR, 
+\fB	float \fBspec_g\fR\fR, 
+\fB	float \fBspec_b\fR\fR, 
+\fB	float \fBdiff_r\fR\fR, 
+\fB	float \fBdiff_g\fR\fR, 
+\fB	float \fBdiff_b\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,27 @@
+.TH "s3d_pep_material_a" "3" 
+.SH "NAME" 
+s3d_pep_material_a \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_material_a\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBamb_r\fR\fR, 
+\fB	float \fBamb_g\fR\fR, 
+\fB	float \fBamb_b\fR\fR, 
+\fB	float \fBamb_a\fR\fR, 
+\fB	float \fBspec_r\fR\fR, 
+\fB	float \fBspec_g\fR\fR, 
+\fB	float \fBspec_b\fR\fR, 
+\fB	float \fBspec_a\fR\fR, 
+\fB	float \fBdiff_r\fR\fR, 
+\fB	float \fBdiff_g\fR\fR, 
+\fB	float \fBdiff_b\fR\fR, 
+\fB	float \fBdiff_a\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_material_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_texture.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_texture.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_pep_material_texture" "3" 
+.SH "NAME" 
+s3d_pep_material_texture \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_material_texture\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBtex\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_pep_materials_a" "3" 
+.SH "NAME" 
+s3d_pep_materials_a \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_materials_a\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBmbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,19 @@
+.TH "s3d_pep_polygon_normals" "3" 
+.SH "NAME" 
+s3d_pep_polygon_normals \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_polygon_normals\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBnbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects. 
+.PP 
+nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,21 @@
+.TH "s3d_pep_polygon_tex_coord" "3" 
+.SH "NAME" 
+s3d_pep_polygon_tex_coord \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_polygon_tex_coord\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBx1\fR\fR, 
+\fB	float \fBy1\fR\fR, 
+\fB	float \fBx2\fR\fR, 
+\fB	float \fBy2\fR\fR, 
+\fB	float \fBx3\fR\fR, 
+\fB	float \fBy3\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_pep_polygon_tex_coords" "3" 
+.SH "NAME" 
+s3d_pep_polygon_tex_coords \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_polygon_tex_coords\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBtbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_vertex.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_vertex.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,18 @@
+.TH "s3d_pep_vertex" "3" 
+.SH "NAME" 
+s3d_pep_vertex \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_vertex\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBx\fR\fR, 
+\fB	float \fBy\fR\fR, 
+\fB	float \fBz\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Alter the latest pushed vertex, overwriting with the supplied values.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pep_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_vertices.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pep_vertices.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_pep_vertices" "3" 
+.SH "NAME" 
+s3d_pep_vertices \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pep_vertices\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBvbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pop_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_pop_event" "3" 
+.SH "NAME" 
+s3d_pop_event \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBstruct s3d_evt * \fBs3d_pop_event\fP\fR( 
+\fB	void\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pop_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_line.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pop_line.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_pop_line" "3" 
+.SH "NAME" 
+s3d_pop_line \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pop_line\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Deletes the latest n lines from the line stack of the object.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pop_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_material.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pop_material.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_pop_material" "3" 
+.SH "NAME" 
+s3d_pop_material \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pop_material\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Deletes the latest n material from the material stack of the object.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pop_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_polygon.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pop_polygon.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_pop_polygon" "3" 
+.SH "NAME" 
+s3d_pop_polygon \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pop_polygon\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Deletes the latest n polygon from the polygon stack of the object.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pop_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_texture.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pop_texture.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_pop_texture" "3" 
+.SH "NAME" 
+s3d_pop_texture \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pop_texture\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Deletes the latest n textures from the texture stack of the object.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_pop_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_vertex.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_pop_vertex.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_pop_vertex" "3" 
+.SH "NAME" 
+s3d_pop_vertex \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_pop_vertex\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Deletes the latest n vertices from the vertex stack of the object.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_process_stack.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,19 @@
+.TH "s3d_process_stack" "3" 
+.SH "NAME" 
+s3d_process_stack \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBvoid \fBs3d_process_stack\fP\fR( 
+\fB	void\fR); 
+.fi 
+.SH "Description" 
+.PP 
+This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack. 
+.PP 
+Deprecated 
+.PP 
+This is probably obsolete          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_event.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_event.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_push_event" "3" 
+.SH "NAME" 
+s3d_push_event \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBvoid \fBs3d_push_event\fP\fR( 
+\fB	struct s3d_evt *\fBnewevt\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Pushes an event onto the event-stack. Usually you don't need to do this manually.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,18 @@
+.TH "s3d_push_line" "3" 
+.SH "NAME" 
+s3d_push_line \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_line\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBv1\fR\fR, 
+\fB	uint32_t \fBv2\fR\fR, 
+\fB	uint32_t \fBmaterial\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_push_lines" "3" 
+.SH "NAME" 
+s3d_push_lines \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_lines\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const uint32_t *\fBlbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,24 @@
+.TH "s3d_push_material" "3" 
+.SH "NAME" 
+s3d_push_material \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_material\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBamb_r\fR\fR, 
+\fB	float \fBamb_g\fR\fR, 
+\fB	float \fBamb_b\fR\fR, 
+\fB	float \fBspec_r\fR\fR, 
+\fB	float \fBspec_g\fR\fR, 
+\fB	float \fBspec_b\fR\fR, 
+\fB	float \fBdiff_r\fR\fR, 
+\fB	float \fBdiff_g\fR\fR, 
+\fB	float \fBdiff_b\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. the specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material_a.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_material_a.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,27 @@
+.TH "s3d_push_material_a" "3" 
+.SH "NAME" 
+s3d_push_material_a \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_material_a\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBamb_r\fR\fR, 
+\fB	float \fBamb_g\fR\fR, 
+\fB	float \fBamb_b\fR\fR, 
+\fB	float \fBamb_a\fR\fR, 
+\fB	float \fBspec_r\fR\fR, 
+\fB	float \fBspec_g\fR\fR, 
+\fB	float \fBspec_b\fR\fR, 
+\fB	float \fBspec_a\fR\fR, 
+\fB	float \fBdiff_r\fR\fR, 
+\fB	float \fBdiff_g\fR\fR, 
+\fB	float \fBdiff_b\fR\fR, 
+\fB	float \fBdiff_a\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,39 @@
+.TH "s3d_push_materials_a" "3" 
+.SH "NAME" 
+s3d_push_materials_a \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_materials_a\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBmbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Pushes a buffer of Materials. Those Materials are in the format float[n*12], with 
+.PP 
+mbuf[n*12 + 0-3] \- ambience 
+.PP 
+mbuf[n*12 + 4-7] \- specular 
+.PP 
+mbuf[n *12 + 8-11] \- diffusion values 
+.PP 
+of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy s3d_push_material_a() function. 
+.PP 
+.nf 
+// each line has r,g,b,a value 
+float bla[24]= 
+{1, 0, 0, 1, 
+1, 0, 0, 1, 
+1, 0, 0, 1, 
+0, 1, 1, 1, 
+0, 1, 1, 1, 
+0, 1, 1, 1}; 
+ 
+s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,30 @@
+.TH "s3d_push_polygon" "3" 
+.SH "NAME" 
+s3d_push_polygon \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_polygon\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint32_t \fBv1\fR\fR, 
+\fB	uint32_t \fBv2\fR\fR, 
+\fB	uint32_t \fBv3\fR\fR, 
+\fB	uint32_t \fBmaterial\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument. 
+.PP 
+.nf 
+int oid = s3d_new_object();   // create a new object 
+s3d_push_vertex(oid, 0.0, 0.0, 0.0); 
+s3d_push_vertex(oid, 0.0, 1.0, 0.0); 
+s3d_push_vertex(oid, 1.0, 0.0, 0.0); 
+s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0); 
+s3d_push_polygon(oid, 0, 1, 2, 0); 
+// this will create a red polygon 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_polygons.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,29 @@
+.TH "s3d_push_polygons" "3" 
+.SH "NAME" 
+s3d_push_polygons \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_polygons\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const uint32_t *\fBpbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index. 
+.PP 
+.nf 
+uint32_t pbuf[] = { 0, 1, 2, 0}; 
+int oid = s3d_new_object();   // create a new object 
+s3d_push_vertex(oid, 0.0, 0.0, 0.0); 
+s3d_push_vertex(oid, 0.0, 1.0, 0.0); 
+s3d_push_vertex(oid, 1.0, 0.0, 0.0); 
+s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0); 
+s3d_push_polygons(oid, pbuf, 1); 
+// push one polygon with the pbuf data 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_push_texture" "3" 
+.SH "NAME" 
+s3d_push_texture \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_texture\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	uint16_t \fBw\fR\fR, 
+\fB	uint16_t \fBh\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Adds a new texture with height w and height h on the texturestack.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_textures.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_textures.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_textures.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_push_textures" "3" 
+.SH "NAME" 
+s3d_push_textures \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_textures\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const uint16_t *\fBtbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,18 @@
+.TH "s3d_push_vertex" "3" 
+.SH "NAME" 
+s3d_push_vertex \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_vertex\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBx\fR\fR, 
+\fB	float \fBy\fR\fR, 
+\fB	float \fBz\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_push_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,25 @@
+.TH "s3d_push_vertices" "3" 
+.SH "NAME" 
+s3d_push_vertices \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_push_vertices\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	const float *\fBvbuf\fR\fR, 
+\fB	uint16_t \fBn\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case).  
+.PP 
+.nf 
+float vertices[] = { 0.0, 0.0, 0.0, 
+1.0, 2.0, 3.0, 
+3.0, 2.0, 1.0}; 
+s3d_push_vertices(object, vertices, 3); // pushing 3 vertices 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_quit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_quit" "3" 
+.SH "NAME" 
+s3d_quit \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_quit\fP\fR( 
+\fB	void\fR); 
+.fi 
+.SH "Description" 
+.PP 
+closes the connection and cleares the event-stack. it can also be used to leave the s3d_mainloop().          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_rotate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,33 @@
+.TH "s3d_rotate" "3" 
+.SH "NAME" 
+s3d_rotate \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_rotate\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBx\fR\fR, 
+\fB	float \fBy\fR\fR, 
+\fB	float \fBz\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees. 
+.PP 
+You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes it any clearer ;) 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+Rotate is absolute, not relative! 
+.RE 
+.PP 
+.nf 
+s3d_rotate(object, 90,  0, 0); 
+s3d_rotate(object, 180, 0, 0); 
+// object will be rotated 180 degrees around the x-axis, not 270 degress! 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_scale.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_scale.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_scale.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,23 @@
+.TH "s3d_scale" "3" 
+.SH "NAME" 
+s3d_scale \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_scale\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBs\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Scales the object. about factor s. s=1 will be the original size, \-1 will mirror it. 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative!  
+ 
+.RE 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_select_font.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_select_font.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_select_font.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,26 @@
+.TH "s3d_select_font" "3" 
+.SH "NAME" 
+s3d_select_font \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_select_font\fP\fR( 
+\fB	const char *\fBmask\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+This selects a font for the s3d_draw_string() function. 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+Of course, you won't forget to toggle it visible, won't you? 
+.RE 
+.PP 
+.nf 
+s3d_select_font("vera"); // will use the vera font face 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_set_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,35 @@
+.TH "s3d_set_callback" "3" 
+.SH "NAME" 
+s3d_set_callback \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBvoid \fBs3d_set_callback\fP\fR( 
+\fB	uint8_t \fBevent\fR\fR, 
+\fB	s3d_cb \fBfunc\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop. 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+Defining callbacks will only work after calling s3d_init() 
+.RE 
+.PP 
+.nf 
+#include <inttypes.h> 
+ 
+void obj_click(struct s3d_evt event) 
+{ 
+printf("object id %"PRIu32" got clicked", *((uint32_t *)event->buf)); 
+} 
+... 
+s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click); 
+// this will tell you when a object got clicked 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_strlen.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_strlen.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_strlen.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_strlen" "3" 
+.SH "NAME" 
+s3d_strlen \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBfloat \fBs3d_strlen\fP\fR( 
+\fB	const char *\fBstr\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_translate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_translate.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_translate.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,31 @@
+.TH "s3d_translate" "3" 
+.SH "NAME" 
+s3d_translate \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_translate\fP\fR( 
+\fB	int \fBobject\fR\fR, 
+\fB	float \fBx\fR\fR, 
+\fB	float \fBy\fR\fR, 
+\fB	float \fBz\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0. 
+.PP 
+.RS 
+\fBWarning:   
+.PP 
+Translation is absolute, not relative! 
+.RE 
+.PP 
+.nf 
+s3d_translate(object, 2, 0, 0); 
+s3d_translate(object, 4, 0, 0); 
+// object will end up at 4,0,0 and not 6,0,0!! 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_unlink.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_unlink.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_unlink.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_unlink" "3" 
+.SH "NAME" 
+s3d_unlink \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBint \fBs3d_unlink\fP\fR( 
+\fB	int \fBoid\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Remove the link of object oid to its target.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_usage.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_usage" "3" 
+.SH "NAME" 
+s3d_usage \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBvoid \fBs3d_usage\fP\fR( 
+\fB	void\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Prints the possible parameter for the client library (which can be passed in s3d_init())          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_vector_angle.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_angle.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_vector_angle.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_vector_angle" "3" 
+.SH "NAME" 
+s3d_vector_angle \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBfloat \fBs3d_vector_angle\fP\fR( 
+\fB	const float \fBvector1\fR[]\fR, 
+\fB	const float \fBvector2\fR[]\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_vector_cross_product.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_cross_product.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_vector_cross_product.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_vector_cross_product" "3" 
+.SH "NAME" 
+s3d_vector_cross_product \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBvoid \fBs3d_vector_cross_product\fP\fR( 
+\fB	const float \fBvector1\fR[]\fR, 
+\fB	const float \fBvector2\fR[]\fR, 
+\fB	float \fBresult_vector\fR[]\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_vector_dot_product.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_dot_product.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_vector_dot_product.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3d_vector_dot_product" "3" 
+.SH "NAME" 
+s3d_vector_dot_product \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBfloat \fBs3d_vector_dot_product\fP\fR( 
+\fB	const float \fBvector1\fR[]\fR, 
+\fB	const float \fBvector2\fR[]\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_vector_length.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_length.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_vector_length.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3d_vector_length" "3" 
+.SH "NAME" 
+s3d_vector_length \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBfloat \fBs3d_vector_length\fP\fR( 
+\fB	const float \fBvector\fR[]\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3d_vector_subtract.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_subtract.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3d_vector_subtract.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3d_vector_subtract" "3" 
+.SH "NAME" 
+s3d_vector_subtract \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.sp 1 
+\fBvoid \fBs3d_vector_subtract\fP\fR( 
+\fB	const float \fBvector1\fR[]\fR, 
+\fB	const float \fBvector2\fR[]\fR, 
+\fB	float \fBresult_vector\fR[]\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_ani_mate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,30 @@
+.TH "s3dw_ani_mate" "3" 
+.SH "NAME" 
+s3dw_ani_mate \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_ani_mate\fP\fR( 
+\fB	void\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;) 
+.PP 
+.nf 
+#include <time.h>   // nanosleep() 
+static struct timespec t={0.33*1000*1000}; // 33 mili seconds 
+void mainloop() 
+{ 
+// keep this in your mainloop. this will do smooth animations for you ... 
+s3dw_ani_mate(); 
+nanosleep(&t,NULL); 
+} 
+ 
+.... 
+s3d_mainloop(mainloop); 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_button_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,20 @@
+.TH "s3dw_button_new" "3" 
+.SH "NAME" 
+s3dw_button_new \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBs3dw_button * \fBs3dw_button_new\fP\fR( 
+\fB	const s3dw_surface *\fBsurface\fR\fR, 
+\fB	const char *\fBtext\fR\fR, 
+\fB	float \fBposx\fR\fR, 
+\fB	float \fBposy\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Creates a new button on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. 
+.PP 
+See s3dw_button for information about callbacks which may be defined.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_delete.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_delete.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_delete.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_delete" "3" 
+.SH "NAME" 
+s3dw_delete \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_delete\fP\fR( 
+\fB	s3dw_widget *\fBwidget\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Deletes any widget. Should be casted with S3DWIDGET().          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_focus.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_focus.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_focus.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_focus" "3" 
+.SH "NAME" 
+s3dw_focus \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_focus\fP\fR( 
+\fB	s3dw_widget *\fBfocus\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_getroot.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,26 @@
+.TH "s3dw_getroot" "3" 
+.SH "NAME" 
+s3dw_getroot \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBs3dw_widget * \fBs3dw_getroot\fP\fR( 
+\fB	void\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use s3dw_moveit() 
+.PP 
+.nf 
+s3dw_widget *root = s3dw_getroot(); 
+// move widget center to (0,5,0). upon creation, it's centered at (0,0,0), 
+// so this might move it up 
+root->x=0; 
+root->y=5; 
+root->z=0; 
+s3dw_moveit(root); 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_handle_click.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_handle_click.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_handle_click.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,33 @@
+.TH "s3dw_handle_click" "3" 
+.SH "NAME" 
+s3dw_handle_click \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBint \fBs3dw_handle_click\fP\fR( 
+\fB	const struct s3d_evt *\fBevent\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specifiy it itself as the clickhandler. 
+.PP 
+.nf 
+// way 1: 
+s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dw_handle_click); 
+ 
+// way 2: 
+... 
+void click(struct s3d_evt *evt) 
+{ 
+s3dw_handle_click(evt); 
+.... 
+// your own clickhandler code 
+... 
+} 
+.... 
+s3d_set_callback(S3D_EVENT_OBJ_CLICK,click); 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_handle_key.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_handle_key.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_handle_key.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,33 @@
+.TH "s3dw_handle_key" "3" 
+.SH "NAME" 
+s3dw_handle_key \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBint \fBs3dw_handle_key\fP\fR( 
+\fB	const struct s3d_evt *\fBevent\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;) 
+.PP 
+.nf 
+// way 1: 
+s3d_set_callback(S3D_EVENT_KEY,s3dw_handle_key); 
+ 
+// way 2: 
+... 
+void key(struct s3d_evt *evt) 
+{ 
+s3dw_handle_key(evt); 
+.... 
+// your own keyhandler code 
+... 
+} 
+.... 
+s3d_set_callback(S3D_EVENT_KEY,key); 
+.fi 
+.PP 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_input_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_change_text.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_input_change_text.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3dw_input_change_text" "3" 
+.SH "NAME" 
+s3dw_input_change_text \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_input_change_text\fP\fR( 
+\fB	s3dw_input *\fBinput\fR\fR, 
+\fB	const char *\fBtext\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Change the text in the referenced input-box to the specified text.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_input_gettext.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_input_gettext" "3" 
+.SH "NAME" 
+s3dw_input_gettext \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBchar * \fBs3dw_input_gettext\fP\fR( 
+\fB	s3dw_input *\fBinput\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Returns the text which is currently entered in the referenced input-box.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_input_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,20 @@
+.TH "s3dw_input_new" "3" 
+.SH "NAME" 
+s3dw_input_new \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBs3dw_input * \fBs3dw_input_new\fP\fR( 
+\fB	const s3dw_surface *\fBsurface\fR\fR, 
+\fB	float \fBwidth\fR\fR, 
+\fB	float \fBposx\fR\fR, 
+\fB	float \fBposy\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Creates a new input-box on the surface with a input width of "width", the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with s3dw_input_change_text, and received with s3dw_input_gettext 
+.PP 
+See s3dw_input for information about callbacks which may be defined.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_label_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_change_text.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_label_change_text.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3dw_label_change_text" "3" 
+.SH "NAME" 
+s3dw_label_change_text \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_label_change_text\fP\fR( 
+\fB	s3dw_label *\fBlabel\fR\fR, 
+\fB	const char *\fBtext\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Change the text in the referenced label to the specified text.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_label_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,20 @@
+.TH "s3dw_label_new" "3" 
+.SH "NAME" 
+s3dw_label_new \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBs3dw_label * \fBs3dw_label_new\fP\fR( 
+\fB	const s3dw_surface *\fBsurface\fR\fR, 
+\fB	const char *\fBtext\fR\fR, 
+\fB	float \fBposx\fR\fR, 
+\fB	float \fBposy\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Creates a new label on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. 
+.PP 
+See s3dw_label for information about callbacks which may be defined.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_moveit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_moveit.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_moveit.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_moveit" "3" 
+.SH "NAME" 
+s3dw_moveit \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_moveit\fP\fR( 
+\fB	s3dw_widget *\fBwidget\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_object_info.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_object_info.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_object_info.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_object_info" "3" 
+.SH "NAME" 
+s3dw_object_info \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBint \fBs3dw_object_info\fP\fR( 
+\fB	struct s3d_evt *\fBevent\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_show.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_show.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_show.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_show" "3" 
+.SH "NAME" 
+s3dw_show \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_show\fP\fR( 
+\fB	s3dw_widget *\fBwidget\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Switches a widget visible. Should be casted with S3DWIDGET().          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_surface_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,19 @@
+.TH "s3dw_surface_new" "3" 
+.SH "NAME" 
+s3dw_surface_new \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBs3dw_surface * \fBs3dw_surface_new\fP\fR( 
+\fB	const char *\fBtitle\fR\fR, 
+\fB	float \fBwidth\fR\fR, 
+\fB	float \fBheight\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Creates a new surface (a new window) with title "title" and dimension "width" x "height". 
+.PP 
+See s3dw_surface for information about callbacks which may be defined.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,16 @@
+.TH "s3dw_textbox_change_text" "3" 
+.SH "NAME" 
+s3dw_textbox_change_text \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_textbox_change_text\fP\fR( 
+\fB	s3dw_textbox *\fBtextbox\fR\fR, 
+\fB	const char *\fBtext\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Change the text in the referenced textbox to the specified text.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_textbox_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,22 @@
+.TH "s3dw_textbox_new" "3" 
+.SH "NAME" 
+s3dw_textbox_new \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBs3dw_textbox * \fBs3dw_textbox_new\fP\fR( 
+\fB	const s3dw_surface *\fBsurface\fR\fR, 
+\fB	const char *\fBtext\fR\fR, 
+\fB	float \fBposx\fR\fR, 
+\fB	float \fBposy\fR\fR, 
+\fB	float \fBwidth\fR\fR, 
+\fB	float \fBheight\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Creates a new textbox on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield. 
+.PP 
+See s3dw_textbox for information about callbacks which may be defined.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_textbox_scrolldown" "3" 
+.SH "NAME" 
+s3dw_textbox_scrolldown \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_textbox_scrolldown\fP\fR( 
+\fB	s3dw_textbox *\fBtextbox\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Scrolls the text in the textbox down by one line, if possible.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_textbox_scrollleft" "3" 
+.SH "NAME" 
+s3dw_textbox_scrollleft \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_textbox_scrollleft\fP\fR( 
+\fB	s3dw_textbox *\fBtextbox\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Scrolls the text in the textbox to the left by one character, if possible.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_textbox_scrollright" "3" 
+.SH "NAME" 
+s3dw_textbox_scrollright \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_textbox_scrollright\fP\fR( 
+\fB	s3dw_textbox *\fBtextbox\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Scrolls the text in the textbox to the right by one character, if possible.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,17 @@
+.TH "s3dw_textbox_scrollto" "3" 
+.SH "NAME" 
+s3dw_textbox_scrollto \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_textbox_scrollto\fP\fR( 
+\fB	s3dw_textbox *\fBtextbox\fR\fR, 
+\fB	int \fBx\fR\fR, 
+\fB	int \fBy\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,15 @@
+.TH "s3dw_textbox_scrollup" "3" 
+.SH "NAME" 
+s3dw_textbox_scrollup \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.sp 1 
+\fBvoid \fBs3dw_textbox_scrollup\fP\fR( 
+\fB	s3dw_textbox *\fBtextbox\fR\fR); 
+.fi 
+.SH "Description" 
+.PP 
+Scrolls the text in the textbox up by one line, if possible.          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/mcp_object.9
===================================================================
--- trunk/Documentation/manpages/man9/mcp_object.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/mcp_object.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,27 @@
+.TH "mcp_object" "9" 
+.SH "NAME" 
+struct mcp_object \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct mcp_object { 
+uint32_t object; 
+float trans_x; 
+float trans_y; 
+float trans_z; 
+float r; 
+char name; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+Deprecated 
+.PP 
+don't use, to be removed soon (use struct s3d_but_info). ;)      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3d_but_info.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_but_info.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3d_but_info.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,21 @@
+.TH "s3d_but_info" "9" 
+.SH "NAME" 
+struct s3d_but_info \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct s3d_but_info { 
+uint8_t button; 
+uint8_t state; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3d_evt.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_evt.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3d_evt.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,31 @@
+.TH "s3d_evt" "9" 
+.SH "NAME" 
+struct s3d_evt \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct s3d_evt { 
+uint8_t event; 
+int length; 
+char *buf; 
+struct s3d_evt *next; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+This is the event information holder.      
+.IP "event" 10 
+gives the event type          
+.IP "length" 10 
+gives the length of the buffer *buf          
+.IP "buf" 10 
+is the pointer to the multiple purpose buffer, which will have more specific information about the object          
+.IP "next" 10 
+can be safely ignored ;)          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3d_key_event.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_key_event.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3d_key_event.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,21 @@
+.TH "s3d_key_event" "9" 
+.SH "NAME" 
+struct s3d_key_event \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct s3d_key_event { 
+uint16_t keysym; 
+uint16_t unicode; 
+uint16_t modifier; 
+uint16_t state; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3d_obj_info.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_obj_info.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3d_obj_info.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,32 @@
+.TH "s3d_obj_info" "9" 
+.SH "NAME" 
+struct s3d_obj_info \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3d.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct s3d_obj_info { 
+uint32_t object; 
+uint32_t flags; 
+float trans_x; 
+float trans_y; 
+float trans_z; 
+float rot_x; 
+float rot_y; 
+float rot_z; 
+float scale; 
+float r; 
+char name; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp. 
+.PP 
+Special objects like camera, pointer will have the "sys_" prefix in the name and will be named "pointer0", "pointer1" ... or "cam0", "cam1" ... For cam object, scale will contain the aspect ratio.      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3dw_button.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_button.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3dw_button.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,23 @@
+.TH "_s3dw_button" "9" 
+.SH "NAME" 
+struct _s3dw_button \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct _s3dw_button { 
+s3dw_widget widget; 
+char *text; 
+uint32_t oid_text; 
+s3dw_callback onclick; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3dw_input.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_input.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3dw_input.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,24 @@
+.TH "_s3dw_input" "9" 
+.SH "NAME" 
+struct _s3dw_input \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct _s3dw_input { 
+s3dw_widget widget; 
+char *text; 
+uint32_t oid_text; 
+s3dw_callback onclick; 
+s3dw_callback onedit; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3dw_label.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_label.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3dw_label.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,22 @@
+.TH "_s3dw_label" "9" 
+.SH "NAME" 
+struct _s3dw_label \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct _s3dw_label { 
+s3dw_widget widget; 
+char *text; 
+s3dw_callback onclick; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3dw_scrollbar.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_scrollbar.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3dw_scrollbar.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,28 @@
+.TH "_s3dw_scrollbar" "9" 
+.SH "NAME" 
+struct _s3dw_scrollbar \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct _s3dw_scrollbar { 
+s3dw_widget widget; 
+float pos; 
+float max; 
+int type; 
+int loid; 
+int roid; 
+int baroid; 
+s3dw_callback lonclick; 
+s3dw_callback ronclick; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3dw_style.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_style.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3dw_style.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,43 @@
+.TH "_s3dw_style" "9" 
+.SH "NAME" 
+struct _s3dw_style \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct _s3dw_style { 
+char *name; 
+char *fontface; 
+float surface_mat; 
+float input_mat; 
+float inputback_mat; 
+float text_mat; 
+float title_mat; 
+float title_text_mat; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.      
+.IP "name" 10 
+name of the style ... kind of redundant          
+.IP "fontface" 10 
+font face for all used fonts          
+.IP "surface_mat" 10 
+material for the surface background          
+.IP "input_mat" 10 
+material for buttonboxes and other widgets          
+.IP "inputback_mat" 10 
+material for inputfield background          
+.IP "text_mat" 10 
+material for the text on buttons and inputs          
+.IP "title_mat" 10 
+material for the title bar          
+.IP "title_text_mat" 10 
+material for the text on the title bar          
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3dw_surface.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_surface.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3dw_surface.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,23 @@
+.TH "_s3dw_surface" "9" 
+.SH "NAME" 
+struct _s3dw_surface \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct _s3dw_surface { 
+s3dw_widget widget; 
+uint32_t oid_title; 
+uint32_t oid_tbar; 
+char *title; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3dw_textbox.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_textbox.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3dw_textbox.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,28 @@
+.TH "_s3dw_textbox" "9" 
+.SH "NAME" 
+struct _s3dw_textbox \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct _s3dw_textbox { 
+s3dw_widget widget; 
+s3dw_scrollbar *scroll_vertical; 
+s3dw_scrollbar *scroll_horizontal; 
+char *text; 
+int n_lineoids; 
+int *p_lineoids; 
+int window_x; 
+int window_y; 
+s3dw_callback onclick; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Added: trunk/Documentation/manpages/man9/s3dw_widget.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_widget.9	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/man9/s3dw_widget.9	2008-09-01 18:45:05 UTC (rev 982)
@@ -0,0 +1,46 @@
+.TH "_s3dw_widget" "9" 
+.SH "NAME" 
+struct _s3dw_widget \(em  
+.SH "SYNOPSIS" 
+.PP 
+.nf 
+#include <s3dw.h> 
+.fi 
+.SH "Structure Members" 
+.PP 
+.nf 
+struct _s3dw_widget { 
+int type; 
+s3dw_widget *parent; 
+s3dw_style *style; 
+int nobj; 
+s3dw_widget **pobj; 
+int focus; 
+int flags; 
+float ax; 
+float ay; 
+float az; 
+float as; 
+float arx; 
+float ary; 
+float arz; 
+float width; 
+float height; 
+uint32_t oid; 
+void *ptr; 
+float x; 
+float y; 
+float z; 
+float s; 
+float rx; 
+float ry; 
+float rz; 
+} 
+.fi 
+.PP 
+.SH "Description" 
+.PP 
+This is the most basic widget type, it contains all the "general" widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets "general" information. For typecast, you may use S3DWIDGET(). 
+.PP 
+The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.      
+.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 

Deleted: trunk/Documentation/manpages/meshs3d.1
===================================================================
--- trunk/Documentation/manpages/meshs3d.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/meshs3d.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,32 +0,0 @@
-.TH "meshs3d" "1" 
-.SH "NAME" 
-meshs3d \(em  olsr/batman topology visualizer for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBmeshs3d\fR [\-d]  [\-H \fInode\fR]  [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBmeshs3d(1)\fR is a 3D topology visualizer for olsr/batman and compatible data. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
- 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBmeshs3d\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB-d\fP" 10 
-Enable debug mode  
-.IP "\fB-H \fInode\fR\fP" 10 
-connect to olsr node. By default meshs3d uses localhost 
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1), \fBolsrd\fR(8), \fBbatmand\fR (8). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Fri 29 Aug 2008, 18:39 

Deleted: trunk/Documentation/manpages/meshs3dmanpage.sgml
===================================================================
--- trunk/Documentation/manpages/meshs3dmanpage.sgml	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/meshs3dmanpage.sgml	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,80 +0,0 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
-  <!ENTITY gnu         "<acronym>GNU</acronym>">
-
-  <!ENTITY program     "meshs3d">
-]>
-<refentry id="meshs3d">
-
-	<refmeta> 
-		<refentrytitle>&program;</refentrytitle>
-		<manvolnum>1</manvolnum>
-	</refmeta> 
-	
-	<refnamediv> 
-		<refname>&program;</refname>
-		<refpurpose> olsr/batman topology visualizer for s3d </refpurpose>
-	</refnamediv>
-	
-	<refsynopsisdiv> 
-		<cmdsynopsis> 
-			<command>&program;</command>
-			<arg choice="opt">-d</arg>
-			<arg choice="opt">-H <replaceable>node</replaceable></arg>
-			<arg choice="opt">-h|--help</arg>
-			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
-		</cmdsynopsis>
-	</refsynopsisdiv> 
-	
-	<refsect1> 
-		<title>DESCRIPTION</title> 
-		<para>
-			<command>&program;(1)</command> is a 3D topology visualizer for olsr/batman and compatible data.
-		</para>
-		<para> </para>
-	</refsect1> 
-	
-	<refsect1>
-		<title>OPTIONS</title> 
-		<para> 
-			This program follows the usual &gnu; command line syntax. A summary of
-			the options supported by <command>&program;</command> is below.
-		</para>
-		<variablelist>
-			<varlistentry>
-				<term><option>-h</option>, <option>--help</option>
-				</term>
-				<listitem> 
-					<para> Show summary of options and exit. </para> 
-				</listitem> 
-			</varlistentry> 
-			<varlistentry> 
-				<term><option>-d</option></term>
-				<listitem> 
-					<para> Enable debug mode </para>
-				</listitem>
-			</varlistentry> 
-			<varlistentry> 
-				<term><option>-H <replaceable>node</replaceable></option></term>
-				<listitem> 
-					<para> connect to olsr node. By default &program; uses localhost</para>
-				</listitem> 
-			</varlistentry>
-			<varlistentry>
-				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
-				<listitem>
-					<para> skip S3D environment and connect to this url </para>
-				</listitem>
-			</varlistentry>
-		</variablelist> 
-	</refsect1> 
-		
-	<refsect1> 
-		<title>SEE ALSO</title>
-		<para> <command>s3d</command>(1), <command>olsrd</command>(8), <command>batmand</command> (8).</para>
-
-		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
-		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
-	</refsect1>
-	
-</refentry> 
-

Deleted: trunk/Documentation/manpages/s3d.1
===================================================================
--- trunk/Documentation/manpages/s3d.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3d.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,34 +0,0 @@
-.TH "s3d" "1" 
-.SH "NAME" 
-s3d \(em  network display server  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3d\fR [\-s|\-\-use-sdl]  [\-r|\-\-rc \fIrc-script\fR]  [\-n|\-\-no-rc]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3d(1)\fR is a network display server which can be used as 3d desktop environment. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
- 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3d\fR is below. 
- 
-.IP "\fB-s\fP, \fB\-\-use-sdl\fP" 10 
-Tells s3d to use SDL as graphics framework system.  
-.IP "\fB-r \fIrc-script\fR\fP, \fB\-\-rc \fIrc-script\fR\fP" 10 
-Use the specified file as rc-script. By default s3d uses ~/.s3drc as 
-per-user rc-script and /etc/s3drc as system-wide rc-script 
-.IP "\fB-n\fP, \fB\-\-no-rc\fP" 10 
-Don't use rc-scripts even if the exist in the apropriate locations.  
-.SH "SEE ALSO" 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.SH "AUTHOR" 
-.PP 
-This manual page was written by Timo Schneider timo.schneider at s2004.tu-chemnitz.de  
-for the \fBDebian\fP project (but may be used by others). 
- 
-.\" created by instant / docbook-to-man, Fri 29 Aug 2008, 18:39 

Deleted: trunk/Documentation/manpages/s3d_x11gate.1
===================================================================
--- trunk/Documentation/manpages/s3d_x11gate.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3d_x11gate.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,27 +0,0 @@
-.TH "s3d_x11gate" "1" 
-.SH "NAME" 
-s3d_x11gate \(em  3d gateway for x11 desktops  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3d_x11gate\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3d_x11gate(1)\fR is a 3D gateway for x11 desktops. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3d_x11gate\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Fri 29 Aug 2008, 18:39 

Deleted: trunk/Documentation/manpages/s3d_x11gatemanpage.sgml
===================================================================
--- trunk/Documentation/manpages/s3d_x11gatemanpage.sgml	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3d_x11gatemanpage.sgml	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,66 +0,0 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
-  <!ENTITY gnu         "<acronym>GNU</acronym>">
-
-  <!ENTITY program     "s3d_x11gate">
-]>
-<refentry id="s3dx11gate">
-
-	<refmeta>
-		<refentrytitle>&program;</refentrytitle>
-		<manvolnum>1</manvolnum>
-	</refmeta>
-
-	<refnamediv>
-		<refname>&program;</refname>
-		<refpurpose> 3d gateway for x11 desktops </refpurpose>
-	</refnamediv>
-
-	<refsynopsisdiv>
-		<cmdsynopsis>
-			<command>&program;</command>
-			<arg choice="opt">-h|--help</arg>
-			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
-		</cmdsynopsis>
-	</refsynopsisdiv>
-
-	<refsect1>
-		<title>DESCRIPTION</title>
-		<para>
-			<command>&program;(1)</command> is a 3D gateway for x11 desktops.
-		</para>
-		<para> </para>
-	</refsect1>
-
-	<refsect1>
-		<title>OPTIONS</title>
-		<para>
-			This program follows the usual &gnu; command line syntax. A summary of
-			the options supported by <command>&program;</command> is below.
-		</para>
-		<variablelist>
-			<varlistentry>
-				<term><option>-h</option>, <option>--help</option>
-				</term>
-				<listitem>
-					<para>Show summary of options and exit. </para>
-				</listitem>
-			</varlistentry>
-			<varlistentry>
-				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
-				<listitem>
-					<para> skip S3D environment and connect to this url </para>
-				</listitem>
-			</varlistentry>
-		</variablelist>
-	</refsect1>
-
-	<refsect1>
-		<title>SEE ALSO</title>
-		<para> <command>s3d</command>(1).</para>
-
-		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
-		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
-	</refsect1>
-
-</refentry>
-

Deleted: trunk/Documentation/manpages/s3dfm.1
===================================================================
--- trunk/Documentation/manpages/s3dfm.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3dfm.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,28 +0,0 @@
-.TH "s3dfm" "1" 
-.SH "NAME" 
-s3dfm \(em  s3d file manager  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3dfm\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3dfm(1)\fR is a 3D file manager. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
- 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3dfm\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Fri 29 Aug 2008, 18:39 

Deleted: trunk/Documentation/manpages/s3dfmmanpage.sgml
===================================================================
--- trunk/Documentation/manpages/s3dfmmanpage.sgml	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3dfmmanpage.sgml	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,66 +0,0 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
-  <!ENTITY gnu         "<acronym>GNU</acronym>">
-
-  <!ENTITY program     "s3dfm">
-]>
-<refentry id="s3dfm"> 
-
-	<refmeta> 
-		<refentrytitle>&program;</refentrytitle>
-		<manvolnum>1</manvolnum>
-	</refmeta> 
-	
-	<refnamediv> 
-		<refname>&program;</refname>
-		<refpurpose> s3d file manager </refpurpose>
-	</refnamediv>
-	
-	<refsynopsisdiv> 
-		<cmdsynopsis> 
-			<command>&program;</command>
-			<arg choice="opt">-h|--help</arg>
-			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
-		</cmdsynopsis>
-	</refsynopsisdiv> 
-	
-	<refsect1> 
-		<title>DESCRIPTION</title> 
-		<para>
-			<command>&program;(1)</command> is a 3D file manager.
-		</para>
-		<para> </para>
-	</refsect1> 
-	
-	<refsect1>
-		<title>OPTIONS</title> 
-		<para> 
-			This program follows the usual &gnu; command line syntax. A summary of
-			the options supported by <command>&program;</command> is below.
-		</para>
-		<variablelist>
-			<varlistentry>
-				<term><option>-h</option>, <option>--help</option>
-				</term>
-				<listitem> 
-					<para> Show summary of options and exit. </para> 
-				</listitem> 
-			</varlistentry>
-			<varlistentry>
-				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
-				<listitem>
-					<para> skip S3D environment and connect to this url </para>
-				</listitem>
-			</varlistentry>
-		</variablelist> 
-	</refsect1> 
-		
-	<refsect1> 
-		<title>SEE ALSO</title>
-		<para> <command>s3d</command>(1).</para>
-
-		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
-		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
-	</refsect1>
-	
-</refentry> 
-

Deleted: trunk/Documentation/manpages/s3dmanpage.sgml
===================================================================
--- trunk/Documentation/manpages/s3dmanpage.sgml	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3dmanpage.sgml	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,80 +0,0 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
-  <!ENTITY gnu         "<acronym>GNU</acronym>">
-  <!ENTITY debian      "<productname>Debian</productname>">
-
-  <!ENTITY program     "s3d">
-]>
-<refentry id="s3d"> 
-
-	<refmeta> 
-		<refentrytitle>&program;</refentrytitle>
-		<manvolnum>1</manvolnum>
-	</refmeta> 
-	
-	<refnamediv> 
-		<refname>&program;</refname>
-		<refpurpose> network display server </refpurpose>
-	</refnamediv>
-	
-	<refsynopsisdiv> 
-		<cmdsynopsis> 
-			<command>&program;</command>
-			<arg choice="opt">-s|--use-sdl</arg>
-			<arg choice="opt">-r|--rc <replaceable>rc-script</replaceable></arg>
-			<arg choice="opt">-n|--no-rc</arg>
-		</cmdsynopsis>
-	</refsynopsisdiv> 
-	
-	<refsect1> 
-		<title>DESCRIPTION</title> 
-		<para>
-			<command>&program;(1)</command> is a network display server which can be used as 3d desktop environment.
-		</para>
-		<para> </para>
-	</refsect1> 
-	
-	<refsect1>
-		<title>OPTIONS</title> 
-		<para> 
-			This program follows the usual &gnu; command line syntax. A summary of
-			the options supported by <command>&program;</command> is below.
-		</para>
-		<variablelist>
-			<varlistentry> 
-				<term><option>-s</option>, <option>--use-sdl</option></term>
-				<listitem> 
-					<para> Tells &program; to use SDL as graphics framework system. </para>
-				</listitem>
-			</varlistentry> 
-			<varlistentry> 
-				<term><option>-r <replaceable>rc-script</replaceable></option>, <option>--rc <replaceable>rc-script</replaceable></option></term>
-				<listitem> 
-					<para> Use the specified file as rc-script. By default &program; uses ~/.s3drc as
-						   per-user rc-script and /etc/s3drc as system-wide rc-script</para>
-				</listitem> 
-			</varlistentry>
-			<varlistentry> 
-				<term><option>-n</option>, <option>--no-rc</option></term>
-				<listitem> 
-					<para> Don't use rc-scripts even if the exist in the apropriate locations. </para>
-				</listitem> 
-			</varlistentry>
-		</variablelist> 
-	</refsect1> 
-		
-	<refsect1> 
-		<title>SEE ALSO</title>
-		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
-		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
-	</refsect1>
-
-	<refsect1> 
-		<title>AUTHOR</title>
-		<para>
-			This manual page was written by Timo Schneider <email>timo.schneider at s2004.tu-chemnitz.de</email> 
-			for the &debian; project (but may be used by others).
-		</para>
-	</refsect1>
-	
-</refentry> 
-

Deleted: trunk/Documentation/manpages/s3dosm.1
===================================================================
--- trunk/Documentation/manpages/s3dosm.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3dosm.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,45 +0,0 @@
-.TH "s3dosm" "1" 
-.SH "NAME" 
-s3dosm \(em  gps card application for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3dosm\fR [\-o|\-\-osm \fIMINLAT\fR,\fIMINLON\fR,\fIMAXLAT\fR,\fIMAXLON\fR]  [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  [\fIfiles\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3dosm(1)\fR is a 3D gps card application for openstreetmap/kismet xml card data. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3dosm\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB-o\fP, \fB\-\-osm\fP \fIMINLAT\fR,\fIMINLON\fR,\fIMAXLAT\fR,\fIMAXLON\fR 				" 10 
-Load a map with the given bounding box from the openstreetmap server.  
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "EXAMPLES" 
-.PP 
- 
-.PP 
-.nf 
-$  
-.ft B 
-s3osm \-\-osm \fI12.90142,50.82475,12.93352,50.84592\fR 
-.ft  
-$  
-.ft B 
-s3osm \fIosmdata\fR.xml 
-.ft 
-.fi 
- 
- 
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Fri 29 Aug 2008, 18:58 

Deleted: trunk/Documentation/manpages/s3dosmmanpage.sgml
===================================================================
--- trunk/Documentation/manpages/s3dosmmanpage.sgml	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3dosmmanpage.sgml	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,87 +0,0 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
-  <!ENTITY gnu         "<acronym>GNU</acronym>">
-
-  <!ENTITY program     "s3dosm">
-]>
-<refentry id="s3dosm">
-
-	<refmeta>
-		<refentrytitle>&program;</refentrytitle>
-		<manvolnum>1</manvolnum>
-	</refmeta>
-
-	<refnamediv>
-		<refname>&program;</refname>
-		<refpurpose> gps card application for s3d </refpurpose>
-	</refnamediv>
-
-	<refsynopsisdiv>
-		<cmdsynopsis>
-			<command>&program;</command>
-			<arg choice="opt">-o|--osm <replaceable>MINLAT</replaceable>,<replaceable>MINLON</replaceable>,<replaceable>MAXLAT</replaceable>,<replaceable>MAXLON</replaceable></arg>
-			<arg choice="opt">-h|--help</arg>
-			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
-			<arg choice="opt"><replaceable>files</replaceable></arg>
-		</cmdsynopsis>
-	</refsynopsisdiv>
-
-	<refsect1>
-		<title>DESCRIPTION</title>
-		<para>
-			<command>&program;(1)</command> is a 3D gps card application for openstreetmap/kismet xml card data.
-		</para>
-		<para> </para>
-	</refsect1>
-
-	<refsect1>
-		<title>OPTIONS</title>
-		<para>
-			This program follows the usual &gnu; command line syntax. A summary of
-			the options supported by <command>&program;</command> is below.
-		</para>
-		<variablelist>
-			<varlistentry>
-				<term><option>-h</option>, <option>--help</option>
-				</term>
-				<listitem>
-					<para> Show summary of options and exit. </para>
-				</listitem>
-			</varlistentry>
-			<varlistentry>
-				<term><option>-o</option>, <option>--osm</option> <replaceable>MINLAT</replaceable>,<replaceable>MINLON</replaceable>,<replaceable>MAXLAT</replaceable>,<replaceable>MAXLON</replaceable>
-				</term>
-				<listitem>
-					<para> Load a map with the given bounding box from the openstreetmap server. </para>
-				</listitem>
-			</varlistentry>
-			<varlistentry>
-				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
-				<listitem>
-					<para> skip S3D environment and connect to this url </para>
-				</listitem>
-			</varlistentry>
-		</variablelist>
-	</refsect1>
-
-	<refsect1>
-		<title>EXAMPLES</title>
-		<para>
-		<screen
-><prompt>$ </prompt><userinput>s3osm --osm <replaceable>12.90142,50.82475,12.93352,50.84592</replaceable></userinput>
-
-<prompt>$ </prompt><userinput>s3osm <replaceable>osmdata</replaceable>.xml</userinput>
-</screen>
-
-		</para>
-	</refsect1>
-
-	<refsect1>
-		<title>SEE ALSO</title>
-		<para> <command>s3d</command>(1).</para>
-
-		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
-		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
-	</refsect1>
-
-</refentry>
-

Deleted: trunk/Documentation/manpages/s3dvt.1
===================================================================
--- trunk/Documentation/manpages/s3dvt.1	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3dvt.1	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,27 +0,0 @@
-.TH "s3dvt" "1" 
-.SH "NAME" 
-s3dvt \(em  3d terminal emulator for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3dvt\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3dvt(1)\fR is a terminal emulator. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3dvt\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Fri 29 Aug 2008, 18:39 

Deleted: trunk/Documentation/manpages/s3dvtmanpage.sgml
===================================================================
--- trunk/Documentation/manpages/s3dvtmanpage.sgml	2008-09-01 18:44:59 UTC (rev 981)
+++ trunk/Documentation/manpages/s3dvtmanpage.sgml	2008-09-01 18:45:05 UTC (rev 982)
@@ -1,66 +0,0 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
-  <!ENTITY gnu         "<acronym>GNU</acronym>">
-
-  <!ENTITY program     "s3dvt">
-]>
-<refentry id="s3dvt">
-
-	<refmeta>
-		<refentrytitle>&program;</refentrytitle>
-		<manvolnum>1</manvolnum>
-	</refmeta>
-
-	<refnamediv>
-		<refname>&program;</refname>
-		<refpurpose> 3d terminal emulator for s3d </refpurpose>
-	</refnamediv>
-
-	<refsynopsisdiv>
-		<cmdsynopsis>
-			<command>&program;</command>
-			<arg choice="opt">-h|--help</arg>
-			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
-		</cmdsynopsis>
-	</refsynopsisdiv>
-
-	<refsect1>
-		<title>DESCRIPTION</title>
-		<para>
-			<command>&program;(1)</command> is a terminal emulator.
-		</para>
-		<para> </para>
-	</refsect1>
-
-	<refsect1>
-		<title>OPTIONS</title>
-		<para>
-			This program follows the usual &gnu; command line syntax. A summary of
-			the options supported by <command>&program;</command> is below.
-		</para>
-		<variablelist>
-			<varlistentry>
-				<term><option>-h</option>, <option>--help</option>
-				</term>
-				<listitem>
-					<para> Show summary of options and exit. </para>
-				</listitem>
-			</varlistentry>
-			<varlistentry>
-				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
-				<listitem>
-					<para> skip S3D environment and connect to this url </para>
-				</listitem>
-			</varlistentry>
-		</variablelist>
-	</refsect1>
-
-	<refsect1>
-		<title>SEE ALSO</title>
-		<para> <command>s3d</command>(1).</para>
-
-		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
-		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
-	</refsect1>
-
-</refentry>
-



From lazhur at mail.berlios.de  Mon Sep  1 20:53:04 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 1 Sep 2008 20:53:04 +0200
Subject: [S3d-svn] r983 - trunk/Documentation/manpages/man1
Message-ID: <200809011853.m81Ir4U0005743@sheep.berlios.de>

Author: lazhur
Date: 2008-09-01 20:53:03 +0200 (Mon, 01 Sep 2008)
New Revision: 983

Added:
   trunk/Documentation/manpages/man1/dot_mcp.sgml
   trunk/Documentation/manpages/man1/kism3d.sgml
   trunk/Documentation/manpages/man1/meshs3d.sgml
   trunk/Documentation/manpages/man1/s3d.sgml
   trunk/Documentation/manpages/man1/s3d_x11gate.sgml
   trunk/Documentation/manpages/man1/s3dfm.sgml
   trunk/Documentation/manpages/man1/s3dosm.sgml
   trunk/Documentation/manpages/man1/s3dvt.sgml
Log:
Readd program sgml's for man pages

Added: trunk/Documentation/manpages/man1/dot_mcp.sgml
===================================================================
--- trunk/Documentation/manpages/man1/dot_mcp.sgml	2008-09-01 18:45:05 UTC (rev 982)
+++ trunk/Documentation/manpages/man1/dot_mcp.sgml	2008-09-01 18:53:03 UTC (rev 983)
@@ -0,0 +1,58 @@
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+  <!ENTITY gnu         "<acronym>GNU</acronym>">
+
+  <!ENTITY program     "dot_mcp">
+]>
+<refentry id="dotmcp">
+
+	<refmeta> 
+		<refentrytitle>&program;</refentrytitle>
+		<manvolnum>1</manvolnum>
+	</refmeta> 
+	
+	<refnamediv> 
+		<refname>&program;</refname>
+		<refpurpose> mcp for s3d </refpurpose>
+	</refnamediv>
+
+	<refsynopsisdiv>
+		<cmdsynopsis>
+			<command>&program;</command>
+			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
+		</cmdsynopsis>
+	</refsynopsisdiv>
+
+	<refsect1>
+		<title>OPTIONS</title>
+		<para>
+			This program follows the usual &gnu; command line syntax. A summary of
+			the options supported by <command>&program;</command> is below.
+		</para>
+		<variablelist>
+			<varlistentry>
+				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
+				<listitem>
+					<para> skip S3D environment and connect to this url </para>
+				</listitem>
+			</varlistentry>
+		</variablelist>
+	</refsect1> 
+	
+	<refsect1> 
+		<title>DESCRIPTION</title> 
+		<para>
+			<command>&program;(1)</command> is a mcp (which is the window manager in s3d-terms) for s3d.
+		</para>
+		<para> </para>
+	</refsect1> 
+	
+	<refsect1>
+		<title>SEE ALSO</title>
+		<para><command>s3d</command>(1).</para>
+
+		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
+		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
+	</refsect1>
+	
+</refentry> 
+

Added: trunk/Documentation/manpages/man1/kism3d.sgml
===================================================================
--- trunk/Documentation/manpages/man1/kism3d.sgml	2008-09-01 18:45:05 UTC (rev 982)
+++ trunk/Documentation/manpages/man1/kism3d.sgml	2008-09-01 18:53:03 UTC (rev 983)
@@ -0,0 +1,59 @@
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+  <!ENTITY gnu         "<acronym>GNU</acronym>">
+
+  <!ENTITY program     "kism3d">
+]>
+<refentry id="kism3d">
+
+	<refmeta> 
+		<refentrytitle>&program;</refentrytitle>
+		<manvolnum>1</manvolnum>
+	</refmeta> 
+	
+	<refnamediv> 
+		<refname>&program;</refname>
+		<refpurpose> 802.11 visualizer for s3d </refpurpose>
+	</refnamediv>
+	
+	<refsynopsisdiv> 
+		<cmdsynopsis> 
+			<command>&program;</command>
+			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
+			<arg choice="plain"><replaceable>HOST</replaceable>:<replaceable>PORT</replaceable></arg>
+		</cmdsynopsis>
+	</refsynopsisdiv> 
+	
+	<refsect1> 
+		<title>DESCRIPTION</title> 
+		<para>
+			<command>&program;(1)</command> is a 3D 802.11 visualizer for kismet.
+		</para>
+		<para> </para>
+	</refsect1> 
+	
+	<refsect1>
+		<title>OPTIONS</title> 
+		<para> 
+			This program follows the usual &gnu; command line syntax. A summary of
+			the options supported by <command>&program;</command> is below.
+		</para>
+		<variablelist>
+			<varlistentry>
+				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
+				<listitem>
+					<para> skip S3D environment and connect to this url </para>
+				</listitem>
+			</varlistentry>
+		</variablelist> 
+	</refsect1> 
+		
+	<refsect1> 
+		<title>SEE ALSO</title>
+		<para> <command>s3d</command>(1), <command>kismet</command>(1).</para>
+
+		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
+		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
+	</refsect1>
+	
+</refentry> 
+

Added: trunk/Documentation/manpages/man1/meshs3d.sgml
===================================================================
--- trunk/Documentation/manpages/man1/meshs3d.sgml	2008-09-01 18:45:05 UTC (rev 982)
+++ trunk/Documentation/manpages/man1/meshs3d.sgml	2008-09-01 18:53:03 UTC (rev 983)
@@ -0,0 +1,80 @@
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+  <!ENTITY gnu         "<acronym>GNU</acronym>">
+
+  <!ENTITY program     "meshs3d">
+]>
+<refentry id="meshs3d">
+
+	<refmeta> 
+		<refentrytitle>&program;</refentrytitle>
+		<manvolnum>1</manvolnum>
+	</refmeta> 
+	
+	<refnamediv> 
+		<refname>&program;</refname>
+		<refpurpose> olsr/batman topology visualizer for s3d </refpurpose>
+	</refnamediv>
+	
+	<refsynopsisdiv> 
+		<cmdsynopsis> 
+			<command>&program;</command>
+			<arg choice="opt">-d</arg>
+			<arg choice="opt">-H <replaceable>node</replaceable></arg>
+			<arg choice="opt">-h|--help</arg>
+			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
+		</cmdsynopsis>
+	</refsynopsisdiv> 
+	
+	<refsect1> 
+		<title>DESCRIPTION</title> 
+		<para>
+			<command>&program;(1)</command> is a 3D topology visualizer for olsr/batman and compatible data.
+		</para>
+		<para> </para>
+	</refsect1> 
+	
+	<refsect1>
+		<title>OPTIONS</title> 
+		<para> 
+			This program follows the usual &gnu; command line syntax. A summary of
+			the options supported by <command>&program;</command> is below.
+		</para>
+		<variablelist>
+			<varlistentry>
+				<term><option>-h</option>, <option>--help</option>
+				</term>
+				<listitem> 
+					<para> Show summary of options and exit. </para> 
+				</listitem> 
+			</varlistentry> 
+			<varlistentry> 
+				<term><option>-d</option></term>
+				<listitem> 
+					<para> Enable debug mode </para>
+				</listitem>
+			</varlistentry> 
+			<varlistentry> 
+				<term><option>-H <replaceable>node</replaceable></option></term>
+				<listitem> 
+					<para> connect to olsr node. By default &program; uses localhost</para>
+				</listitem> 
+			</varlistentry>
+			<varlistentry>
+				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
+				<listitem>
+					<para> skip S3D environment and connect to this url </para>
+				</listitem>
+			</varlistentry>
+		</variablelist> 
+	</refsect1> 
+		
+	<refsect1> 
+		<title>SEE ALSO</title>
+		<para> <command>s3d</command>(1), <command>olsrd</command>(8), <command>batmand</command> (8).</para>
+
+		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
+		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
+	</refsect1>
+	
+</refentry> 
+

Added: trunk/Documentation/manpages/man1/s3d.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3d.sgml	2008-09-01 18:45:05 UTC (rev 982)
+++ trunk/Documentation/manpages/man1/s3d.sgml	2008-09-01 18:53:03 UTC (rev 983)
@@ -0,0 +1,80 @@
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+  <!ENTITY gnu         "<acronym>GNU</acronym>">
+  <!ENTITY debian      "<productname>Debian</productname>">
+
+  <!ENTITY program     "s3d">
+]>
+<refentry id="s3d"> 
+
+	<refmeta> 
+		<refentrytitle>&program;</refentrytitle>
+		<manvolnum>1</manvolnum>
+	</refmeta> 
+	
+	<refnamediv> 
+		<refname>&program;</refname>
+		<refpurpose> network display server </refpurpose>
+	</refnamediv>
+	
+	<refsynopsisdiv> 
+		<cmdsynopsis> 
+			<command>&program;</command>
+			<arg choice="opt">-s|--use-sdl</arg>
+			<arg choice="opt">-r|--rc <replaceable>rc-script</replaceable></arg>
+			<arg choice="opt">-n|--no-rc</arg>
+		</cmdsynopsis>
+	</refsynopsisdiv> 
+	
+	<refsect1> 
+		<title>DESCRIPTION</title> 
+		<para>
+			<command>&program;(1)</command> is a network display server which can be used as 3d desktop environment.
+		</para>
+		<para> </para>
+	</refsect1> 
+	
+	<refsect1>
+		<title>OPTIONS</title> 
+		<para> 
+			This program follows the usual &gnu; command line syntax. A summary of
+			the options supported by <command>&program;</command> is below.
+		</para>
+		<variablelist>
+			<varlistentry> 
+				<term><option>-s</option>, <option>--use-sdl</option></term>
+				<listitem> 
+					<para> Tells &program; to use SDL as graphics framework system. </para>
+				</listitem>
+			</varlistentry> 
+			<varlistentry> 
+				<term><option>-r <replaceable>rc-script</replaceable></option>, <option>--rc <replaceable>rc-script</replaceable></option></term>
+				<listitem> 
+					<para> Use the specified file as rc-script. By default &program; uses ~/.s3drc as
+						   per-user rc-script and /etc/s3drc as system-wide rc-script</para>
+				</listitem> 
+			</varlistentry>
+			<varlistentry> 
+				<term><option>-n</option>, <option>--no-rc</option></term>
+				<listitem> 
+					<para> Don't use rc-scripts even if the exist in the apropriate locations. </para>
+				</listitem> 
+			</varlistentry>
+		</variablelist> 
+	</refsect1> 
+		
+	<refsect1> 
+		<title>SEE ALSO</title>
+		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
+		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
+	</refsect1>
+
+	<refsect1> 
+		<title>AUTHOR</title>
+		<para>
+			This manual page was written by Timo Schneider <email>timo.schneider at s2004.tu-chemnitz.de</email> 
+			for the &debian; project (but may be used by others).
+		</para>
+	</refsect1>
+	
+</refentry> 
+

Added: trunk/Documentation/manpages/man1/s3d_x11gate.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3d_x11gate.sgml	2008-09-01 18:45:05 UTC (rev 982)
+++ trunk/Documentation/manpages/man1/s3d_x11gate.sgml	2008-09-01 18:53:03 UTC (rev 983)
@@ -0,0 +1,66 @@
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+  <!ENTITY gnu         "<acronym>GNU</acronym>">
+
+  <!ENTITY program     "s3d_x11gate">
+]>
+<refentry id="s3dx11gate">
+
+	<refmeta>
+		<refentrytitle>&program;</refentrytitle>
+		<manvolnum>1</manvolnum>
+	</refmeta>
+
+	<refnamediv>
+		<refname>&program;</refname>
+		<refpurpose> 3d gateway for x11 desktops </refpurpose>
+	</refnamediv>
+
+	<refsynopsisdiv>
+		<cmdsynopsis>
+			<command>&program;</command>
+			<arg choice="opt">-h|--help</arg>
+			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
+		</cmdsynopsis>
+	</refsynopsisdiv>
+
+	<refsect1>
+		<title>DESCRIPTION</title>
+		<para>
+			<command>&program;(1)</command> is a 3D gateway for x11 desktops.
+		</para>
+		<para> </para>
+	</refsect1>
+
+	<refsect1>
+		<title>OPTIONS</title>
+		<para>
+			This program follows the usual &gnu; command line syntax. A summary of
+			the options supported by <command>&program;</command> is below.
+		</para>
+		<variablelist>
+			<varlistentry>
+				<term><option>-h</option>, <option>--help</option>
+				</term>
+				<listitem>
+					<para>Show summary of options and exit. </para>
+				</listitem>
+			</varlistentry>
+			<varlistentry>
+				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
+				<listitem>
+					<para> skip S3D environment and connect to this url </para>
+				</listitem>
+			</varlistentry>
+		</variablelist>
+	</refsect1>
+
+	<refsect1>
+		<title>SEE ALSO</title>
+		<para> <command>s3d</command>(1).</para>
+
+		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
+		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
+	</refsect1>
+
+</refentry>
+

Added: trunk/Documentation/manpages/man1/s3dfm.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3dfm.sgml	2008-09-01 18:45:05 UTC (rev 982)
+++ trunk/Documentation/manpages/man1/s3dfm.sgml	2008-09-01 18:53:03 UTC (rev 983)
@@ -0,0 +1,66 @@
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+  <!ENTITY gnu         "<acronym>GNU</acronym>">
+
+  <!ENTITY program     "s3dfm">
+]>
+<refentry id="s3dfm"> 
+
+	<refmeta> 
+		<refentrytitle>&program;</refentrytitle>
+		<manvolnum>1</manvolnum>
+	</refmeta> 
+	
+	<refnamediv> 
+		<refname>&program;</refname>
+		<refpurpose> s3d file manager </refpurpose>
+	</refnamediv>
+	
+	<refsynopsisdiv> 
+		<cmdsynopsis> 
+			<command>&program;</command>
+			<arg choice="opt">-h|--help</arg>
+			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
+		</cmdsynopsis>
+	</refsynopsisdiv> 
+	
+	<refsect1> 
+		<title>DESCRIPTION</title> 
+		<para>
+			<command>&program;(1)</command> is a 3D file manager.
+		</para>
+		<para> </para>
+	</refsect1> 
+	
+	<refsect1>
+		<title>OPTIONS</title> 
+		<para> 
+			This program follows the usual &gnu; command line syntax. A summary of
+			the options supported by <command>&program;</command> is below.
+		</para>
+		<variablelist>
+			<varlistentry>
+				<term><option>-h</option>, <option>--help</option>
+				</term>
+				<listitem> 
+					<para> Show summary of options and exit. </para> 
+				</listitem> 
+			</varlistentry>
+			<varlistentry>
+				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
+				<listitem>
+					<para> skip S3D environment and connect to this url </para>
+				</listitem>
+			</varlistentry>
+		</variablelist> 
+	</refsect1> 
+		
+	<refsect1> 
+		<title>SEE ALSO</title>
+		<para> <command>s3d</command>(1).</para>
+
+		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
+		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
+	</refsect1>
+	
+</refentry> 
+

Added: trunk/Documentation/manpages/man1/s3dosm.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3dosm.sgml	2008-09-01 18:45:05 UTC (rev 982)
+++ trunk/Documentation/manpages/man1/s3dosm.sgml	2008-09-01 18:53:03 UTC (rev 983)
@@ -0,0 +1,87 @@
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+  <!ENTITY gnu         "<acronym>GNU</acronym>">
+
+  <!ENTITY program     "s3dosm">
+]>
+<refentry id="s3dosm">
+
+	<refmeta>
+		<refentrytitle>&program;</refentrytitle>
+		<manvolnum>1</manvolnum>
+	</refmeta>
+
+	<refnamediv>
+		<refname>&program;</refname>
+		<refpurpose> gps card application for s3d </refpurpose>
+	</refnamediv>
+
+	<refsynopsisdiv>
+		<cmdsynopsis>
+			<command>&program;</command>
+			<arg choice="opt">-o|--osm <replaceable>MINLAT</replaceable>,<replaceable>MINLON</replaceable>,<replaceable>MAXLAT</replaceable>,<replaceable>MAXLON</replaceable></arg>
+			<arg choice="opt">-h|--help</arg>
+			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
+			<arg choice="opt"><replaceable>files</replaceable></arg>
+		</cmdsynopsis>
+	</refsynopsisdiv>
+
+	<refsect1>
+		<title>DESCRIPTION</title>
+		<para>
+			<command>&program;(1)</command> is a 3D gps card application for openstreetmap/kismet xml card data.
+		</para>
+		<para> </para>
+	</refsect1>
+
+	<refsect1>
+		<title>OPTIONS</title>
+		<para>
+			This program follows the usual &gnu; command line syntax. A summary of
+			the options supported by <command>&program;</command> is below.
+		</para>
+		<variablelist>
+			<varlistentry>
+				<term><option>-h</option>, <option>--help</option>
+				</term>
+				<listitem>
+					<para> Show summary of options and exit. </para>
+				</listitem>
+			</varlistentry>
+			<varlistentry>
+				<term><option>-o</option>, <option>--osm</option> <replaceable>MINLAT</replaceable>,<replaceable>MINLON</replaceable>,<replaceable>MAXLAT</replaceable>,<replaceable>MAXLON</replaceable>
+				</term>
+				<listitem>
+					<para> Load a map with the given bounding box from the openstreetmap server. </para>
+				</listitem>
+			</varlistentry>
+			<varlistentry>
+				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
+				<listitem>
+					<para> skip S3D environment and connect to this url </para>
+				</listitem>
+			</varlistentry>
+		</variablelist>
+	</refsect1>
+
+	<refsect1>
+		<title>EXAMPLES</title>
+		<para>
+		<screen
+><prompt>$ </prompt><userinput>s3osm --osm <replaceable>12.90142,50.82475,12.93352,50.84592</replaceable></userinput>
+
+<prompt>$ </prompt><userinput>s3osm <replaceable>osmdata</replaceable>.xml</userinput>
+</screen>
+
+		</para>
+	</refsect1>
+
+	<refsect1>
+		<title>SEE ALSO</title>
+		<para> <command>s3d</command>(1).</para>
+
+		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
+		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
+	</refsect1>
+
+</refentry>
+

Added: trunk/Documentation/manpages/man1/s3dvt.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3dvt.sgml	2008-09-01 18:45:05 UTC (rev 982)
+++ trunk/Documentation/manpages/man1/s3dvt.sgml	2008-09-01 18:53:03 UTC (rev 983)
@@ -0,0 +1,66 @@
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+  <!ENTITY gnu         "<acronym>GNU</acronym>">
+
+  <!ENTITY program     "s3dvt">
+]>
+<refentry id="s3dvt">
+
+	<refmeta>
+		<refentrytitle>&program;</refentrytitle>
+		<manvolnum>1</manvolnum>
+	</refmeta>
+
+	<refnamediv>
+		<refname>&program;</refname>
+		<refpurpose> 3d terminal emulator for s3d </refpurpose>
+	</refnamediv>
+
+	<refsynopsisdiv>
+		<cmdsynopsis>
+			<command>&program;</command>
+			<arg choice="opt">-h|--help</arg>
+			<arg choice="opt">--s3d-url <replaceable>url</replaceable></arg>
+		</cmdsynopsis>
+	</refsynopsisdiv>
+
+	<refsect1>
+		<title>DESCRIPTION</title>
+		<para>
+			<command>&program;(1)</command> is a terminal emulator.
+		</para>
+		<para> </para>
+	</refsect1>
+
+	<refsect1>
+		<title>OPTIONS</title>
+		<para>
+			This program follows the usual &gnu; command line syntax. A summary of
+			the options supported by <command>&program;</command> is below.
+		</para>
+		<variablelist>
+			<varlistentry>
+				<term><option>-h</option>, <option>--help</option>
+				</term>
+				<listitem>
+					<para> Show summary of options and exit. </para>
+				</listitem>
+			</varlistentry>
+			<varlistentry>
+				<term><option>--s3d-url <replaceable>url</replaceable></option></term>
+				<listitem>
+					<para> skip S3D environment and connect to this url </para>
+				</listitem>
+			</varlistentry>
+		</variablelist>
+	</refsect1>
+
+	<refsect1>
+		<title>SEE ALSO</title>
+		<para> <command>s3d</command>(1).</para>
+
+		<para> <ulink url="http://s3d.berlios.de/"> s3d project page on berlios </ulink> </para>
+		<!--TODO: ADD REFERENCE TO APPS AND /usr/share/doc/s3d/ -->
+	</refsect1>
+
+</refentry>
+



From lazhur at mail.berlios.de  Mon Sep  1 21:08:12 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 1 Sep 2008 21:08:12 +0200
Subject: [S3d-svn] r984 - in trunk/Documentation/manpages: . man1 man3 man9
Message-ID: <200809011908.m81J8C5m006537@sheep.berlios.de>

Author: lazhur
Date: 2008-09-01 21:08:08 +0200 (Mon, 01 Sep 2008)
New Revision: 984

Modified:
   trunk/Documentation/manpages/build-manpages.sh
   trunk/Documentation/manpages/man1/dot_mcp.1
   trunk/Documentation/manpages/man1/kism3d.1
   trunk/Documentation/manpages/man1/meshs3d.1
   trunk/Documentation/manpages/man1/s3d.1
   trunk/Documentation/manpages/man1/s3d_x11gate.1
   trunk/Documentation/manpages/man1/s3dfm.1
   trunk/Documentation/manpages/man1/s3dosm.1
   trunk/Documentation/manpages/man1/s3dvt.1
   trunk/Documentation/manpages/man3/s3d_angle_to_cam.3
   trunk/Documentation/manpages/man3/s3d_clear_callback.3
   trunk/Documentation/manpages/man3/s3d_clone.3
   trunk/Documentation/manpages/man3/s3d_clone_target.3
   trunk/Documentation/manpages/man3/s3d_del_object.3
   trunk/Documentation/manpages/man3/s3d_delete_event.3
   trunk/Documentation/manpages/man3/s3d_draw_string.3
   trunk/Documentation/manpages/man3/s3d_find_event.3
   trunk/Documentation/manpages/man3/s3d_flags_off.3
   trunk/Documentation/manpages/man3/s3d_flags_on.3
   trunk/Documentation/manpages/man3/s3d_get_callback.3
   trunk/Documentation/manpages/man3/s3d_ignore_callback.3
   trunk/Documentation/manpages/man3/s3d_import_model_file.3
   trunk/Documentation/manpages/man3/s3d_init.3
   trunk/Documentation/manpages/man3/s3d_link.3
   trunk/Documentation/manpages/man3/s3d_load_line_normals.3
   trunk/Documentation/manpages/man3/s3d_load_materials_a.3
   trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3
   trunk/Documentation/manpages/man3/s3d_load_texture.3
   trunk/Documentation/manpages/man3/s3d_mainloop.3
   trunk/Documentation/manpages/man3/s3d_mcp_focus.3
   trunk/Documentation/manpages/man3/s3d_net_check.3
   trunk/Documentation/manpages/man3/s3d_new_object.3
   trunk/Documentation/manpages/man3/s3d_open_file.3
   trunk/Documentation/manpages/man3/s3d_pep_line.3
   trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_lines.3
   trunk/Documentation/manpages/man3/s3d_pep_material.3
   trunk/Documentation/manpages/man3/s3d_pep_material_a.3
   trunk/Documentation/manpages/man3/s3d_pep_material_texture.3
   trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3
   trunk/Documentation/manpages/man3/s3d_pep_vertex.3
   trunk/Documentation/manpages/man3/s3d_pep_vertices.3
   trunk/Documentation/manpages/man3/s3d_pop_event.3
   trunk/Documentation/manpages/man3/s3d_pop_line.3
   trunk/Documentation/manpages/man3/s3d_pop_material.3
   trunk/Documentation/manpages/man3/s3d_pop_polygon.3
   trunk/Documentation/manpages/man3/s3d_pop_texture.3
   trunk/Documentation/manpages/man3/s3d_pop_vertex.3
   trunk/Documentation/manpages/man3/s3d_process_stack.3
   trunk/Documentation/manpages/man3/s3d_push_event.3
   trunk/Documentation/manpages/man3/s3d_push_line.3
   trunk/Documentation/manpages/man3/s3d_push_lines.3
   trunk/Documentation/manpages/man3/s3d_push_material.3
   trunk/Documentation/manpages/man3/s3d_push_material_a.3
   trunk/Documentation/manpages/man3/s3d_push_materials_a.3
   trunk/Documentation/manpages/man3/s3d_push_polygon.3
   trunk/Documentation/manpages/man3/s3d_push_polygons.3
   trunk/Documentation/manpages/man3/s3d_push_texture.3
   trunk/Documentation/manpages/man3/s3d_push_textures.3
   trunk/Documentation/manpages/man3/s3d_push_vertex.3
   trunk/Documentation/manpages/man3/s3d_push_vertices.3
   trunk/Documentation/manpages/man3/s3d_quit.3
   trunk/Documentation/manpages/man3/s3d_rotate.3
   trunk/Documentation/manpages/man3/s3d_scale.3
   trunk/Documentation/manpages/man3/s3d_select_font.3
   trunk/Documentation/manpages/man3/s3d_set_callback.3
   trunk/Documentation/manpages/man3/s3d_strlen.3
   trunk/Documentation/manpages/man3/s3d_translate.3
   trunk/Documentation/manpages/man3/s3d_unlink.3
   trunk/Documentation/manpages/man3/s3d_usage.3
   trunk/Documentation/manpages/man3/s3d_vector_angle.3
   trunk/Documentation/manpages/man3/s3d_vector_cross_product.3
   trunk/Documentation/manpages/man3/s3d_vector_dot_product.3
   trunk/Documentation/manpages/man3/s3d_vector_length.3
   trunk/Documentation/manpages/man3/s3d_vector_subtract.3
   trunk/Documentation/manpages/man3/s3dw_ani_mate.3
   trunk/Documentation/manpages/man3/s3dw_button_new.3
   trunk/Documentation/manpages/man3/s3dw_delete.3
   trunk/Documentation/manpages/man3/s3dw_focus.3
   trunk/Documentation/manpages/man3/s3dw_getroot.3
   trunk/Documentation/manpages/man3/s3dw_handle_click.3
   trunk/Documentation/manpages/man3/s3dw_handle_key.3
   trunk/Documentation/manpages/man3/s3dw_input_change_text.3
   trunk/Documentation/manpages/man3/s3dw_input_gettext.3
   trunk/Documentation/manpages/man3/s3dw_input_new.3
   trunk/Documentation/manpages/man3/s3dw_label_change_text.3
   trunk/Documentation/manpages/man3/s3dw_label_new.3
   trunk/Documentation/manpages/man3/s3dw_moveit.3
   trunk/Documentation/manpages/man3/s3dw_object_info.3
   trunk/Documentation/manpages/man3/s3dw_show.3
   trunk/Documentation/manpages/man3/s3dw_surface_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3
   trunk/Documentation/manpages/man3/s3dw_textbox_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3
   trunk/Documentation/manpages/man9/mcp_object.9
   trunk/Documentation/manpages/man9/s3d_but_info.9
   trunk/Documentation/manpages/man9/s3d_evt.9
   trunk/Documentation/manpages/man9/s3d_key_event.9
   trunk/Documentation/manpages/man9/s3d_obj_info.9
   trunk/Documentation/manpages/man9/s3dw_button.9
   trunk/Documentation/manpages/man9/s3dw_input.9
   trunk/Documentation/manpages/man9/s3dw_label.9
   trunk/Documentation/manpages/man9/s3dw_scrollbar.9
   trunk/Documentation/manpages/man9/s3dw_style.9
   trunk/Documentation/manpages/man9/s3dw_surface.9
   trunk/Documentation/manpages/man9/s3dw_textbox.9
   trunk/Documentation/manpages/man9/s3dw_widget.9
Log:
Remove date and time from manpage comment

This should reduce the changed files when running build-manpages without
significant changed data sources.

Modified: trunk/Documentation/manpages/build-manpages.sh
===================================================================
--- trunk/Documentation/manpages/build-manpages.sh	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/build-manpages.sh	2008-09-01 19:08:08 UTC (rev 984)
@@ -4,6 +4,7 @@
 	for man in man${i}/*.sgml; do
 		if [ -e ${man}  ] ; then
 			docbook-to-man ${man} >${man%.sgml}.${i};
+			sed -i 's/^\(\.\\" created by instant \/ docbook-to-man\).*$/\1/' ${man%.sgml}.${i}
 		fi
 	done
 done

Modified: trunk/Documentation/manpages/man1/dot_mcp.1
===================================================================
--- trunk/Documentation/manpages/man1/dot_mcp.1	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man1/dot_mcp.1	2008-09-01 19:08:08 UTC (rev 984)
@@ -22,4 +22,4 @@
 \fBs3d\fR(1). 
 .PP 
 \fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man1/kism3d.1
===================================================================
--- trunk/Documentation/manpages/man1/kism3d.1	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man1/kism3d.1	2008-09-01 19:08:08 UTC (rev 984)
@@ -23,4 +23,4 @@
 \fBs3d\fR(1), \fBkismet\fR(1). 
 .PP 
 \fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man1/meshs3d.1
===================================================================
--- trunk/Documentation/manpages/man1/meshs3d.1	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man1/meshs3d.1	2008-09-01 19:08:08 UTC (rev 984)
@@ -29,4 +29,4 @@
 \fBs3d\fR(1), \fBolsrd\fR(8), \fBbatmand\fR (8). 
 .PP 
 \fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man1/s3d.1
===================================================================
--- trunk/Documentation/manpages/man1/s3d.1	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man1/s3d.1	2008-09-01 19:08:08 UTC (rev 984)
@@ -31,4 +31,4 @@
 This manual page was written by Timo Schneider timo.schneider at s2004.tu-chemnitz.de  
 for the \fBDebian\fP project (but may be used by others). 
  
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man1/s3d_x11gate.1
===================================================================
--- trunk/Documentation/manpages/man1/s3d_x11gate.1	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man1/s3d_x11gate.1	2008-09-01 19:08:08 UTC (rev 984)
@@ -24,4 +24,4 @@
 \fBs3d\fR(1). 
 .PP 
 \fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man1/s3dfm.1
===================================================================
--- trunk/Documentation/manpages/man1/s3dfm.1	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man1/s3dfm.1	2008-09-01 19:08:08 UTC (rev 984)
@@ -25,4 +25,4 @@
 \fBs3d\fR(1). 
 .PP 
 \fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man1/s3dosm.1
===================================================================
--- trunk/Documentation/manpages/man1/s3dosm.1	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man1/s3dosm.1	2008-09-01 19:08:08 UTC (rev 984)
@@ -42,4 +42,4 @@
 \fBs3d\fR(1). 
 .PP 
 \fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man1/s3dvt.1
===================================================================
--- trunk/Documentation/manpages/man1/s3dvt.1	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man1/s3dvt.1	2008-09-01 19:08:08 UTC (rev 984)
@@ -24,4 +24,4 @@
 \fBs3d\fR(1). 
 .PP 
 \fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_angle_to_cam.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_angle_to_cam.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_angle_to_cam.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_clear_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clear_callback.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_clear_callback.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Clears the callback which is associated with the event.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_clone.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_clone_target.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone_target.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_clone_target.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_del_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_del_object.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_del_object.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Deletes the object referenced by oid.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_delete_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event).          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_draw_string.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_draw_string.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_draw_string.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -23,4 +23,4 @@
 // not interested in the length? do that: s3d_draw_string(str, NULL); 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_find_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_flags_off.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 turn some flags off for object.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_flags_on.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -20,4 +20,4 @@
 If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content)  
  
 .RE 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_get_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_get_callback.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_get_callback.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -20,4 +20,4 @@
 // will call the key-handling function with argument e. 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_ignore_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_ignore_callback.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_ignore_callback.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_import_model_file.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_import_model_file.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_import_model_file.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -19,4 +19,4 @@
 Of course, you won't forget to toggle it visible, won't you?  
  
 .RE 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_init.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_init.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_init.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -27,4 +27,4 @@
 } 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_link.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_link.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_link.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will "keep on the table" if you move the table around in space. It will also rotate with the table etc.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_load_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_line_normals.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_load_line_normals.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -15,4 +15,4 @@
 .SH "Description" 
 .PP 
 Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_load_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -15,4 +15,4 @@
 .SH "Description" 
 .PP 
 Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -15,4 +15,4 @@
 .SH "Description" 
 .PP 
 Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -15,4 +15,4 @@
 .SH "Description" 
 .PP 
 Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_load_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -25,4 +25,4 @@
 Of course, you won't forget to toggle it visible, won't you?  
  
 .RE 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_mainloop.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -23,4 +23,4 @@
 s3d_mainloop(mainloop()); 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_mcp_focus.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mcp_focus.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_mcp_focus.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_net_check.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_new_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -19,4 +19,4 @@
 Of course, you won't forget to toggle it visible, won't you?  
  
 .RE 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_open_file.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_open_file.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_open_file.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_line.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -15,4 +15,4 @@
 .SH "Description" 
 .PP 
 Alter the latest pushed line, overwriting with the supplied values.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -16,4 +16,4 @@
 Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models. 
 .PP 
 nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in Total.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_lines.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_lines.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -21,4 +21,4 @@
 .SH "Description" 
 .PP 
 Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -24,4 +24,4 @@
 .SH "Description" 
 .PP 
 Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_material_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_texture.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_texture.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -16,4 +16,4 @@
 Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects. 
 .PP 
 nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -18,4 +18,4 @@
 .SH "Description" 
 .PP 
 Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_vertex.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_vertex.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -15,4 +15,4 @@
 .SH "Description" 
 .PP 
 Alter the latest pushed vertex, overwriting with the supplied values.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_vertices.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pep_vertices.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pop_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pop_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_line.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pop_line.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Deletes the latest n lines from the line stack of the object.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pop_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_material.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pop_material.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Deletes the latest n material from the material stack of the object.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pop_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_polygon.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pop_polygon.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Deletes the latest n polygon from the polygon stack of the object.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pop_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_texture.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pop_texture.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Deletes the latest n textures from the texture stack of the object.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pop_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_vertex.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_pop_vertex.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Deletes the latest n vertices from the vertex stack of the object.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_process_stack.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -16,4 +16,4 @@
 Deprecated 
 .PP 
 This is probably obsolete          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_event.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_event.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Pushes an event onto the event-stack. Usually you don't need to do this manually.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -15,4 +15,4 @@
 .SH "Description" 
 .PP 
 Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -21,4 +21,4 @@
 .SH "Description" 
 .PP 
 pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. the specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material_a.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_material_a.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -24,4 +24,4 @@
 .SH "Description" 
 .PP 
 Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -36,4 +36,4 @@
 s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -27,4 +27,4 @@
 // this will create a red polygon 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_polygons.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -26,4 +26,4 @@
 // push one polygon with the pbuf data 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Adds a new texture with height w and height h on the texturestack.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_textures.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_textures.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_textures.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -15,4 +15,4 @@
 .SH "Description" 
 .PP 
 pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -22,4 +22,4 @@
 s3d_push_vertices(object, vertices, 3); // pushing 3 vertices 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_quit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 closes the connection and cleares the event-stack. it can also be used to leave the s3d_mainloop().          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_rotate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -30,4 +30,4 @@
 // object will be rotated 180 degrees around the x-axis, not 270 degress! 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_scale.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_scale.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_scale.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -20,4 +20,4 @@
 s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative!  
  
 .RE 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_select_font.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_select_font.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_select_font.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -23,4 +23,4 @@
 s3d_select_font("vera"); // will use the vera font face 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_set_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -32,4 +32,4 @@
 // this will tell you when a object got clicked 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_strlen.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_strlen.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_strlen.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_translate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_translate.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_translate.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -28,4 +28,4 @@
 // object will end up at 4,0,0 and not 6,0,0!! 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_unlink.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_unlink.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_unlink.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Remove the link of object oid to its target.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_usage.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Prints the possible parameter for the client library (which can be passed in s3d_init())          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_vector_angle.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_angle.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_vector_angle.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_vector_cross_product.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_cross_product.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_vector_cross_product.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_vector_dot_product.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_dot_product.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_vector_dot_product.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_vector_length.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_length.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_vector_length.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_vector_subtract.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_subtract.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3d_vector_subtract.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_ani_mate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -27,4 +27,4 @@
 s3d_mainloop(mainloop); 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_button_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -17,4 +17,4 @@
 Creates a new button on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. 
 .PP 
 See s3dw_button for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_delete.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_delete.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_delete.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Deletes any widget. Should be casted with S3DWIDGET().          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_focus.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_focus.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_focus.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_getroot.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -23,4 +23,4 @@
 s3dw_moveit(root); 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_handle_click.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_handle_click.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_handle_click.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -30,4 +30,4 @@
 s3d_set_callback(S3D_EVENT_OBJ_CLICK,click); 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_handle_key.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_handle_key.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_handle_key.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -30,4 +30,4 @@
 s3d_set_callback(S3D_EVENT_KEY,key); 
 .fi 
 .PP 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_input_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_change_text.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_input_change_text.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Change the text in the referenced input-box to the specified text.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_input_gettext.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Returns the text which is currently entered in the referenced input-box.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_input_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -17,4 +17,4 @@
 Creates a new input-box on the surface with a input width of "width", the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with s3dw_input_change_text, and received with s3dw_input_gettext 
 .PP 
 See s3dw_input for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_label_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_change_text.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_label_change_text.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Change the text in the referenced label to the specified text.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_label_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -17,4 +17,4 @@
 Creates a new label on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. 
 .PP 
 See s3dw_label for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_moveit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_moveit.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_moveit.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_object_info.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_object_info.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_object_info.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_show.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_show.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_show.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Switches a widget visible. Should be casted with S3DWIDGET().          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_surface_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -16,4 +16,4 @@
 Creates a new surface (a new window) with title "title" and dimension "width" x "height". 
 .PP 
 See s3dw_surface for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -13,4 +13,4 @@
 .SH "Description" 
 .PP 
 Change the text in the referenced textbox to the specified text.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -19,4 +19,4 @@
 Creates a new textbox on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield. 
 .PP 
 See s3dw_textbox for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Scrolls the text in the textbox down by one line, if possible.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Scrolls the text in the textbox to the left by one character, if possible.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Scrolls the text in the textbox to the right by one character, if possible.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -14,4 +14,4 @@
 .SH "Description" 
 .PP 
 Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3	2008-09-01 19:08:08 UTC (rev 984)
@@ -12,4 +12,4 @@
 .SH "Description" 
 .PP 
 Scrolls the text in the textbox up by one line, if possible.          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/mcp_object.9
===================================================================
--- trunk/Documentation/manpages/man9/mcp_object.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/mcp_object.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -24,4 +24,4 @@
 Deprecated 
 .PP 
 don't use, to be removed soon (use struct s3d_but_info). ;)      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3d_but_info.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_but_info.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3d_but_info.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -18,4 +18,4 @@
 .SH "Description" 
 .PP 
 Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3d_evt.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_evt.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3d_evt.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -28,4 +28,4 @@
 is the pointer to the multiple purpose buffer, which will have more specific information about the object          
 .IP "next" 10 
 can be safely ignored ;)          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3d_key_event.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_key_event.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3d_key_event.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -18,4 +18,4 @@
 .fi 
 .PP 
 .SH "Description" 
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3d_obj_info.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_obj_info.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3d_obj_info.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -29,4 +29,4 @@
 Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp. 
 .PP 
 Special objects like camera, pointer will have the "sys_" prefix in the name and will be named "pointer0", "pointer1" ... or "cam0", "cam1" ... For cam object, scale will contain the aspect ratio.      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_button.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_button.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3dw_button.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -20,4 +20,4 @@
 .SH "Description" 
 .PP 
 The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_input.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_input.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3dw_input.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -21,4 +21,4 @@
 .SH "Description" 
 .PP 
 The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_label.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_label.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3dw_label.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -19,4 +19,4 @@
 .SH "Description" 
 .PP 
 The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_scrollbar.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_scrollbar.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3dw_scrollbar.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -25,4 +25,4 @@
 .SH "Description" 
 .PP 
 The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_style.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_style.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3dw_style.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -40,4 +40,4 @@
 material for the title bar          
 .IP "title_text_mat" 10 
 material for the text on the title bar          
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_surface.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_surface.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3dw_surface.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -20,4 +20,4 @@
 .SH "Description" 
 .PP 
 A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_textbox.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_textbox.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3dw_textbox.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -25,4 +25,4 @@
 .SH "Description" 
 .PP 
 A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_widget.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_widget.9	2008-09-01 18:53:03 UTC (rev 983)
+++ trunk/Documentation/manpages/man9/s3dw_widget.9	2008-09-01 19:08:08 UTC (rev 984)
@@ -43,4 +43,4 @@
 This is the most basic widget type, it contains all the "general" widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets "general" information. For typecast, you may use S3DWIDGET(). 
 .PP 
 The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.      
-.\" created by instant / docbook-to-man, Mon 01 Sep 2008, 20:31 
+.\" created by instant / docbook-to-man



From lazhur at mail.berlios.de  Wed Sep  3 17:45:45 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Wed, 3 Sep 2008 17:45:45 +0200
Subject: [S3d-svn] r985 - trunk/Documentation
Message-ID: <200809031545.m83FjjJR031334@sheep.berlios.de>

Author: lazhur
Date: 2008-09-03 17:45:44 +0200 (Wed, 03 Sep 2008)
New Revision: 985

Modified:
   trunk/Documentation/extractdefinitions.py
Log:
Simplify calls to create_append(_text)

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-01 19:08:08 UTC (rev 984)
+++ trunk/Documentation/extractdefinitions.py	2008-09-03 15:45:44 UTC (rev 985)
@@ -141,16 +141,26 @@
 """
 Create new node with tag name node_type and add it to father
 """
-def create_append(document, father, node_type):
-	t = document.createElement(node_type)
+def create_append(father, node_type):
+	if father.ownerDocument:
+		t = father.ownerDocument.createElement(node_type)
+	else:
+		# no father -> so it must be a document
+		t = father.createElement(node_type)
+
 	father.appendChild(t)
 	return t
 
 """
 Create new text node with text and add it to father
 """
-def create_append_text(document, father, text):
-	t = document.createTextNode(text)
+def create_append_text(father, text):
+	if father.ownerDocument:
+		t = father.ownerDocument.createTextNode(text)
+	else:
+		# no father -> so it must be a document
+		t = father.createTextNode(text)
+		
 	father.appendChild(t)
 	return t
 
@@ -162,14 +172,14 @@
 		if p['text'] != '':
 			if p['type'] in ['warning']:
 				# add para in warning before adding help text
-				extra_para = create_append(sgml, sect, p['type'])
-				para = create_append(sgml, extra_para, 'para')
-				create_append_text(sgml, para, p['text'])
+				extra_para = create_append(sect, p['type'])
+				para = create_append(extra_para, 'para')
+				create_append_text(para, p['text'])
 			else:
 				if p['text'].strip() == '':
 					continue
-				para = create_append(sgml, sect, p['type'])
-				create_append_text(sgml, para, p['text'])
+				para = create_append(sect, p['type'])
+				create_append_text(para, p['text'])
 
 """
 Extract function informations from doxygen dom
@@ -291,42 +301,42 @@
 	"""
 	def generate_sgml(function, synopsis):
 		sgml = xml.dom.minidom.Document()
-		sect2 = create_append(sgml, sgml, 'sect2')
+		sect2 = create_append(sgml, 'sect2')
 		sect2.setAttribute('id', function['name'])
 
-		title = create_append(sgml, sect2, 'title')
-		create_append_text(sgml, title, function['name'])
+		title = create_append(sect2, 'title')
+		create_append_text(title, function['name'])
 
 		# synopsis
-		funcsynopsis = create_append(sgml, sect2, 'funcsynopsis')
-		funcsynopsisinfo = create_append(sgml, funcsynopsis, 'funcsynopsisinfo')
-		create_append_text(sgml, funcsynopsisinfo, "#include <"+synopsis+">")
+		funcsynopsis = create_append(sect2, 'funcsynopsis')
+		funcsynopsisinfo = create_append(funcsynopsis, 'funcsynopsisinfo')
+		create_append_text(funcsynopsisinfo, "#include <"+synopsis+">")
 
 		# prototype
-		funcprototype = create_append(sgml, funcsynopsis, 'funcprototype')
+		funcprototype = create_append(funcsynopsis, 'funcprototype')
 
-		funcdef = create_append(sgml, funcprototype, 'funcdef')
-		create_append_text(sgml, funcdef, function['return']+" ")
+		funcdef = create_append(funcprototype, 'funcdef')
+		create_append_text(funcdef, function['return']+" ")
 
-		func = create_append(sgml, funcdef, 'function')
-		create_append_text(sgml, func, function['name'])
+		func = create_append(funcdef, 'function')
+		create_append_text(func, function['name'])
 
 		# add parameter to function definition
 		param_num = len(function['param'])
 		for i in range(0, param_num):
-			paramdef = create_append(sgml, funcprototype, 'paramdef')
+			paramdef = create_append(funcprototype, 'paramdef')
 
-			create_append_text(sgml, paramdef, function['param'][i]['type'])
+			create_append_text(paramdef, function['param'][i]['type'])
 
 			if function['param'][i]['declname'] != '':
 				if function['param'][i]['type'][-1:] != "*":
 					# dont add space between * and name
-					create_append_text(sgml, paramdef, " ")
-				parameter = create_append(sgml, paramdef, 'parameter')
-				create_append_text(sgml, parameter, function['param'][i]['declname'])
+					create_append_text(paramdef, " ")
+				parameter = create_append(paramdef, 'parameter')
+				create_append_text(parameter, function['param'][i]['declname'])
 
 			if function['param'][i]['array'] != '':
-				create_append_text(sgml, paramdef, function['param'][i]['array'])
+				create_append_text(paramdef, function['param'][i]['array'])
 
 		# add help to function
 		help_append(sgml, sect2, function['help'])
@@ -353,37 +363,37 @@
 	"""
 	def generate_sgml(struct):
 		sgml = xml.dom.minidom.Document()
-		sect2 = create_append(sgml, sgml, 'sect2')
+		sect2 = create_append(sgml, 'sect2')
 		sect2.setAttribute('id', 'struct'+struct['name'])
 
-		title = create_append(sgml, sect2, 'title')
-		create_append_text(sgml, title, 'struct '+struct['name'])
+		title = create_append(sect2, 'title')
+		create_append_text(title, 'struct '+struct['name'])
 
 		# add definition of struct
-		programlisting = create_append(sgml, sect2, 'programlisting')
-		create_append_text(sgml, programlisting, 'struct '+struct['name']+' {\n')
+		programlisting = create_append(sect2, 'programlisting')
+		create_append_text(programlisting, 'struct '+struct['name']+' {\n')
 		for element in struct['elements']:
-			create_append_text(sgml, programlisting, '\t'+element['type'])
+			create_append_text(programlisting, '\t'+element['type'])
 			if element['type'][-1:] != "*":
 				# dont add space between * and name
-				create_append_text(sgml, programlisting, " ")
-			create_append_text(sgml, programlisting, element['name']+';\n')
-		create_append_text(sgml, programlisting, '}')
+				create_append_text(programlisting, " ")
+			create_append_text(programlisting, element['name']+';\n')
+		create_append_text(programlisting, '}')
 
 		# add help to struct
 		help_append(sgml, sect2, struct['help'])
 
 		# add list of struct members with their help
-		variablelist = create_append(sgml, sect2, 'variablelist')
+		variablelist = create_append(sect2, 'variablelist')
 		for element in struct['elements']:
 			# ignore members with empty help texts
 			if len(element['help']) == 1 and element['help'][0]['text'].strip() == '':
 				continue
 
-			varlistentry = create_append(sgml, variablelist, 'varlistentry')
-			term = create_append(sgml, varlistentry, 'term')
-			create_append_text(sgml, term, element['name'])
-			listitem = create_append(sgml, varlistentry, 'listitem')
+			varlistentry = create_append(variablelist, 'varlistentry')
+			term = create_append(varlistentry, 'term')
+			create_append_text(term, element['name'])
+			listitem = create_append(varlistentry, 'listitem')
 
 			# add help to struct member
 			help_append(sgml, listitem, element['help'])
@@ -414,15 +424,15 @@
 	"""
 	def generate_sgml(typedef):
 		sgml = xml.dom.minidom.Document()
-		sect2 = create_append(sgml, sgml, 'sect2')
+		sect2 = create_append(sgml, 'sect2')
 		sect2.setAttribute('id', typedef['name'])
 
-		title = create_append(sgml, sect2, 'title')
-		create_append_text(sgml, title, 'typedef '+typedef['name'])
+		title = create_append(sect2, 'title')
+		create_append_text(title, 'typedef '+typedef['name'])
 
 		# add definition of typedef
-		programlisting = create_append(sgml, sect2, 'programlisting')
-		create_append_text(sgml, programlisting, typedef['definition'])
+		programlisting = create_append(sect2, 'programlisting')
+		create_append_text(programlisting, typedef['definition'])
 
 		# add help to typedef
 		help_append(sgml, sect2, typedef['help'])
@@ -451,60 +461,60 @@
 	def generate_sgml(function, synopsis):
 		sgml = xml.dom.minidom.Document()
 
-		refentry = create_append(sgml, sgml, 'refentry')
+		refentry = create_append(sgml, 'refentry')
 		refentry.setAttribute('id', cleanup_stringbegin(function['name']))
 
-		refmeta = create_append(sgml, refentry, 'refmeta')
+		refmeta = create_append(refentry, 'refmeta')
 
-		refentrytitle = create_append(sgml, refmeta, 'refentrytitle')
-		create_append_text(sgml, refentrytitle, function['name'])
+		refentrytitle = create_append(refmeta, 'refentrytitle')
+		create_append_text(refentrytitle, function['name'])
 
-		manvolnum = create_append(sgml, refmeta, 'manvolnum')
-		create_append_text(sgml, manvolnum, '3')
+		manvolnum = create_append(refmeta, 'manvolnum')
+		create_append_text(manvolnum, '3')
 
-		refnamediv = create_append(sgml, refentry, 'refnamediv')
+		refnamediv = create_append(refentry, 'refnamediv')
 
-		refname = create_append(sgml, refnamediv, 'refname')
-		create_append_text(sgml, refname, function['name'])
-		refpurpose = create_append(sgml, refnamediv, 'refpurpose')
-		create_append_text(sgml, refpurpose, "")
+		refname = create_append(refnamediv, 'refname')
+		create_append_text(refname, function['name'])
+		refpurpose = create_append(refnamediv, 'refpurpose')
+		create_append_text(refpurpose, "")
 
 		# synopsis
-		refsynopsisdiv = create_append(sgml, refentry, 'refsynopsisdiv')
-		funcsynopsis = create_append(sgml, refsynopsisdiv, 'funcsynopsis')
-		funcsynopsisinfo = create_append(sgml, funcsynopsis, 'funcsynopsisinfo')
-		create_append_text(sgml, funcsynopsisinfo, "#include <"+synopsis+">")
+		refsynopsisdiv = create_append(refentry, 'refsynopsisdiv')
+		funcsynopsis = create_append(refsynopsisdiv, 'funcsynopsis')
+		funcsynopsisinfo = create_append(funcsynopsis, 'funcsynopsisinfo')
+		create_append_text(funcsynopsisinfo, "#include <"+synopsis+">")
 
 		# prototype
-		funcprototype = create_append(sgml, funcsynopsis, 'funcprototype')
+		funcprototype = create_append(funcsynopsis, 'funcprototype')
 
-		funcdef = create_append(sgml, funcprototype, 'funcdef')
-		create_append_text(sgml, funcdef, function['return']+" ")
+		funcdef = create_append(funcprototype, 'funcdef')
+		create_append_text(funcdef, function['return']+" ")
 
-		func = create_append(sgml, funcdef, 'function')
-		create_append_text(sgml, func, function['name'])
+		func = create_append(funcdef, 'function')
+		create_append_text(func, function['name'])
 
 		# add parameter to function definition
 		
 		param_num = len(function['param'])
 		for i in range(0, param_num):
-			paramdef = create_append(sgml, funcprototype, 'paramdef')
-			create_append_text(sgml, paramdef, "\t"+function['param'][i]['type'])
+			paramdef = create_append(funcprototype, 'paramdef')
+			create_append_text(paramdef, "\t"+function['param'][i]['type'])
 
 			if function['param'][i]['declname'] != '':
 				if function['param'][i]['type'][-1:] != "*":
 					# dont add space between * and name
-					create_append_text(sgml, paramdef, " ")
-				parameter = create_append(sgml, paramdef, 'parameter')
-				create_append_text(sgml, parameter, function['param'][i]['declname'])
+					create_append_text(paramdef, " ")
+				parameter = create_append(paramdef, 'parameter')
+				create_append_text(parameter, function['param'][i]['declname'])
 
 			if function['param'][i]['array'] != '':
-				create_append_text(sgml, paramdef, function['param'][i]['array'])
+				create_append_text(paramdef, function['param'][i]['array'])
 
 		# add help to function
-		refsect1 = create_append(sgml, refentry, 'refsect1')
-		title = create_append(sgml, refsect1, 'title')
-		create_append_text(sgml, title, "Description")
+		refsect1 = create_append(refentry, 'refsect1')
+		title = create_append(refsect1, 'title')
+		create_append_text(title, "Description")
 		help_append(sgml, refsect1, function['help'])
 
 		return refentry
@@ -531,62 +541,62 @@
 	def generate_sgml(struct, synopsis):
 		sgml = xml.dom.minidom.Document()
 
-		refentry = create_append(sgml, sgml, 'refentry')
+		refentry = create_append(sgml, 'refentry')
 		refentry.setAttribute('id', cleanup_stringbegin(struct['name']))
 
-		refmeta = create_append(sgml, refentry, 'refmeta')
+		refmeta = create_append(refentry, 'refmeta')
 
-		refentrytitle = create_append(sgml, refmeta, 'refentrytitle')
-		create_append_text(sgml, refentrytitle, struct['name'])
+		refentrytitle = create_append(refmeta, 'refentrytitle')
+		create_append_text(refentrytitle, struct['name'])
 
-		manvolnum = create_append(sgml, refmeta, 'manvolnum')
-		create_append_text(sgml, manvolnum, '9')
+		manvolnum = create_append(refmeta, 'manvolnum')
+		create_append_text(manvolnum, '9')
 
-		refnamediv = create_append(sgml, refentry, 'refnamediv')
+		refnamediv = create_append(refentry, 'refnamediv')
 
-		refname = create_append(sgml, refnamediv, 'refname')
-		create_append_text(sgml, refname, 'struct ' + struct['name'])
-		refpurpose = create_append(sgml, refnamediv, 'refpurpose')
-		create_append_text(sgml, refpurpose, "")
+		refname = create_append(refnamediv, 'refname')
+		create_append_text(refname, 'struct ' + struct['name'])
+		refpurpose = create_append(refnamediv, 'refpurpose')
+		create_append_text(refpurpose, "")
 
 		# synopsis
-		refsynopsisdiv = create_append(sgml, refentry, 'refsynopsisdiv')
-		funcsynopsis = create_append(sgml, refsynopsisdiv, 'funcsynopsis')
-		funcsynopsisinfo = create_append(sgml, funcsynopsis, 'funcsynopsisinfo')
-		create_append_text(sgml, funcsynopsisinfo, "#include <"+synopsis+">")
+		refsynopsisdiv = create_append(refentry, 'refsynopsisdiv')
+		funcsynopsis = create_append(refsynopsisdiv, 'funcsynopsis')
+		funcsynopsisinfo = create_append(funcsynopsis, 'funcsynopsisinfo')
+		create_append_text(funcsynopsisinfo, "#include <"+synopsis+">")
 
 		# add definition of struct
-		refsect1 = create_append(sgml, refentry, 'refsect1')
-		title = create_append(sgml, refsect1, 'title')
-		create_append_text(sgml, title, "Structure Members")
+		refsect1 = create_append(refentry, 'refsect1')
+		title = create_append(refsect1, 'title')
+		create_append_text(title, "Structure Members")
 		
-		programlisting = create_append(sgml, refsect1, 'programlisting')
-		create_append_text(sgml, programlisting, 'struct '+struct['name']+' {\n')
+		programlisting = create_append(refsect1, 'programlisting')
+		create_append_text(programlisting, 'struct '+struct['name']+' {\n')
 		for element in struct['elements']:
-			create_append_text(sgml, programlisting, '\t'+element['type'])
+			create_append_text(programlisting, '\t'+element['type'])
 			if element['type'][-1:] != "*":
 				# dont add space between * and name
-				create_append_text(sgml, programlisting, " ")
-			create_append_text(sgml, programlisting, element['name']+';\n')
-		create_append_text(sgml, programlisting, '}')
+				create_append_text(programlisting, " ")
+			create_append_text(programlisting, element['name']+';\n')
+		create_append_text(programlisting, '}')
 
 		# add help to struct
-		refsect1 = create_append(sgml, refentry, 'refsect1')
-		title = create_append(sgml, refsect1, 'title')
-		create_append_text(sgml, title, "Description")
+		refsect1 = create_append(refentry, 'refsect1')
+		title = create_append(refsect1, 'title')
+		create_append_text(title, "Description")
 		help_append(sgml, refsect1, struct['help'])
 
 		# add list of struct members with their help
-		variablelist = create_append(sgml, refsect1, 'variablelist')
+		variablelist = create_append(refsect1, 'variablelist')
 		for element in struct['elements']:
 			# ignore members with empty help texts
 			if len(element['help']) == 1 and element['help'][0]['text'].strip() == '':
 				continue
 
-			varlistentry = create_append(sgml, variablelist, 'varlistentry')
-			term = create_append(sgml, varlistentry, 'term')
-			create_append_text(sgml, term, element['name'])
-			listitem = create_append(sgml, varlistentry, 'listitem')
+			varlistentry = create_append(variablelist, 'varlistentry')
+			term = create_append(varlistentry, 'term')
+			create_append_text(term, element['name'])
+			listitem = create_append(varlistentry, 'listitem')
 
 			# add help to struct member
 			help_append(sgml, listitem, element['help'])



From lazhur at mail.berlios.de  Wed Sep  3 17:45:50 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Wed, 3 Sep 2008 17:45:50 +0200
Subject: [S3d-svn] r986 - trunk/Documentation
Message-ID: <200809031545.m83FjosQ031359@sheep.berlios.de>

Author: lazhur
Date: 2008-09-03 17:45:50 +0200 (Wed, 03 Sep 2008)
New Revision: 986

Modified:
   trunk/Documentation/extractdefinitions.py
Log:
Save detaileddescriptions in a specialized class

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-03 15:45:44 UTC (rev 985)
+++ trunk/Documentation/extractdefinitions.py	2008-09-03 15:45:50 UTC (rev 986)
@@ -77,61 +77,87 @@
 	return t
 
 
-"""
-Generate linear list of text and section types
-"""
-def get_text_complex(node):
+class detaileddescription:
 	t = []
-	for node in node.childNodes:
-		if node.nodeType == Node.TEXT_NODE:
-			t.append(node.data)
-		else:
-			if node.nodeName == 'sp':
-				t.append(" ")
-			elif node.nodeName == 'para':
-				t.append({'type': 'para', 'text': ''})
-				t += get_text_complex(node)
-			elif node.nodeName == 'programlisting':
-				t.append({'type': 'programlisting', 'text': ''})
-				t += get_text_complex(node)
-				t.append({'type': 'para', 'text': ''})
-			elif node.nodeName == 'simplesect':
-				if node.attributes['kind'].nodeValue == 'remark':
-					t.append({'type': 'warning', 'text': ''})
-					t += get_text_complex(node)
-					t.append({'type': 'para', 'text': ''})
+
+	def __init__(self, node):
+		self.t = []
+		self.__get_text_complex(node)
+		self.__complex2simplearray()
+
+	"""
+	Generate linear list of text and section types
+	"""
+	def __get_text_complex(self, node):
+		for node in node.childNodes:
+			if node.nodeType == Node.TEXT_NODE:
+				self.t.append(node.data)
+			else:
+				if node.nodeName == 'sp':
+					self.t.append(" ")
+				elif node.nodeName == 'para':
+					self.t.append({'type': 'para', 'text': ''})
+					self.__get_text_complex(node)
+				elif node.nodeName == 'programlisting':
+					self.t.append({'type': 'programlisting', 'text': ''})
+					self.__get_text_complex(node)
+					self.t.append({'type': 'para', 'text': ''})
+				elif node.nodeName == 'simplesect':
+					if node.attributes['kind'].nodeValue == 'remark':
+						self.t.append({'type': 'warning', 'text': ''})
+						self.__get_text_complex(node)
+						self.t.append({'type': 'para', 'text': ''})
+					else:
+						self.t.append({'type': 'para', 'text': ''})
+						self.__get_text_complex(node)
 				else:
-					t.append({'type': 'para', 'text': ''})
-					t += get_text_complex(node)
-			else:
-				t += get_text_complex(node)
-	return t
+					self.__get_text_complex(node)
 
-"""
-Convert linear list of text and section types to list of section types with corresponding text
-"""
-def complex2simplearray(objects):
-	cur_object = 0
-	array = []
-	for element in objects:
-		if type(element) != dict:
-			# add text to last section type
-			if cur_object == 0:
-				array.append({'type': 'para', 'text': element})
-				cur_object = array[0]
+	"""
+	Convert linear list of text and section types to list of section types with corresponding text
+	"""
+	def __complex2simplearray(self):
+		cur_object = 0
+		array = []
+		for element in self.t:
+			if type(element) != dict:
+				# add text to last section type
+				if cur_object == 0:
+					array.append({'type': 'para', 'text': element})
+					cur_object = array[0]
+				else:
+					cur_object['text'] += element
 			else:
-				cur_object['text'] += element
-		else:
-			# add new section type
-			if element['type'] == 'para' and len(array) != 0 and array[-1]['type'] in ['warning']:
-				# ignore para inside warning and add text to last section type
-				cur_object['text'] += element['text']
-			else:
-				cur_object = element
-				array.append(element)
+				# add new section type
+				if element['type'] == 'para' and len(array) != 0 and array[-1]['type'] in ['warning']:
+					# ignore para inside warning and add text to last section type
+					cur_object['text'] += element['text']
+				else:
+					cur_object = element
+					array.append(element)
 
-	return array
+		self.t = array
 
+	"""
+	Append complex help section to dom
+	"""
+	def dom_append(self, sect):
+		for p in self.t:
+			if p['text'] != '':
+				if p['type'] in ['warning']:
+					# add para in warning before adding help text
+					extra_para = create_append(sect, p['type'])
+					para = create_append(extra_para, 'para')
+					create_append_text(para, p['text'])
+				else:
+					if p['text'].strip() == '':
+						continue
+					para = create_append(sect, p['type'])
+					create_append_text(para, p['text'])
+
+	def isempty(self):
+		return (len(self.t) == 0) or (len(self.t) == 1 and self.t[0]['text'].strip() == '')
+
 def remove_exportdefinitions(function_return):
 	exports = ["S3DEXPORT", "S3DWEXPORT"]
 	for export in exports:
@@ -165,23 +191,6 @@
 	return t
 
 """
-Append complex help section to sect
-"""
-def help_append(sgml, sect, help):
-	for p in help:
-		if p['text'] != '':
-			if p['type'] in ['warning']:
-				# add para in warning before adding help text
-				extra_para = create_append(sect, p['type'])
-				para = create_append(extra_para, 'para')
-				create_append_text(para, p['text'])
-			else:
-				if p['text'].strip() == '':
-					continue
-				para = create_append(sect, p['type'])
-				create_append_text(para, p['text'])
-
-"""
 Extract function informations from doxygen dom
 """
 def extract_functions(dom):
@@ -214,8 +223,7 @@
 				function['param'].append(param)
 
 			if node2.nodeName == 'detaileddescription':
-				help = get_text_complex(node2)
-				function['help'] = complex2simplearray(help)
+				function['help'] = detaileddescription(node2)
 
 		functionlist.append(function)
 
@@ -239,8 +247,7 @@
 
 		for node in dom.getElementsByTagName('compounddef')[0].childNodes:
 			if node.nodeName == 'detaileddescription':
-				help = get_text_complex(node)
-				struct['help'] = complex2simplearray(help)
+				struct['help'] = detaileddescription(node)
 
 		for node in dom.getElementsByTagName("memberdef"):
 			element = {'type': '', 'name' : '', 'help': []}
@@ -252,8 +259,7 @@
 					element['type'] = get_text(node2)
 
 				if node2.nodeName == 'detaileddescription':
-					help = get_text_complex(node2)
-					element['help'] = complex2simplearray(help)
+					element['help'] = detaileddescription(node2)
 
 			struct['elements'].append(element)
 
@@ -278,8 +284,7 @@
 				typedef['definition'] = get_text(node2)
 
 			if node2.nodeName == 'detaileddescription':
-				help = get_text_complex(node2)
-				typedef['help'] = complex2simplearray(help)
+				typedef['help'] = detaileddescription(node2)
 
 		typedeflist.append(typedef)
 
@@ -339,7 +344,7 @@
 				create_append_text(paramdef, function['param'][i]['array'])
 
 		# add help to function
-		help_append(sgml, sect2, function['help'])
+		function['help'].dom_append(sect2)
 
 		return sect2
 
@@ -381,13 +386,13 @@
 		create_append_text(programlisting, '}')
 
 		# add help to struct
-		help_append(sgml, sect2, struct['help'])
+		struct['help'].dom_append(sect2)
 
 		# add list of struct members with their help
 		variablelist = create_append(sect2, 'variablelist')
 		for element in struct['elements']:
 			# ignore members with empty help texts
-			if len(element['help']) == 1 and element['help'][0]['text'].strip() == '':
+			if element['help'].isempty():
 				continue
 
 			varlistentry = create_append(variablelist, 'varlistentry')
@@ -396,7 +401,7 @@
 			listitem = create_append(varlistentry, 'listitem')
 
 			# add help to struct member
-			help_append(sgml, listitem, element['help'])
+			element['help'].dom_append(listitem)
 
 		# remove empty variablelist
 		if len(variablelist.childNodes) == 0:
@@ -435,7 +440,7 @@
 		create_append_text(programlisting, typedef['definition'])
 
 		# add help to typedef
-		help_append(sgml, sect2, typedef['help'])
+		typedef['help'].dom_append(sect2)
 
 		return sect2
 
@@ -515,7 +520,7 @@
 		refsect1 = create_append(refentry, 'refsect1')
 		title = create_append(refsect1, 'title')
 		create_append_text(title, "Description")
-		help_append(sgml, refsect1, function['help'])
+		function['help'].dom_append(refsect1)
 
 		return refentry
 
@@ -584,13 +589,13 @@
 		refsect1 = create_append(refentry, 'refsect1')
 		title = create_append(refsect1, 'title')
 		create_append_text(title, "Description")
-		help_append(sgml, refsect1, struct['help'])
+		struct['help'].dom_append(refsect1)
 
 		# add list of struct members with their help
 		variablelist = create_append(refsect1, 'variablelist')
 		for element in struct['elements']:
 			# ignore members with empty help texts
-			if len(element['help']) == 1 and element['help'][0]['text'].strip() == '':
+			if element['help'].isempty():
 				continue
 
 			varlistentry = create_append(variablelist, 'varlistentry')
@@ -599,7 +604,7 @@
 			listitem = create_append(varlistentry, 'listitem')
 
 			# add help to struct member
-			help_append(sgml, listitem, element['help'])
+			element['help'].dom_append(listitem)
 
 		# remove empty variablelist
 		if len(variablelist.childNodes) == 0:



From lazhur at mail.berlios.de  Wed Sep  3 17:45:55 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Wed, 3 Sep 2008 17:45:55 +0200
Subject: [S3d-svn] r987 - trunk/Documentation
Message-ID: <200809031545.m83FjtN7031384@sheep.berlios.de>

Author: lazhur
Date: 2008-09-03 17:45:55 +0200 (Wed, 03 Sep 2008)
New Revision: 987

Modified:
   trunk/Documentation/extractdefinitions.py
Log:
Save function parameters in a specialized class

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-03 15:45:50 UTC (rev 986)
+++ trunk/Documentation/extractdefinitions.py	2008-09-03 15:45:55 UTC (rev 987)
@@ -158,6 +158,34 @@
 	def isempty(self):
 		return (len(self.t) == 0) or (len(self.t) == 1 and self.t[0]['text'].strip() == '')
 
+class function_param:
+	def __init__(self, node):
+		self.param = {'type' : '', 'declname' : '', 'array' : ''}
+		for n in node.childNodes:
+			if n.nodeName == 'type':
+				self.param['type'] = get_text(n)
+
+			if n.nodeName == 'declname':
+				self.param['declname'] = get_text(n)
+
+			if n.nodeName == 'array':
+				self.param['array'] = get_text(n)
+
+	def dom_append(self, funcprototype, intent = ""):
+		paramdef = create_append(funcprototype, 'paramdef')
+
+		create_append_text(paramdef, intent+self.param['type'])
+
+		if self.param['declname'] != '':
+			if self.param['type'][-1:] != "*":
+				# dont add space between * and name
+				create_append_text(paramdef, " ")
+			parameter = create_append(paramdef, 'parameter')
+			create_append_text(parameter, self.param['declname'])
+
+		if self.param['array'] != '':
+			create_append_text(paramdef, self.param['array'])
+
 def remove_exportdefinitions(function_return):
 	exports = ["S3DEXPORT", "S3DWEXPORT"]
 	for export in exports:
@@ -209,19 +237,8 @@
 				function['return'] = remove_exportdefinitions(get_text(node2))
 
 			if node2.nodeName == "param":
-				param = {'type' : '', 'declname' : '', 'array' : ''}
-				for n in node2.childNodes:
-					if n.nodeName == 'type':
-						param['type'] = get_text(n)
+				function['param'].append(function_param(node2))
 
-					if n.nodeName == 'declname':
-						param['declname'] = get_text(n)
-
-					if n.nodeName == 'array':
-						param['array'] = get_text(n)
-
-				function['param'].append(param)
-
 			if node2.nodeName == 'detaileddescription':
 				function['help'] = detaileddescription(node2)
 
@@ -329,20 +346,8 @@
 		# add parameter to function definition
 		param_num = len(function['param'])
 		for i in range(0, param_num):
-			paramdef = create_append(funcprototype, 'paramdef')
+			function['param'][i].dom_append(funcprototype)
 
-			create_append_text(paramdef, function['param'][i]['type'])
-
-			if function['param'][i]['declname'] != '':
-				if function['param'][i]['type'][-1:] != "*":
-					# dont add space between * and name
-					create_append_text(paramdef, " ")
-				parameter = create_append(paramdef, 'parameter')
-				create_append_text(parameter, function['param'][i]['declname'])
-
-			if function['param'][i]['array'] != '':
-				create_append_text(paramdef, function['param'][i]['array'])
-
 		# add help to function
 		function['help'].dom_append(sect2)
 
@@ -503,19 +508,8 @@
 		
 		param_num = len(function['param'])
 		for i in range(0, param_num):
-			paramdef = create_append(funcprototype, 'paramdef')
-			create_append_text(paramdef, "\t"+function['param'][i]['type'])
+			function['param'][i].dom_append(funcprototype, "\t")
 
-			if function['param'][i]['declname'] != '':
-				if function['param'][i]['type'][-1:] != "*":
-					# dont add space between * and name
-					create_append_text(paramdef, " ")
-				parameter = create_append(paramdef, 'parameter')
-				create_append_text(parameter, function['param'][i]['declname'])
-
-			if function['param'][i]['array'] != '':
-				create_append_text(paramdef, function['param'][i]['array'])
-
 		# add help to function
 		refsect1 = create_append(refentry, 'refsect1')
 		title = create_append(refsect1, 'title')



From lazhur at mail.berlios.de  Wed Sep  3 17:46:02 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Wed, 3 Sep 2008 17:46:02 +0200
Subject: [S3d-svn] r988 - trunk/Documentation
Message-ID: <200809031546.m83Fk2dE031417@sheep.berlios.de>

Author: lazhur
Date: 2008-09-03 17:46:02 +0200 (Wed, 03 Sep 2008)
New Revision: 988

Modified:
   trunk/Documentation/extractdefinitions.py
Log:
Save struct elements in a specialized class

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-03 15:45:55 UTC (rev 987)
+++ trunk/Documentation/extractdefinitions.py	2008-09-03 15:46:02 UTC (rev 988)
@@ -186,6 +186,39 @@
 		if self.param['array'] != '':
 			create_append_text(paramdef, self.param['array'])
 
+class struct_element:
+	def __init__(self, node):
+		self.element = {'type': '', 'name' : '', 'help': []}
+		for node2 in node.childNodes:
+			if node2.nodeName == "name":
+				self.element['name'] = get_text(node2)
+
+			if node2.nodeName == "type":
+				self.element['type'] = get_text(node2)
+
+			if node2.nodeName == 'detaileddescription':
+				self.element['help'] = detaileddescription(node2)
+
+	def dom_append(self, programlisting):
+		create_append_text(programlisting, '\t'+self.element['type'])
+		if self.element['type'][-1:] != "*":
+			# dont add space between * and name
+			create_append_text(programlisting, " ")
+		create_append_text(programlisting, self.element['name']+';\n')
+
+	def dom_append_help(self, variablelist):
+		# ignore members with empty help texts
+		if self.element['help'].isempty():
+			return
+
+		varlistentry = create_append(variablelist, 'varlistentry')
+		term = create_append(varlistentry, 'term')
+		create_append_text(term, self.element['name'])
+		listitem = create_append(varlistentry, 'listitem')
+
+		# add help to struct member
+		self.element['help'].dom_append(listitem)
+
 def remove_exportdefinitions(function_return):
 	exports = ["S3DEXPORT", "S3DWEXPORT"]
 	for export in exports:
@@ -267,19 +300,8 @@
 				struct['help'] = detaileddescription(node)
 
 		for node in dom.getElementsByTagName("memberdef"):
-			element = {'type': '', 'name' : '', 'help': []}
-			for node2 in node.childNodes:
-				if node2.nodeName == "name":
-					element['name'] = get_text(node2)
+			struct['elements'].append(struct_element(node))
 
-				if node2.nodeName == "type":
-					element['type'] = get_text(node2)
-
-				if node2.nodeName == 'detaileddescription':
-					element['help'] = detaileddescription(node2)
-
-			struct['elements'].append(element)
-
 	return structlist
 
 """
@@ -383,11 +405,7 @@
 		programlisting = create_append(sect2, 'programlisting')
 		create_append_text(programlisting, 'struct '+struct['name']+' {\n')
 		for element in struct['elements']:
-			create_append_text(programlisting, '\t'+element['type'])
-			if element['type'][-1:] != "*":
-				# dont add space between * and name
-				create_append_text(programlisting, " ")
-			create_append_text(programlisting, element['name']+';\n')
+			element.dom_append(programlisting)
 		create_append_text(programlisting, '}')
 
 		# add help to struct
@@ -396,18 +414,8 @@
 		# add list of struct members with their help
 		variablelist = create_append(sect2, 'variablelist')
 		for element in struct['elements']:
-			# ignore members with empty help texts
-			if element['help'].isempty():
-				continue
+			element.dom_append_help(variablelist)
 
-			varlistentry = create_append(variablelist, 'varlistentry')
-			term = create_append(varlistentry, 'term')
-			create_append_text(term, element['name'])
-			listitem = create_append(varlistentry, 'listitem')
-
-			# add help to struct member
-			element['help'].dom_append(listitem)
-
 		# remove empty variablelist
 		if len(variablelist.childNodes) == 0:
 			sect2.removeChild(variablelist)
@@ -572,11 +580,7 @@
 		programlisting = create_append(refsect1, 'programlisting')
 		create_append_text(programlisting, 'struct '+struct['name']+' {\n')
 		for element in struct['elements']:
-			create_append_text(programlisting, '\t'+element['type'])
-			if element['type'][-1:] != "*":
-				# dont add space between * and name
-				create_append_text(programlisting, " ")
-			create_append_text(programlisting, element['name']+';\n')
+			element.dom_append(programlisting)
 		create_append_text(programlisting, '}')
 
 		# add help to struct
@@ -588,18 +592,8 @@
 		# add list of struct members with their help
 		variablelist = create_append(refsect1, 'variablelist')
 		for element in struct['elements']:
-			# ignore members with empty help texts
-			if element['help'].isempty():
-				continue
+			element.dom_append_help(variablelist)
 
-			varlistentry = create_append(variablelist, 'varlistentry')
-			term = create_append(varlistentry, 'term')
-			create_append_text(term, element['name'])
-			listitem = create_append(varlistentry, 'listitem')
-
-			# add help to struct member
-			element['help'].dom_append(listitem)
-
 		# remove empty variablelist
 		if len(variablelist.childNodes) == 0:
 			refsect1.removeChild(variablelist)



From lazhur at mail.berlios.de  Wed Sep  3 17:46:07 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Wed, 3 Sep 2008 17:46:07 +0200
Subject: [S3d-svn] r989 - trunk/Documentation
Message-ID: <200809031546.m83Fk7is031442@sheep.berlios.de>

Author: lazhur
Date: 2008-09-03 17:46:07 +0200 (Wed, 03 Sep 2008)
New Revision: 989

Modified:
   trunk/Documentation/extractdefinitions.py
Log:
Use move creation of manpage header to special function

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-03 15:46:02 UTC (rev 988)
+++ trunk/Documentation/extractdefinitions.py	2008-09-03 15:46:07 UTC (rev 989)
@@ -461,6 +461,34 @@
 	generate = Callable(generate)
 	generate_sgml = Callable(generate_sgml)
 
+
+def manpage_header(root, name, mannum, ref_name, ref_namediv, synopsisinfo):
+	refentry = create_append(root, 'refentry')
+	refentry.setAttribute('id', cleanup_stringbegin(name))
+
+	refmeta = create_append(refentry, 'refmeta')
+
+	refentrytitle = create_append(refmeta, 'refentrytitle')
+	create_append_text(refentrytitle, name)
+
+	manvolnum = create_append(refmeta, 'manvolnum')
+	create_append_text(manvolnum, mannum)
+
+	refnamediv = create_append(refentry, 'refnamediv')
+
+	refname = create_append(refnamediv, 'refname')
+	create_append_text(refname, ref_name)
+	refpurpose = create_append(refnamediv, 'refpurpose')
+	create_append_text(refpurpose, ref_namediv)
+
+	# synopsis
+	refsynopsisdiv = create_append(refentry, 'refsynopsisdiv')
+	funcsynopsis = create_append(refsynopsisdiv, 'funcsynopsis')
+	funcsynopsisinfo = create_append(funcsynopsis, 'funcsynopsisinfo')
+	create_append_text(funcsynopsisinfo, synopsisinfo)
+
+	return (refentry, funcsynopsis)
+
 class manpage_functions:
 	"""
 	Generate manpage docbook file with informations to functions
@@ -479,30 +507,8 @@
 	def generate_sgml(function, synopsis):
 		sgml = xml.dom.minidom.Document()
 
-		refentry = create_append(sgml, 'refentry')
-		refentry.setAttribute('id', cleanup_stringbegin(function['name']))
+		(refentry, funcsynopsis) = manpage_header(sgml, function['name'], '3', function['name'], "", "#include <"+synopsis+">")
 
-		refmeta = create_append(refentry, 'refmeta')
-
-		refentrytitle = create_append(refmeta, 'refentrytitle')
-		create_append_text(refentrytitle, function['name'])
-
-		manvolnum = create_append(refmeta, 'manvolnum')
-		create_append_text(manvolnum, '3')
-
-		refnamediv = create_append(refentry, 'refnamediv')
-
-		refname = create_append(refnamediv, 'refname')
-		create_append_text(refname, function['name'])
-		refpurpose = create_append(refnamediv, 'refpurpose')
-		create_append_text(refpurpose, "")
-
-		# synopsis
-		refsynopsisdiv = create_append(refentry, 'refsynopsisdiv')
-		funcsynopsis = create_append(refsynopsisdiv, 'funcsynopsis')
-		funcsynopsisinfo = create_append(funcsynopsis, 'funcsynopsisinfo')
-		create_append_text(funcsynopsisinfo, "#include <"+synopsis+">")
-
 		# prototype
 		funcprototype = create_append(funcsynopsis, 'funcprototype')
 
@@ -548,30 +554,8 @@
 	def generate_sgml(struct, synopsis):
 		sgml = xml.dom.minidom.Document()
 
-		refentry = create_append(sgml, 'refentry')
-		refentry.setAttribute('id', cleanup_stringbegin(struct['name']))
+		(refentry, funcsynopsis) = manpage_header(sgml, struct['name'], '9', 'struct ' + struct['name'], "", "#include <"+synopsis+">")
 
-		refmeta = create_append(refentry, 'refmeta')
-
-		refentrytitle = create_append(refmeta, 'refentrytitle')
-		create_append_text(refentrytitle, struct['name'])
-
-		manvolnum = create_append(refmeta, 'manvolnum')
-		create_append_text(manvolnum, '9')
-
-		refnamediv = create_append(refentry, 'refnamediv')
-
-		refname = create_append(refnamediv, 'refname')
-		create_append_text(refname, 'struct ' + struct['name'])
-		refpurpose = create_append(refnamediv, 'refpurpose')
-		create_append_text(refpurpose, "")
-
-		# synopsis
-		refsynopsisdiv = create_append(refentry, 'refsynopsisdiv')
-		funcsynopsis = create_append(refsynopsisdiv, 'funcsynopsis')
-		funcsynopsisinfo = create_append(funcsynopsis, 'funcsynopsisinfo')
-		create_append_text(funcsynopsisinfo, "#include <"+synopsis+">")
-
 		# add definition of struct
 		refsect1 = create_append(refentry, 'refsect1')
 		title = create_append(refsect1, 'title')



From lazhur at mail.berlios.de  Fri Sep  5 01:35:53 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 5 Sep 2008 01:35:53 +0200
Subject: [S3d-svn] r990 - in trunk: Documentation Documentation/libs3dw
	Documentation/manpages/man3 libs3d libs3dw
Message-ID: <200809042335.m84NZrxq004036@sheep.berlios.de>

Author: lazhur
Date: 2008-09-05 01:35:44 +0200 (Fri, 05 Sep 2008)
New Revision: 990

Modified:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3dw/functions.docbook
   trunk/Documentation/manpages/man3/s3d_angle_to_cam.3
   trunk/Documentation/manpages/man3/s3d_clear_callback.3
   trunk/Documentation/manpages/man3/s3d_clone.3
   trunk/Documentation/manpages/man3/s3d_clone_target.3
   trunk/Documentation/manpages/man3/s3d_del_object.3
   trunk/Documentation/manpages/man3/s3d_delete_event.3
   trunk/Documentation/manpages/man3/s3d_draw_string.3
   trunk/Documentation/manpages/man3/s3d_find_event.3
   trunk/Documentation/manpages/man3/s3d_flags_off.3
   trunk/Documentation/manpages/man3/s3d_flags_on.3
   trunk/Documentation/manpages/man3/s3d_get_callback.3
   trunk/Documentation/manpages/man3/s3d_ignore_callback.3
   trunk/Documentation/manpages/man3/s3d_import_model_file.3
   trunk/Documentation/manpages/man3/s3d_init.3
   trunk/Documentation/manpages/man3/s3d_link.3
   trunk/Documentation/manpages/man3/s3d_load_line_normals.3
   trunk/Documentation/manpages/man3/s3d_load_materials_a.3
   trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3
   trunk/Documentation/manpages/man3/s3d_load_texture.3
   trunk/Documentation/manpages/man3/s3d_mainloop.3
   trunk/Documentation/manpages/man3/s3d_mcp_focus.3
   trunk/Documentation/manpages/man3/s3d_net_check.3
   trunk/Documentation/manpages/man3/s3d_new_object.3
   trunk/Documentation/manpages/man3/s3d_open_file.3
   trunk/Documentation/manpages/man3/s3d_pep_line.3
   trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_lines.3
   trunk/Documentation/manpages/man3/s3d_pep_material.3
   trunk/Documentation/manpages/man3/s3d_pep_material_a.3
   trunk/Documentation/manpages/man3/s3d_pep_material_texture.3
   trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3
   trunk/Documentation/manpages/man3/s3d_pep_vertex.3
   trunk/Documentation/manpages/man3/s3d_pep_vertices.3
   trunk/Documentation/manpages/man3/s3d_pop_event.3
   trunk/Documentation/manpages/man3/s3d_pop_line.3
   trunk/Documentation/manpages/man3/s3d_pop_material.3
   trunk/Documentation/manpages/man3/s3d_pop_polygon.3
   trunk/Documentation/manpages/man3/s3d_pop_texture.3
   trunk/Documentation/manpages/man3/s3d_pop_vertex.3
   trunk/Documentation/manpages/man3/s3d_process_stack.3
   trunk/Documentation/manpages/man3/s3d_push_event.3
   trunk/Documentation/manpages/man3/s3d_push_line.3
   trunk/Documentation/manpages/man3/s3d_push_lines.3
   trunk/Documentation/manpages/man3/s3d_push_material.3
   trunk/Documentation/manpages/man3/s3d_push_material_a.3
   trunk/Documentation/manpages/man3/s3d_push_materials_a.3
   trunk/Documentation/manpages/man3/s3d_push_polygon.3
   trunk/Documentation/manpages/man3/s3d_push_polygons.3
   trunk/Documentation/manpages/man3/s3d_push_texture.3
   trunk/Documentation/manpages/man3/s3d_push_textures.3
   trunk/Documentation/manpages/man3/s3d_push_vertex.3
   trunk/Documentation/manpages/man3/s3d_push_vertices.3
   trunk/Documentation/manpages/man3/s3d_quit.3
   trunk/Documentation/manpages/man3/s3d_rotate.3
   trunk/Documentation/manpages/man3/s3d_scale.3
   trunk/Documentation/manpages/man3/s3d_select_font.3
   trunk/Documentation/manpages/man3/s3d_set_callback.3
   trunk/Documentation/manpages/man3/s3d_strlen.3
   trunk/Documentation/manpages/man3/s3d_translate.3
   trunk/Documentation/manpages/man3/s3d_unlink.3
   trunk/Documentation/manpages/man3/s3d_usage.3
   trunk/Documentation/manpages/man3/s3d_vector_angle.3
   trunk/Documentation/manpages/man3/s3d_vector_cross_product.3
   trunk/Documentation/manpages/man3/s3d_vector_dot_product.3
   trunk/Documentation/manpages/man3/s3d_vector_length.3
   trunk/Documentation/manpages/man3/s3d_vector_subtract.3
   trunk/Documentation/manpages/man3/s3dw_ani_mate.3
   trunk/Documentation/manpages/man3/s3dw_button_new.3
   trunk/Documentation/manpages/man3/s3dw_delete.3
   trunk/Documentation/manpages/man3/s3dw_focus.3
   trunk/Documentation/manpages/man3/s3dw_getroot.3
   trunk/Documentation/manpages/man3/s3dw_handle_click.3
   trunk/Documentation/manpages/man3/s3dw_handle_key.3
   trunk/Documentation/manpages/man3/s3dw_input_change_text.3
   trunk/Documentation/manpages/man3/s3dw_input_gettext.3
   trunk/Documentation/manpages/man3/s3dw_input_new.3
   trunk/Documentation/manpages/man3/s3dw_label_change_text.3
   trunk/Documentation/manpages/man3/s3dw_label_new.3
   trunk/Documentation/manpages/man3/s3dw_moveit.3
   trunk/Documentation/manpages/man3/s3dw_object_info.3
   trunk/Documentation/manpages/man3/s3dw_show.3
   trunk/Documentation/manpages/man3/s3dw_surface_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3
   trunk/Documentation/manpages/man3/s3dw_textbox_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3
   trunk/libs3d/callback.c
   trunk/libs3d/event.c
   trunk/libs3d/freetype.c
   trunk/libs3d/io.c
   trunk/libs3d/modelread.c
   trunk/libs3d/network.c
   trunk/libs3d/proto_out.c
   trunk/libs3d/vector.c
   trunk/libs3dw/animate.c
   trunk/libs3dw/button.c
   trunk/libs3dw/event.c
   trunk/libs3dw/input.c
   trunk/libs3dw/label.c
   trunk/libs3dw/root.c
   trunk/libs3dw/surface.c
   trunk/libs3dw/textbox.c
   trunk/libs3dw/widget.c
Log:
Add brief descriptions for function manpages

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/extractdefinitions.py	2008-09-04 23:35:44 UTC (rev 990)
@@ -261,7 +261,7 @@
 		if node.attributes['kind'].nodeValue != 'function':
 			continue
 
-		function = {'return': '', 'name': '', 'param': [], 'help': []}
+		function = {'return': '', 'name': '', 'param': [], 'brief': '', 'help': []}
 		for node2 in node.childNodes:
 			if node2.nodeName == "name":
 				function['name'] = get_text(node2)
@@ -272,6 +272,9 @@
 			if node2.nodeName == "param":
 				function['param'].append(function_param(node2))
 
+			if node2.nodeName == "briefdescription":
+				function['brief'] = get_text(node2)
+
 			if node2.nodeName == 'detaileddescription':
 				function['help'] = detaileddescription(node2)
 
@@ -286,7 +289,7 @@
 	structlist = []
 	# find refs (names of xml files) of structs
 	for node in dom.getElementsByTagName("innerclass"):
-		struct = {'name': '', 'ref': '', 'elements': [], 'help': []}
+		struct = {'name': '', 'ref': '', 'elements': [], 'brief': '', 'help': []}
 		struct['name'] = get_text(node)
 		struct['ref'] = node.attributes['refid'].nodeValue
 		structlist.append(struct)
@@ -296,6 +299,9 @@
 		dom = xml.dom.minidom.parse("xml/"+struct['ref']+".xml")
 
 		for node in dom.getElementsByTagName('compounddef')[0].childNodes:
+			if node.nodeName == "briefdescription":
+				struct['brief'] = get_text(node)
+
 			if node.nodeName == 'detaileddescription':
 				struct['help'] = detaileddescription(node)
 
@@ -507,7 +513,7 @@
 	def generate_sgml(function, synopsis):
 		sgml = xml.dom.minidom.Document()
 
-		(refentry, funcsynopsis) = manpage_header(sgml, function['name'], '3', function['name'], "", "#include <"+synopsis+">")
+		(refentry, funcsynopsis) = manpage_header(sgml, function['name'], '3', function['name'], function['brief'].strip(), "#include <"+synopsis+">")
 
 		# prototype
 		funcprototype = create_append(funcsynopsis, 'funcprototype')

Modified: trunk/Documentation/libs3dw/functions.docbook
===================================================================
--- trunk/Documentation/libs3dw/functions.docbook	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/libs3dw/functions.docbook	2008-09-04 23:35:44 UTC (rev 990)
@@ -5,7 +5,7 @@
  root-&gt;y=5;
  root-&gt;z=0;
  s3dw_moveit(root);
-</programlisting></sect2><sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <fun!
 ction>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>tex!
 tbox</parameter></paramdef></funcprototype></funcsynopsis><par!
 a>Scroll
s the text in the textbox up by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scro!
 llright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2><sect2 id="s3dw_textbox_change_text"><title>s3dw_te!
 xtbox_change_text</title><funcsynopsis><funcsynopsisinfo>#incl!
 ude &lt;
s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2><sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specifiy it itself as the clickhandler.</para><programlisting> // way 1:
+</programlisting></sect2><sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <fun!
 ction>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>tex!
 tbox</parameter></paramdef></funcprototype></funcsynopsis><par!
 a>Scroll
s the text in the textbox up by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scro!
 llright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2><sect2 id="s3dw_textbox_change_text"><title>s3dw_te!
 xtbox_change_text</title><funcsynopsis><funcsynopsisinfo>#incl!
 ude &lt;
s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2><sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler.</para><programlisting> // way 1:
  s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dw_handle_click);
 
  // way 2:

Modified: trunk/Documentation/manpages/man3/s3d_angle_to_cam.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_angle_to_cam.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_angle_to_cam.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_angle_to_cam" "3" 
 .SH "NAME" 
-s3d_angle_to_cam \(em  
+s3d_angle_to_cam \(em calculate angle between vector and cam 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_clear_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clear_callback.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_clear_callback.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_clear_callback" "3" 
 .SH "NAME" 
-s3d_clear_callback \(em  
+s3d_clear_callback \(em clears a callback 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_clone.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_clone" "3" 
 .SH "NAME" 
-s3d_clone \(em  
+s3d_clone \(em clone object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_clone_target.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone_target.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_clone_target.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_clone_target" "3" 
 .SH "NAME" 
-s3d_clone_target \(em  
+s3d_clone_target \(em changes the target of a clone-object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_del_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_del_object.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_del_object.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_del_object" "3" 
 .SH "NAME" 
-s3d_del_object \(em  
+s3d_del_object \(em delete an object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_delete_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_delete_event" "3" 
 .SH "NAME" 
-s3d_delete_event \(em  
+s3d_delete_event \(em delete event from stack 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_draw_string.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_draw_string.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_draw_string.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_draw_string" "3" 
 .SH "NAME" 
-s3d_draw_string \(em  
+s3d_draw_string \(em draw a simple string 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_find_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_find_event" "3" 
 .SH "NAME" 
-s3d_find_event \(em  
+s3d_find_event \(em find eevnt on stack 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_flags_off.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_flags_off" "3" 
 .SH "NAME" 
-s3d_flags_off \(em  
+s3d_flags_off \(em disable flags of object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_flags_on.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_flags_on" "3" 
 .SH "NAME" 
-s3d_flags_on \(em  
+s3d_flags_on \(em enable flags of object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_get_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_get_callback.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_get_callback.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_get_callback" "3" 
 .SH "NAME" 
-s3d_get_callback \(em  
+s3d_get_callback \(em get callback of event 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_ignore_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_ignore_callback.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_ignore_callback.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_ignore_callback" "3" 
 .SH "NAME" 
-s3d_ignore_callback \(em  
+s3d_ignore_callback \(em ignores an event 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_import_model_file.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_import_model_file.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_import_model_file.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_import_model_file" "3" 
 .SH "NAME" 
-s3d_import_model_file \(em  
+s3d_import_model_file \(em read model from file 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_init.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_init.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_init.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_init" "3" 
 .SH "NAME" 
-s3d_init \(em  
+s3d_init \(em initialize s3d library 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_link.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_link.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_link.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_link" "3" 
 .SH "NAME" 
-s3d_link \(em  
+s3d_link \(em link object to another one 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_load_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_line_normals.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_load_line_normals.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_load_line_normals" "3" 
 .SH "NAME" 
-s3d_load_line_normals \(em  
+s3d_load_line_normals \(em add normals to line 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_load_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_load_materials_a" "3" 
 .SH "NAME" 
-s3d_load_materials_a \(em  
+s3d_load_materials_a \(em add materials with alpha to polygons 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_load_polygon_normals" "3" 
 .SH "NAME" 
-s3d_load_polygon_normals \(em  
+s3d_load_polygon_normals \(em add normals to polygon 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_load_polygon_tex_coords" "3" 
 .SH "NAME" 
-s3d_load_polygon_tex_coords \(em  
+s3d_load_polygon_tex_coords \(em add texture coordinates to polygons 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_load_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_load_texture" "3" 
 .SH "NAME" 
-s3d_load_texture \(em  
+s3d_load_texture \(em load texture from memory 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_mainloop.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_mainloop" "3" 
 .SH "NAME" 
-s3d_mainloop \(em  
+s3d_mainloop \(em set mainloop of program 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_mcp_focus.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mcp_focus.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_mcp_focus.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_mcp_focus" "3" 
 .SH "NAME" 
-s3d_mcp_focus \(em  
+s3d_mcp_focus \(em focus mcp object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_net_check.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_net_check" "3" 
 .SH "NAME" 
-s3d_net_check \(em  
+s3d_net_check \(em get events from server 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_new_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_new_object" "3" 
 .SH "NAME" 
-s3d_new_object \(em  
+s3d_new_object \(em create new object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_open_file.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_open_file.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_open_file.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_open_file" "3" 
 .SH "NAME" 
-s3d_open_file \(em  
+s3d_open_file \(em copy file into memory 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_line.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_line" "3" 
 .SH "NAME" 
-s3d_pep_line \(em  
+s3d_pep_line \(em rewrite line 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_line_normals" "3" 
 .SH "NAME" 
-s3d_pep_line_normals \(em  
+s3d_pep_line_normals \(em add normals to lines 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_lines.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_lines.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_lines" "3" 
 .SH "NAME" 
-s3d_pep_lines \(em  
+s3d_pep_lines \(em rewrite lines 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_material" "3" 
 .SH "NAME" 
-s3d_pep_material \(em  
+s3d_pep_material \(em rewrite material 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_material_a" "3" 
 .SH "NAME" 
-s3d_pep_material_a \(em  
+s3d_pep_material_a \(em rewrite material with alpha 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_material_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_texture.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_texture.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_material_texture" "3" 
 .SH "NAME" 
-s3d_pep_material_texture \(em  
+s3d_pep_material_texture \(em add texture to material 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_materials_a" "3" 
 .SH "NAME" 
-s3d_pep_materials_a \(em  
+s3d_pep_materials_a \(em rewrite materials with alpha 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_polygon_normals" "3" 
 .SH "NAME" 
-s3d_pep_polygon_normals \(em  
+s3d_pep_polygon_normals \(em add normals to polygon 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_polygon_tex_coord" "3" 
 .SH "NAME" 
-s3d_pep_polygon_tex_coord \(em  
+s3d_pep_polygon_tex_coord \(em add texture coordinates to polygon 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_polygon_tex_coords" "3" 
 .SH "NAME" 
-s3d_pep_polygon_tex_coords \(em  
+s3d_pep_polygon_tex_coords \(em add texture coordinates to polygons 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_vertex.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_vertex.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_vertex" "3" 
 .SH "NAME" 
-s3d_pep_vertex \(em  
+s3d_pep_vertex \(em rewrite vertex 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pep_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_vertices.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pep_vertices.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pep_vertices" "3" 
 .SH "NAME" 
-s3d_pep_vertices \(em  
+s3d_pep_vertices \(em rewrite lines 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pop_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pop_event" "3" 
 .SH "NAME" 
-s3d_pop_event \(em  
+s3d_pop_event \(em pop event from stack 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pop_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_line.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pop_line.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pop_line" "3" 
 .SH "NAME" 
-s3d_pop_line \(em  
+s3d_pop_line \(em remove lines 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pop_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_material.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pop_material.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pop_material" "3" 
 .SH "NAME" 
-s3d_pop_material \(em  
+s3d_pop_material \(em remove materials 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pop_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_polygon.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pop_polygon.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pop_polygon" "3" 
 .SH "NAME" 
-s3d_pop_polygon \(em  
+s3d_pop_polygon \(em remove polygons 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pop_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_texture.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pop_texture.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pop_texture" "3" 
 .SH "NAME" 
-s3d_pop_texture \(em  
+s3d_pop_texture \(em remove textures 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_pop_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_vertex.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_pop_vertex.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_pop_vertex" "3" 
 .SH "NAME" 
-s3d_pop_vertex \(em  
+s3d_pop_vertex \(em remove vertices 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_process_stack.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_process_stack" "3" 
 .SH "NAME" 
-s3d_process_stack \(em  
+s3d_process_stack \(em process all events on stack 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_event.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_event.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_event" "3" 
 .SH "NAME" 
-s3d_push_event \(em  
+s3d_push_event \(em push event onto stack 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_line" "3" 
 .SH "NAME" 
-s3d_push_line \(em  
+s3d_push_line \(em push line 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_lines" "3" 
 .SH "NAME" 
-s3d_push_lines \(em  
+s3d_push_lines \(em push many lines 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_material" "3" 
 .SH "NAME" 
-s3d_push_material \(em  
+s3d_push_material \(em push material 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material_a.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_material_a.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_material_a" "3" 
 .SH "NAME" 
-s3d_push_material_a \(em  
+s3d_push_material_a \(em push material with alpha 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_materials_a" "3" 
 .SH "NAME" 
-s3d_push_materials_a \(em  
+s3d_push_materials_a \(em push many materials 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_polygon" "3" 
 .SH "NAME" 
-s3d_push_polygon \(em  
+s3d_push_polygon \(em push polygon 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_polygons.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_polygons" "3" 
 .SH "NAME" 
-s3d_push_polygons \(em  
+s3d_push_polygons \(em push many polygons 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_texture" "3" 
 .SH "NAME" 
-s3d_push_texture \(em  
+s3d_push_texture \(em push texture 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_textures.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_textures.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_textures.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_textures" "3" 
 .SH "NAME" 
-s3d_push_textures \(em  
+s3d_push_textures \(em push many textures 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_vertex" "3" 
 .SH "NAME" 
-s3d_push_vertex \(em  
+s3d_push_vertex \(em push vertex 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_push_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_push_vertices" "3" 
 .SH "NAME" 
-s3d_push_vertices \(em  
+s3d_push_vertices \(em push many vertices 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_quit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_quit" "3" 
 .SH "NAME" 
-s3d_quit \(em  
+s3d_quit \(em shutdown s3d library 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_rotate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_rotate" "3" 
 .SH "NAME" 
-s3d_rotate \(em  
+s3d_rotate \(em rotate object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_scale.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_scale.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_scale.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_scale" "3" 
 .SH "NAME" 
-s3d_scale \(em  
+s3d_scale \(em scale object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_select_font.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_select_font.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_select_font.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_select_font" "3" 
 .SH "NAME" 
-s3d_select_font \(em  
+s3d_select_font \(em select font 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_set_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_set_callback" "3" 
 .SH "NAME" 
-s3d_set_callback \(em  
+s3d_set_callback \(em sets a callback 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_strlen.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_strlen.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_strlen.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_strlen" "3" 
 .SH "NAME" 
-s3d_strlen \(em  
+s3d_strlen \(em get rendered string size 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_translate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_translate.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_translate.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_translate" "3" 
 .SH "NAME" 
-s3d_translate \(em  
+s3d_translate \(em move object to absolute position 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_unlink.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_unlink.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_unlink.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_unlink" "3" 
 .SH "NAME" 
-s3d_unlink \(em  
+s3d_unlink \(em removes link from another object 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_usage.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_usage" "3" 
 .SH "NAME" 
-s3d_usage \(em  
+s3d_usage \(em print s3d parameter 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_vector_angle.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_angle.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_vector_angle.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_vector_angle" "3" 
 .SH "NAME" 
-s3d_vector_angle \(em  
+s3d_vector_angle \(em calculate angle between two vectors 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_vector_cross_product.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_cross_product.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_vector_cross_product.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_vector_cross_product" "3" 
 .SH "NAME" 
-s3d_vector_cross_product \(em  
+s3d_vector_cross_product \(em calculate cross product of two vectors 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_vector_dot_product.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_dot_product.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_vector_dot_product.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_vector_dot_product" "3" 
 .SH "NAME" 
-s3d_vector_dot_product \(em  
+s3d_vector_dot_product \(em calculate dot product of two vectors 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_vector_length.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_length.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_vector_length.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_vector_length" "3" 
 .SH "NAME" 
-s3d_vector_length \(em  
+s3d_vector_length \(em calculate length of vector 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3d_vector_subtract.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_subtract.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3d_vector_subtract.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3d_vector_subtract" "3" 
 .SH "NAME" 
-s3d_vector_subtract \(em  
+s3d_vector_subtract \(em substract two vectors 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_ani_mate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_ani_mate" "3" 
 .SH "NAME" 
-s3dw_ani_mate \(em  
+s3dw_ani_mate \(em doing the whole animation thing 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_button_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_button_new" "3" 
 .SH "NAME" 
-s3dw_button_new \(em  
+s3dw_button_new \(em create a new button in the surface 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_delete.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_delete.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_delete.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_delete" "3" 
 .SH "NAME" 
-s3dw_delete \(em  
+s3dw_delete \(em delete widget 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_focus.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_focus.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_focus.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_focus" "3" 
 .SH "NAME" 
-s3dw_focus \(em  
+s3dw_focus \(em give widget focus 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_getroot.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_getroot" "3" 
 .SH "NAME" 
-s3dw_getroot \(em  
+s3dw_getroot \(em get the root 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_handle_click.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_handle_click.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_handle_click.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_handle_click" "3" 
 .SH "NAME" 
-s3dw_handle_click \(em  
+s3dw_handle_click \(em handle click on widget 
 .SH "SYNOPSIS" 
 .PP 
 .nf 
@@ -11,7 +11,7 @@
 .fi 
 .SH "Description" 
 .PP 
-If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specifiy it itself as the clickhandler. 
+If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler. 
 .PP 
 .nf 
 // way 1: 

Modified: trunk/Documentation/manpages/man3/s3dw_handle_key.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_handle_key.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_handle_key.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_handle_key" "3" 
 .SH "NAME" 
-s3dw_handle_key \(em  
+s3dw_handle_key \(em handle key input on widget 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_input_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_change_text.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_input_change_text.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_input_change_text" "3" 
 .SH "NAME" 
-s3dw_input_change_text \(em  
+s3dw_input_change_text \(em changes the text of the input 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_input_gettext.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_input_gettext" "3" 
 .SH "NAME" 
-s3dw_input_gettext \(em  
+s3dw_input_gettext \(em get text of input 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_input_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_input_new" "3" 
 .SH "NAME" 
-s3dw_input_new \(em  
+s3dw_input_new \(em create a new input in the surface 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_label_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_change_text.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_label_change_text.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_label_change_text" "3" 
 .SH "NAME" 
-s3dw_label_change_text \(em  
+s3dw_label_change_text \(em change label text 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_label_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_label_new" "3" 
 .SH "NAME" 
-s3dw_label_new \(em  
+s3dw_label_new \(em create a new label in the surface 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_moveit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_moveit.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_moveit.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_moveit" "3" 
 .SH "NAME" 
-s3dw_moveit \(em  
+s3dw_moveit \(em apply widgets moving function 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_object_info.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_object_info.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_object_info.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_object_info" "3" 
 .SH "NAME" 
-s3dw_object_info \(em  
+s3dw_object_info \(em handle object info events 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_show.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_show.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_show.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_show" "3" 
 .SH "NAME" 
-s3dw_show \(em  
+s3dw_show \(em make widget visible 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_surface_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_surface_new" "3" 
 .SH "NAME" 
-s3dw_surface_new \(em  
+s3dw_surface_new \(em create a new surface 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_textbox_change_text" "3" 
 .SH "NAME" 
-s3dw_textbox_change_text \(em  
+s3dw_textbox_change_text \(em change text 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_textbox_new" "3" 
 .SH "NAME" 
-s3dw_textbox_new \(em  
+s3dw_textbox_new \(em create a new textbox in the surface 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_textbox_scrolldown" "3" 
 .SH "NAME" 
-s3dw_textbox_scrolldown \(em  
+s3dw_textbox_scrolldown \(em scroll text down 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_textbox_scrollleft" "3" 
 .SH "NAME" 
-s3dw_textbox_scrollleft \(em  
+s3dw_textbox_scrollleft \(em scroll text left 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_textbox_scrollright" "3" 
 .SH "NAME" 
-s3dw_textbox_scrollright \(em  
+s3dw_textbox_scrollright \(em scroll text right 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_textbox_scrollto" "3" 
 .SH "NAME" 
-s3dw_textbox_scrollto \(em  
+s3dw_textbox_scrollto \(em scroll text to position 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3	2008-09-04 23:35:44 UTC (rev 990)
@@ -1,6 +1,6 @@
 .TH "s3dw_textbox_scrollup" "3" 
 .SH "NAME" 
-s3dw_textbox_scrollup \(em  
+s3dw_textbox_scrollup \(em scroll text up 
 .SH "SYNOPSIS" 
 .PP 
 .nf 

Modified: trunk/libs3d/callback.c
===================================================================
--- trunk/libs3d/callback.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3d/callback.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -57,7 +57,8 @@
 	return(0);
 }
 
-/**
+/** \brief sets a callback
+ *
  * sets a callback for a certain event. this is very useful for event-oriented
  * applications. event callbacks will not interrupt each other or the mainloop.
  *
@@ -81,7 +82,8 @@
 	s3d_process_stack();
 }
 
-/**
+/** \brief clears a callback
+ *
  * Clears the callback which is associated with the event.
  */
 void s3d_clear_callback(uint8_t event)
@@ -89,7 +91,8 @@
 	s3d_cb_list[(int)event] = S3D_CBNIL;
 }
 
-/**
+/** \brief ignores an event
+ *
  * Sets the callback on ignore, that means it won't be queued up for later use.
  * An incoming event of this type will simply be skipped.
  */
@@ -98,7 +101,8 @@
 	s3d_set_callback(event, _s3d_ignore);
 }
 
-/**
+/** \brief get callback of event
+ *
  * Returns the Callback-function of the event.
  *
  * \code

Modified: trunk/libs3d/event.c
===================================================================
--- trunk/libs3d/event.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3d/event.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -30,7 +30,8 @@
 static struct s3d_evt *s3d_stack;
 int cb_lock = 2;  /*  callback lock */
 
-/**
+/** \brief push event onto stack
+ *
  * Pushes an event onto the event-stack. Usually you don't need to do this
  * manually.
  */
@@ -62,7 +63,8 @@
 		s3d_stack = newevt;
 }
 
-/**
+/** \brief pop event from stack
+ *
  * Pops the latest event from the stack. Don't forget to free() both the event
  * and its buffer! Returns a pointer to struct s3d_evt.
  */
@@ -73,7 +75,8 @@
 	return ret;
 }
 
-/**
+/** \brief find eevnt on stack
+ *
  * Finds the latest occurence of an event, giving the event type as argument.
  * Returns a pointer to struct s3d_evt.
  */
@@ -88,7 +91,8 @@
 	return(NULL);
 }
 
-/**
+/** \brief delete event from stack
+ *
  * deletes an event, the argument is the pointer to the event which is to be
  * deleted (maybe obtained from s3d_find_event).
  */
@@ -114,7 +118,8 @@
 	return(-1);
 }
 
-/**
+/** \brief process all events on stack
+ *
  * This function goes through all function of the event-stack and will call
  * functions. this is useful when you define a new function but still have a lot
  * of events of this type on the stack.

Modified: trunk/libs3d/freetype.c
===================================================================
--- trunk/libs3d/freetype.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3d/freetype.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -302,7 +302,8 @@
 	return(0);
 }
 
-/**
+/** \brief select font
+ *
  * This selects a font for the s3d_draw_string() function.
  *
  * \remarks Of course, you won't forget to toggle it visible, won't you?
@@ -347,7 +348,8 @@
 	return(-1);
 }
 
-/**
+/** \brief draw a simple string
+ *
  * Renders the string str with in Truetype format with the height 1, returns the
  * length of the rendered string in *xlen (or set len=NULL to disable this).
  *
@@ -389,7 +391,8 @@
 	return(f_oid);
 }
 
-/**
+/** \brief get rendered string size
+ *
  * Returns the length of the string if it were rendered with the currently
  * selected font. That might be useful to estimate the size used for a text and
  * render the background or bounding box before inserting the text.

Modified: trunk/libs3d/io.c
===================================================================
--- trunk/libs3d/io.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3d/io.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -65,7 +65,8 @@
 
 #endif
 
-/**
+/** \brief print s3d parameter
+ *
  * Prints the possible parameter for the client library (which can be passed in
  * s3d_init())
  */
@@ -115,7 +116,8 @@
 	return(0);
 }
 /*  external functions go here ... */
-/**
+/** \brief initialize s3d library
+ *
  * This will initialize the s3d-library and the connection to the Server. It
  * will return 0 on success in Server initializion. name specifies the your
  * programs name.
@@ -188,7 +190,8 @@
 	return(-1);
 }
 
-/**
+/** \brief shutdown s3d library
+ *
  * closes the connection and cleares the event-stack. it can also be used to
  * leave the s3d_mainloop().
  */
@@ -223,7 +226,8 @@
 	return(0);
 }
 
-/**
+/** \brief set mainloop of program
+ *
  * takes a function as argument. it will loop this function until a quit-event
  * is received. you can pass NULL if you have no function to be looped, but its
  * better to sleep some time if you have nothing to do anyway to save cpu-time.
@@ -250,7 +254,8 @@
 	return(0);
 }
 
-/**
+/** \brief copy file into memory
+ *
  * This opens the file fname, setting *pointer to it's memory position. the
  * function will return the size of buffer. you can free() the pointer when
  * you're finished.

Modified: trunk/libs3d/modelread.c
===================================================================
--- trunk/libs3d/modelread.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3d/modelread.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -42,7 +42,8 @@
 
 #define MAXSTRN  20
 static int model_load(char *file);
-/**
+/** \brief read model from file
+ *
  * Imports an 3d object file and returns the object number. Quite a number of
  * formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb,
  * .lwo), Quake Models (.md3), or simply everything libg3d supports. :)

Modified: trunk/libs3d/network.c
===================================================================
--- trunk/libs3d/network.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3d/network.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -65,7 +65,8 @@
 	return(_s3d_tcp_net_receive());
 }
 #endif
-/**
+/** \brief get events from server
+ *
  * This functions is for programs which do not employ a mainloop, hence they
  * need to check for new events on their own. Programs like these must make sure
  * to call this function from time to time to convince the server that they did

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3d/proto_out.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -38,7 +38,8 @@
 
 #define MF_LEN 65530  /*  maximum fragmentation length */
 
-/**
+/** \brief create new object
+ *
  * Creates a new object, returning the object id.
  *
  * \remarks Of course, you won't forget to toggle it visible, won't you?
@@ -53,7 +54,8 @@
 	return(oid);
 }
 
-/**
+/** \brief clone object
+ *
  * Clones an already exisiting object. They get just look the same as the
  * parent-object and will change when the parent-object changes. Cloning
  * especially makes sense if you want to use the same object a lot of times.
@@ -68,7 +70,8 @@
 	return(res);
 }
 
-/**
+/** \brief changes the target of a clone-object
+ *
  * Changes the clone target of oid to another object (toid). This assumes you've
  * got oid from s3d_clone before.
  */
@@ -82,7 +85,8 @@
 	return oid;
 }
 
-/**
+/** \brief delete an object
+ *
  * Deletes the object referenced by oid.
  */
 int s3d_del_object(int oid)
@@ -92,7 +96,8 @@
 	return oid;
 }
 
-/**
+/** \brief link object to another one
+ *
  * A linked object will move along with it's link parent. For example if you
  * have a book on a table, you can link the book to the table so the book will
  * "keep on the table" if you move the table around in space. It will also
@@ -107,7 +112,8 @@
 	return(0);
 }
 
-/**
+/** \brief removes link from another object
+ *
  * Remove the link of object oid to its target.
  */
 int s3d_unlink(int oid)
@@ -119,7 +125,8 @@
 }
 /*  pushing functions */
 
-/**
+/** \brief push vertex
+ *
  * pushes a vertex onto the vertex stack. make sure that you count how many
  * vertices you've pushed because you'll need that for referencing when you push
  * your polygons.
@@ -142,7 +149,8 @@
 	return(0);
 }
 
-/**
+/** \brief push many vertices
+ *
  * push some vertices from an array. that's much better for performing than
  * using s3d_push_vertex() if you have a lot of vertices (and that's probably
  * the usual case).
@@ -178,7 +186,8 @@
 	return(0);
 }
 
-/**
+/** \brief push material
+ *
  * pushes a material for an object. you will have to count them yourself too,
  * as polygons will ask for the material index number. the material properties
  * are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum,
@@ -229,7 +238,8 @@
 	return(0);  /*  nothing yet */
 }
 
-/**
+/** \brief push material with alpha
+ *
  * Same as s3d_push_material, but color has alpha value added. Use
  * s3d_push_materials_a() if you have a lot of materials to push.
  */
@@ -275,7 +285,8 @@
 	return(0);  /*  nothing yet */
 }
 
-/**
+/** \brief push many materials
+ *
  * Pushes a buffer of Materials. Those Materials are in the format float[n*12],
  * with
  * - mbuf[n*12 + 0-3] - ambience
@@ -324,7 +335,8 @@
 	return(0);
 }
 
-/**
+/** \brief push polygon
+ *
  * push one polygon on the polygonstack of the object. it takes 3 vertex-index
  * numbers and one material material-index-nr. as argument.
  *
@@ -358,7 +370,8 @@
 	return(0);
 }
 
-/**
+/** \brief push line
+ *
  * Push one line on the linestack of the object. It takes 2 vertex-index-
  * numbers and one material material-index-nr. as argument. If you have a lot of
  * lines to push, use s3d_push_lines()
@@ -381,7 +394,8 @@
 	return(0);
 }
 
-/**
+/** \brief push many polygons
+ *
  * as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.
  *
  * \code
@@ -421,7 +435,8 @@
 	return(0);
 }
 
-/**
+/** \brief push many lines
+ *
  * Pushing n lines on the linestack of the object, each lbuf has a size of n*3,
  * each entry has the index number of the first vertex, second vertex and
  * material number just as in s3d_push_line().
@@ -454,7 +469,8 @@
 	return(0);
 }
 
-/**
+/** \brief push texture
+ *
  * Adds a new texture with height w and height h on the texturestack.
  */
 int s3d_push_texture(int object, uint16_t w, uint16_t h)
@@ -472,7 +488,8 @@
 	return(0);
 }
 
-/**
+/** \brief push many textures
+ *
  * As for vertices, you can push arrays of textures on the texture stack to have
  * greater performance. The tbuf should contain n texture sizes which consist of
  * 2 uint16_t values for width and height for each texture.
@@ -506,7 +523,8 @@
 }
 /*  popping functions  */
 
-/**
+/** \brief remove vertices
+ *
  * Deletes the latest n vertices from the vertex stack of the object.
  */
 int s3d_pop_vertex(int object, uint32_t n)
@@ -519,7 +537,8 @@
 
 }
 
-/**
+/** \brief remove materials
+ *
  * Deletes the latest n material from the material stack of the object.
  */
 int s3d_pop_material(int object, uint32_t n)
@@ -532,7 +551,8 @@
 
 }
 
-/**
+/** \brief remove polygons
+ *
  * Deletes the latest n polygon from the polygon stack of the object.
  */
 int s3d_pop_polygon(int object, uint32_t n)
@@ -545,7 +565,8 @@
 
 }
 
-/**
+/** \brief remove lines
+ *
  * Deletes the latest n lines from the line stack of the object.
  */
 int s3d_pop_line(int object, uint32_t n)
@@ -558,7 +579,8 @@
 
 }
 
-/**
+/** \brief remove textures
+ *
  * Deletes the latest n textures from the texture stack of the object.
  */
 int s3d_pop_texture(int object, uint32_t n)
@@ -572,7 +594,8 @@
 }
 /*  pepping/loading functions */
 
-/**
+/** \brief rewrite material
+ *
  * Overwriting the latest pushed Material, overwriting the current value with
  * the specified one. See s3d_pep_materials_a if you want to pep more materials.
  */
@@ -618,7 +641,8 @@
 	return(0);  /*  nothing yet */
 }
 
-/**
+/** \brief rewrite material with alpha
+ *
  * Overwriting the latest pushed Material, overwriting the current value with
  * the specified one, with alpha value in contrast to s3d_pep_material See
  * s3d_push_materials_a if you want to pep more materials.
@@ -665,7 +689,8 @@
 	return(0);  /*  nothing yet */
 }
 
-/**
+/** \brief rewrite materials with alpha
+ *
  * Alters the last n pushed Materials. See s3d_push_materials_a() for more
  * information how mbuf should look like. Use s3d_pep_material_a() if you only
  * want to alter the latest material.
@@ -683,7 +708,8 @@
 	return(0);
 }
 
-/**
+/** \brief add normals to polygon
+ *
  * Adds normal information to polygons, giving each vertex of a polygon a normal
  * information. With this, you can achieve smoothed edge effects.
  *
@@ -708,7 +734,8 @@
 
 }
 
-/**
+/** \brief add normals to lines
+ *
  * Adds normal information to lines, giving each vertex of a line a normal
  * information. This makes lines somewhat nicer, you'll need that especially
  * when you're going to build wireframe models.
@@ -731,7 +758,8 @@
 
 }
 
-/**
+/** \brief rewrite vertex
+ *
  * Alter the latest pushed vertex, overwriting with the supplied values.
  */
 int s3d_pep_vertex(int object, float x, float y, float z)
@@ -752,7 +780,8 @@
 	return(0);
 }
 
-/**
+/** \brief rewrite line
+ *
  * Alter the latest pushed line, overwriting with the supplied values.
  */
 int s3d_pep_line(int object, int v1, int v2, int material)
@@ -774,7 +803,8 @@
 }
 
 
-/**
+/** \brief rewrite lines
+ *
  * Alter the latest n pushed lines. lbuf holds the values which are used to
  * overwrite the old data, n entries with each 3 uint32_t specifying first,
  * second vertex and material of each line.
@@ -795,7 +825,8 @@
 
 }
 
-/**
+/** \brief rewrite lines
+ *
  * Alter the latest n pushed vertex. vbuf holds the values which are used to
  * overwrite the old data, n entries with each 3 floats specifying x,y,z of the
  * vertices.
@@ -814,7 +845,8 @@
 
 }
 
-/**
+/** \brief add texture coordinates to polygon
+ *
  * Pimp the last polygon pushed with some textures coordinates, x and y values
  * for each vertex point respectively. Those values may be between 0 and 1 and
  * are vertex points on the  texture defined in the material of the polygon. If
@@ -843,7 +875,8 @@
 	return(0);
 }
 
-/**
+/** \brief add texture coordinates to polygons
+ *
  * Pimp the latest n polygons with texture coordinates. tbuf has 6*n float
  * values for its entries, which are supplied in the order as in
  * s3d_pep_polygon_tex_coord()
@@ -861,7 +894,8 @@
 	return(0);
 }
 
-/**
+/** \brief add normals to polygon
+ *
  * Just as s3d_pep_polygon_normals(), with the difference you won't alter the
  * latest n polygons but n polygons starting with index start.
  */
@@ -893,7 +927,8 @@
 	return(0);
 }
 
-/**
+/** \brief add normals to line
+ *
  * Just as s3d_pep_line_normals(), with the difference you won't alter the
  * latest n lines but n lines starting with index start.
  */
@@ -925,7 +960,8 @@
 	return(0);
 }
 
-/**
+/** \brief add texture coordinates to polygons
+ *
  * Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the
  * latest n polygons but n polygons starting with index start.
  */
@@ -957,7 +993,8 @@
 	return(0);
 }
 
-/**
+/** \brief add materials with alpha to polygons
+ *
  * Loads n materials starting from index position start into the Material stack.
  * See s3d_push_materials_a for more informatino about the values in mbuf.
  */
@@ -989,7 +1026,8 @@
 	return(0);
 }
 
-/**
+/** \brief add texture to material
+ *
  * Assign the latest material a texture referenced by the index tex. Of course,
  * you will have pushed this texture with s3d_push_texture()
  */
@@ -1025,7 +1063,8 @@
 
 }
 
-/**
+/** \brief load texture from memory
+ *
  * Creates a new object, returning the object id.
  *
  * \remarks Of course, you won't forget to toggle it visible, won't you?
@@ -1064,7 +1103,8 @@
 	return(0);
 }
 
-/**
+/** \brief enable flags of object
+ *
  * turn some flags on for object.
  *
  * \remarks If you don't toggle OF_VISIBLE on, you won't see your object. usually
@@ -1086,7 +1126,8 @@
 	return(0);
 }
 
-/**
+/** \brief disable flags of object
+ *
  * turn some flags off for object.
  */
 int s3d_flags_off(int object, uint32_t flags)
@@ -1105,7 +1146,8 @@
 	return(0);
 }
 
-/**
+/** \brief move object to absolute position
+ *
  * Move the object to some position in space. when you create an object, it's
  * always located at 0.0 , 0.0, 0.0.
  *
@@ -1135,7 +1177,8 @@
 
 }
 
-/**
+/** \brief rotate object
+ *
  * rotate an object around the x, y and z-axis respectively. x,y,z may have
  * values between [0,360] degrees.
  *
@@ -1171,7 +1214,8 @@
 	return(0);
 }
 
-/**
+/** \brief scale object
+ *
  * Scales the object. about factor s. s=1 will be the original size, -1 will
  * mirror it.
  *
@@ -1190,7 +1234,8 @@
 	return(0);
 }
 
-/**
+/** \brief focus mcp object
+ *
  * This is an mcp-only function. It gives focus (for receiving key-strokes etc.)
  * to an app referenced by it's mcp-object-id.
  */

Modified: trunk/libs3d/vector.c
===================================================================
--- trunk/libs3d/vector.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3d/vector.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -26,7 +26,8 @@
 #include <math.h>  /* sqrt() */
 #include "s3d.h"
 
-/**
+/** \brief calculate length of vector
+ *
  * Calculates and returns the length of the given vector (which should be of the
  * type float[3]). More info on wikipedia
  * http://en.wikipedia.org/wiki/Vector_(spatial)
@@ -38,7 +39,8 @@
 
 }
 
-/**
+/** \brief substract two vectors
+ *
  * Subtracts vector1 from vector2, writing result into result_vector. All vectors
  * should have the format float[3]. More info on wikipedia.
  * http://en.wikipedia.org/wiki/Vector_(spatial)
@@ -52,7 +54,8 @@
 
 }
 
-/**
+/** \brief calculate dot product of two vectors
+ *
  * Calculates and returns the dot product of vector1 and vector2. All vectors
  * should have the format float[3]. More info on wikipedia.
  * http://en.wikipedia.org/wiki/Vector_(spatial)
@@ -62,7 +65,8 @@
 	return (vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2]);
 }
 
-/**
+/** \brief calculate cross product of two vectors
+ *
  * Calculates and returns the cross product of vector1 and vector2. All vectors
  * should have the format float[3]. More info on wikipedia.
  * http://en.wikipedia.org/wiki/Vector_(spatial)
@@ -74,7 +78,8 @@
 	result_vector[2] = vector1[0] * vector2[1] - vector1[1] * vector2[0];
 }
 
-/**
+/** \brief calculate angle between two vectors
+ *
  * Calculates and returns the angle between vector1 and vector2. Please note that
  * the resulting angle is between 0 and PI, therefore not covering the whole
  * period! To convert in degrees just do result*180/M_PI. All vectors should
@@ -88,7 +93,8 @@
 
 }
 
-/**
+/** \brief calculate angle between vector and cam
+ *
  * Given obj_pos and cam_pos in the format float[3], angle_rad about which angle
  * the object should be rotated around the y-axis so that it faces the camera.
  * This might become handy if you have some text floating in space and want it

Modified: trunk/libs3dw/animate.c
===================================================================
--- trunk/libs3dw/animate.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/animate.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -143,7 +143,8 @@
 
 }
 
-/**
+/** \brief doing the whole animation thing
+ *
  * Just call this in your mainloop if you want some nice window sliding
  * animations. it's somewhat bloating, but you don't want to miss it ;)
  *

Modified: trunk/libs3dw/button.c
===================================================================
--- trunk/libs3dw/button.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/button.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -86,7 +86,8 @@
 	widget->height = 2;
 }
 
-/**
+/** \brief create a new button in the surface
+ *
  * Creates a new button on the surface, with "text" written on it and the upper
  * left corner at (posx,posy) on the surface.
  *

Modified: trunk/libs3dw/event.c
===================================================================
--- trunk/libs3dw/event.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/event.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -25,9 +25,10 @@
 #include <s3dw.h>
 #include <s3dw_int.h>
 
-/**
+/** \brief handle click on widget
+ *
  * If you want your widgets on mouseclicks (believe me, you want that), you have
- * to call this either in your clickhandler-function or specifiy it itself as
+ * to call this either in your clickhandler-function or specify it itself as
  * the clickhandler.
  *
  * \code
@@ -53,7 +54,8 @@
 	return(s3dw_widget_event_click(s3dw_getroot(), oid));
 }
 
-/**
+/** \brief handle key input on widget
+ *
  * This is somehow useful to call in your keyhandler functions if you want to
  * have input-boxes work. ;)
  *
@@ -80,7 +82,8 @@
 	return(s3dw_widget_event_key(s3dw_getroot(), keys));
 }
 
-/**
+/** \brief handle object info events
+ *
  * This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this,
  * s3dw can consider the camera position and makes things like following the
  * camera possible.

Modified: trunk/libs3dw/input.c
===================================================================
--- trunk/libs3dw/input.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/input.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -138,7 +138,8 @@
 	s3d_flags_off(input->oid_text, S3D_OF_VISIBLE | S3D_OF_SELECTABLE);
 }
 
-/**
+/** \brief create a new input in the surface
+ *
  * Creates a new input-box on the surface with a input width of "width", the
  * upper left corner at (posx,posy) on the surface. The input-box is empty on
  * creation and can be change with s3dw_input_change_text, and received with
@@ -181,7 +182,8 @@
 	free(input);
 }
 
-/**
+/** \brief changes the text of the input
+ *
  * Change the text in the referenced input-box to the specified text.
  */
 void s3dw_input_change_text(s3dw_input *input, const char *text)
@@ -244,7 +246,8 @@
 	return(0);
 }
 
-/**
+/** \brief get text of input
+ *
  * Returns the text which is currently entered in the referenced input-box.
  */
 char *s3dw_input_gettext(s3dw_input *input)

Modified: trunk/libs3dw/label.c
===================================================================
--- trunk/libs3dw/label.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/label.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -50,7 +50,8 @@
 	s3d_flags_off(widget->oid, S3D_OF_VISIBLE | S3D_OF_SELECTABLE);
 }
 
-/**
+/** \brief change label text
+ *
  * Change the text in the referenced label to the specified text.
  */
 void s3dw_label_change_text(s3dw_label *label, const char *text)
@@ -66,7 +67,8 @@
 		s3dw_label_show(widget);
 }
 
-/**
+/** \brief create a new label in the surface
+ *
  * Creates a new label on the surface, with "text" written on it and the upper
  * left corner at (posx,posy) on the surface.
  *

Modified: trunk/libs3dw/root.c
===================================================================
--- trunk/libs3dw/root.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/root.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -76,7 +76,8 @@
 	return(NULL);
 }
 
-/**
+/** \brief get the root
+ *
  * Returns the root-widget, which holds all the surfaces. E.g. if you want to
  * move all widgets at once, adjust the root-widgets x,y,z and use s3dw_moveit()
  *

Modified: trunk/libs3dw/surface.c
===================================================================
--- trunk/libs3dw/surface.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/surface.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -126,7 +126,8 @@
 	s3d_flags_off(surface->oid_tbar, S3D_OF_VISIBLE | S3D_OF_SELECTABLE);
 }
 
-/**
+/** \brief create a new surface
+ *
  * Creates a new surface (a new window) with title "title" and dimension "width"
  * x "height".
  *

Modified: trunk/libs3dw/textbox.c
===================================================================
--- trunk/libs3dw/textbox.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/textbox.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -195,7 +195,8 @@
 	s3dw_textbox_scrollright((s3dw_textbox *)widget->parent);
 }
 
-/**
+/** \brief create a new textbox in the surface
+ *
  * Creates a new textbox on the surface, with "text" written on it and the upper
  * left corner at (posx,posy) on the surface. Width and height define the size
  * of the textbox including scrollbars which are rendered around the textfield.
@@ -238,7 +239,8 @@
 		s3dw_textbox_show(widget);
 }
 
-/**
+/** \brief scroll text up
+ *
  * Scrolls the text in the textbox up by one line, if possible.
  */
 void s3dw_textbox_scrollup(s3dw_textbox *textbox)
@@ -248,7 +250,8 @@
 	s3dw_textbox_redraw(S3DWIDGET(textbox));
 }
 
-/**
+/** \brief scroll text down
+ *
  * Scrolls the text in the textbox down by one line, if possible.
  */
 void s3dw_textbox_scrolldown(s3dw_textbox *textbox)
@@ -258,7 +261,8 @@
 
 }
 
-/**
+/** \brief scroll text left
+ *
  * Scrolls the text in the textbox to the left by one character, if possible.
  */
 void s3dw_textbox_scrollleft(s3dw_textbox *textbox)
@@ -268,7 +272,8 @@
 	s3dw_textbox_redraw(S3DWIDGET(textbox));
 }
 
-/**
+/** \brief scroll text right
+ *
  * Scrolls the text in the textbox to the right by one character, if possible.
  */
 void s3dw_textbox_scrollright(s3dw_textbox *textbox)
@@ -277,7 +282,8 @@
 	s3dw_textbox_redraw(S3DWIDGET(textbox));
 }
 
-/**
+/** \brief scroll text to position
+ *
  * Scrolls the text in the textbox so that the character in row y, column x is
  * in the top left corner of the textbox.
  */
@@ -291,7 +297,8 @@
 	s3dw_textbox_redraw(widget);
 }
 
-/**
+/** \brief change text
+ *
  * Change the text in the referenced textbox to the specified text.
  */
 void s3dw_textbox_change_text(s3dw_textbox *textbox, const char *text)

Modified: trunk/libs3dw/widget.c
===================================================================
--- trunk/libs3dw/widget.c	2008-09-03 15:46:07 UTC (rev 989)
+++ trunk/libs3dw/widget.c	2008-09-04 23:35:44 UTC (rev 990)
@@ -98,7 +98,8 @@
 		}
 }
 
-/**
+/** \brief delete widget
+ *
  * Deletes any widget. Should be casted with S3DWIDGET().
  */
 void s3dw_delete(s3dw_widget *widget)
@@ -111,7 +112,8 @@
 	s3dwcb_destroy[widget->type](widget); /* type-specific destroy */
 }
 
-/**
+/** \brief make widget visible
+ *
  * Switches a widget visible. Should be casted with S3DWIDGET().
  */
 void s3dw_show(s3dw_widget *widget)
@@ -120,7 +122,8 @@
 	s3dw_widget_visible(widget);
 }
 
-/**
+/** \brief give widget focus
+ *
  * Gives focus to the widget, relative to its parent. That means you can focus a
  * surface, and each surface can focus one of its element, e.g. an input field.
  * Should be casted with S3DWIDGET().
@@ -149,7 +152,8 @@
 	s3dwcb_show[widget->type](widget);
 }
 
-/**
+/** \brief apply widgets moving function
+ *
  * Moves/translates the widget as you specified in it's private s3dw_widget
  * structure. Should be casted with S3DWIDGET().
  */



From lazhur at mail.berlios.de  Fri Sep  5 01:36:04 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 5 Sep 2008 01:36:04 +0200
Subject: [S3d-svn] r991 - in trunk: Documentation/libs3d
	Documentation/manpages/man3 libs3d
Message-ID: <200809042336.m84Na4IE005186@sheep.berlios.de>

Author: lazhur
Date: 2008-09-05 01:36:02 +0200 (Fri, 05 Sep 2008)
New Revision: 991

Modified:
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/manpages/man3/s3d_delete_event.3
   trunk/Documentation/manpages/man3/s3d_flags_off.3
   trunk/Documentation/manpages/man3/s3d_flags_on.3
   trunk/Documentation/manpages/man3/s3d_mainloop.3
   trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
   trunk/Documentation/manpages/man3/s3d_push_material.3
   trunk/Documentation/manpages/man3/s3d_push_polygon.3
   trunk/Documentation/manpages/man3/s3d_push_polygons.3
   trunk/Documentation/manpages/man3/s3d_push_vertex.3
   trunk/Documentation/manpages/man3/s3d_push_vertices.3
   trunk/Documentation/manpages/man3/s3d_quit.3
   trunk/Documentation/manpages/man3/s3d_rotate.3
   trunk/Documentation/manpages/man3/s3d_set_callback.3
   trunk/libs3d/callback.c
   trunk/libs3d/event.c
   trunk/libs3d/io.c
   trunk/libs3d/proto_out.c
Log:
Begin sentences in detaildescriptions with capital letters

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-04 23:36:02 UTC (rev 991)
@@ -7,18 +7,18 @@
          }
          return(0);
  }
-</programlisting></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>closes the connection and cleares the event-stack. it can also be used to leave the s3d_mainloop().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>takes a function as argument. it will loop this function until a quit-event is received. you can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
+</programlisting></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Closes the connection and cleares the event-stack. It can also be used to leave the s3d_mainloop().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
  {
          usleep(1000); // sleep 1 ms in every cycle
  }
  ...
 
  s3d_mainloop(mainloop());
-</programlisting></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef!
 ><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
+</programlisting></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef!
 ><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
                       1.0, 2.0, 3.0,
                       3.0, 2.0, 1.0};
  s3d_push_vertices(object, vertices, 3); // pushing 3 vertices
-</programlisting></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given!
  in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. the specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <paramete!
 r>diff_r</parameter></paramdef><paramdef>float <parameter>diff!
 _g</para
meter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter!
 ></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
+</programlisting></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given!
  in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <paramete!
 r>diff_r</parameter></paramdef><paramdef>float <parameter>diff!
 _g</para
meter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter!
 ></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
 </para><para>mbuf[n*12 + 0-3] - ambience</para><para>mbuf[n*12 + 4-7] - specular</para><para>mbuf[n *12 + 8-11] - diffusion values
 </para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy s3d_push_material_a() function.</para><programlisting> // each line has r,g,b,a value
  float bla[24]=
@@ -30,14 +30,14 @@
           0, 1, 1, 1};
 
  s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material
-</programlisting></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynop!
 sis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.         </para></sect2><sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;<!
 /funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_lo!
 ad_mater
ials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>!
 push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = s3d_new_object();   // create a new object
+</programlisting></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynop!
 sis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.         </para></sect2><sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;<!
 /funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_lo!
 ad_mater
ials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>!
 Push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = s3d_new_object();   // create a new object
  s3d_push_vertex(oid, 0.0, 0.0, 0.0);
  s3d_push_vertex(oid, 0.0, 1.0, 0.0);
  s3d_push_vertex(oid, 1.0, 0.0, 0.0);
  s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
  s3d_push_polygon(oid, 0, 1, 2, 0);
  // this will create a red polygon
-</programlisting></sect2><sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>pbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
+</programlisting></sect2><sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>pbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
  int oid = s3d_new_object();   // create a new object
  s3d_push_vertex(oid, 0.0, 0.0, 0.0);
  s3d_push_vertex(oid, 0.0, 1.0, 0.0);
@@ -45,14 +45,14 @@
  s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
  s3d_push_polygons(oid, pbuf, 1);
  // push one polygon with the pbuf data
-</programlisting></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>l!
 buf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>!
 int <function>s3d_push_textures</function></funcdef><paramdef>!
 int <par
ameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsi!
 sinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <paramete!
 r>object</parameter></paramdef><paramdef>uint32_t <parameter>n!
 </parame
ter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis>!
 <para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in Total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>n!
 buf should contain n * 9 float values, for each vertex a norma!
 l vector
 (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp t!
 he last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()         </para></sect2><sect2 id="s3d_pep_material_te!
 xture"><title>s3d_pep_material_texture</title><funcsynopsis><f!
 uncsynop
sisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3!
 d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramd!
 ef></funcprototype></funcsynopsis><para>Alter the latest pushe!
 d line, 
overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter!
 >nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 i!
 d="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_co!
 ords</ti
tle><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parame!
 ter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+</programlisting></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>l!
 buf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>!
 int <function>s3d_push_textures</function></funcdef><paramdef>!
 int <par
ameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsi!
 sinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <paramete!
 r>object</parameter></paramdef><paramdef>uint32_t <parameter>n!
 </parame
ter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis>!
 <para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>n!
 buf should contain n * 9 float values, for each vertex a norma!
 l vector
 (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp t!
 he last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()         </para></sect2><sect2 id="s3d_pep_material_te!
 xture"><title>s3d_pep_material_texture</title><funcsynopsis><f!
 uncsynop
sisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3!
 d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramd!
 ef></funcprototype></funcsynopsis><para>Alter the latest pushe!
 d line, 
overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter!
 >nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 i!
 d="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_co!
 ords</ti
tle><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parame!
 ter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
         </para></warning></sect2><sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sec!
 t2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&!
 quot; if you move the table around in space. It will also rota!
 te with 
the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
-        </para></warning></sect2><sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>turn some flags off for object.         </para></sect2><sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.<!
 /para><warning><para>Translation is absolute, not relative!
+        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sec!
 t2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&!
 quot; if you move the table around in space. It will also rota!
 te with 
the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
+        </para></warning></sect2><sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags off for object.         </para></sect2><sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.<!
 /para><warning><para>Translation is absolute, not relative!
 </para></warning><programlisting> s3d_translate(object, 2, 0, 0);
  s3d_translate(object, 4, 0, 0);
  // object will end up at 4,0,0 and not 6,0,0!!
-</programlisting></sect2><sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes i!
 t any clearer ;)</para><warning><para>Rotate is absolute, not relative!
+</programlisting></sect2><sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes i!
 t any clearer ;)</para><warning><para>Rotate is absolute, not relative!
 </para></warning><programlisting> s3d_rotate(object, 90,  0, 0);
  s3d_rotate(object, 180, 0, 0);
  // object will be rotated 180 degrees around the x-axis, not 270 degress!
@@ -66,7 +66,7 @@
  s3d_draw_string(str, len);
 
  // not interested in the length? do that: s3d_draw_string(str, NULL);
-</programlisting></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://!
 en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</param!
 eter>[]</paramdef><paramdef>float <parameter>result_vector</pa!
 rameter>
[]</paramdef></funcprototype></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="!
 s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>!
 const float <parameter>vector1</parameter>[]</paramdef><paramd!
 ef>const
 float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>v!
 oid</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>deletes an event, the argu!
 ment is the pointer to the event which is to be deleted (maybe!
  obtaine
d from s3d_find_event).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling s3d_init()
+</programlisting></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://!
 en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</param!
 eter>[]</paramdef><paramdef>float <parameter>result_vector</pa!
 rameter>
[]</paramdef></funcprototype></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="!
 s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>!
 const float <parameter>vector1</parameter>[]</paramdef><paramd!
 ef>const
 float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>v!
 oid</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes an event, the argu!
 ment is the pointer to the event which is to be deleted (maybe!
  obtaine
d from s3d_find_event).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling s3d_init()
 </para></warning><programlisting> #include &lt;inttypes.h&gt;
 
  void obj_click(struct s3d_evt event)

Modified: trunk/Documentation/manpages/man3/s3d_delete_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -11,5 +11,5 @@
 .fi 
 .SH "Description" 
 .PP 
-deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event).          
+Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event).          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_flags_off.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -12,5 +12,5 @@
 .fi 
 .SH "Description" 
 .PP 
-turn some flags off for object.          
+Turn some flags off for object.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_flags_on.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -12,7 +12,7 @@
 .fi 
 .SH "Description" 
 .PP 
-turn some flags on for object. 
+Turn some flags on for object. 
 .PP 
 .RS 
 \fBWarning:   

Modified: trunk/Documentation/manpages/man3/s3d_mainloop.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -11,7 +11,7 @@
 .fi 
 .SH "Description" 
 .PP 
-takes a function as argument. it will loop this function until a quit-event is received. you can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time. 
+Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time. 
 .PP 
 .nf 
 void mainloop(void) 

Modified: trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -15,5 +15,5 @@
 .PP 
 Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models. 
 .PP 
-nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in Total.          
+nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in total.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -20,5 +20,5 @@
 .fi 
 .SH "Description" 
 .PP 
-pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. the specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.          
+Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -15,7 +15,7 @@
 .fi 
 .SH "Description" 
 .PP 
-push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument. 
+Push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument. 
 .PP 
 .nf 
 int oid = s3d_new_object();   // create a new object 

Modified: trunk/Documentation/manpages/man3/s3d_push_polygons.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -13,7 +13,7 @@
 .fi 
 .SH "Description" 
 .PP 
-as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index. 
+As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index. 
 .PP 
 .nf 
 uint32_t pbuf[] = { 0, 1, 2, 0}; 

Modified: trunk/Documentation/manpages/man3/s3d_push_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -14,5 +14,5 @@
 .fi 
 .SH "Description" 
 .PP 
-pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.          
+Pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -13,7 +13,7 @@
 .fi 
 .SH "Description" 
 .PP 
-push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case).  
+Push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case).  
 .PP 
 .nf 
 float vertices[] = { 0.0, 0.0, 0.0, 

Modified: trunk/Documentation/manpages/man3/s3d_quit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -11,5 +11,5 @@
 .fi 
 .SH "Description" 
 .PP 
-closes the connection and cleares the event-stack. it can also be used to leave the s3d_mainloop().          
+Closes the connection and cleares the event-stack. It can also be used to leave the s3d_mainloop().          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_rotate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -14,7 +14,7 @@
 .fi 
 .SH "Description" 
 .PP 
-rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees. 
+Rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees. 
 .PP 
 You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes it any clearer ;) 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3d_set_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-04 23:36:02 UTC (rev 991)
@@ -12,7 +12,7 @@
 .fi 
 .SH "Description" 
 .PP 
-sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop. 
+Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop. 
 .PP 
 .RS 
 \fBWarning:   

Modified: trunk/libs3d/callback.c
===================================================================
--- trunk/libs3d/callback.c	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/libs3d/callback.c	2008-09-04 23:36:02 UTC (rev 991)
@@ -59,7 +59,7 @@
 
 /** \brief sets a callback
  *
- * sets a callback for a certain event. this is very useful for event-oriented
+ * Sets a callback for a certain event. this is very useful for event-oriented
  * applications. event callbacks will not interrupt each other or the mainloop.
  *
  * \remarks Defining callbacks will only work after calling s3d_init()

Modified: trunk/libs3d/event.c
===================================================================
--- trunk/libs3d/event.c	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/libs3d/event.c	2008-09-04 23:36:02 UTC (rev 991)
@@ -93,7 +93,7 @@
 
 /** \brief delete event from stack
  *
- * deletes an event, the argument is the pointer to the event which is to be
+ * Deletes an event, the argument is the pointer to the event which is to be
  * deleted (maybe obtained from s3d_find_event).
  */
 int s3d_delete_event(const struct s3d_evt *devt)

Modified: trunk/libs3d/io.c
===================================================================
--- trunk/libs3d/io.c	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/libs3d/io.c	2008-09-04 23:36:02 UTC (rev 991)
@@ -192,7 +192,7 @@
 
 /** \brief shutdown s3d library
  *
- * closes the connection and cleares the event-stack. it can also be used to
+ * Closes the connection and cleares the event-stack. It can also be used to
  * leave the s3d_mainloop().
  */
 int s3d_quit(void)
@@ -228,8 +228,8 @@
 
 /** \brief set mainloop of program
  *
- * takes a function as argument. it will loop this function until a quit-event
- * is received. you can pass NULL if you have no function to be looped, but its
+ * Takes a function as argument. It will loop this function until a quit-event
+ * is received. You can pass NULL if you have no function to be looped, but its
  * better to sleep some time if you have nothing to do anyway to save cpu-time.
  *
  * \code

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-09-04 23:35:44 UTC (rev 990)
+++ trunk/libs3d/proto_out.c	2008-09-04 23:36:02 UTC (rev 991)
@@ -127,7 +127,7 @@
 
 /** \brief push vertex
  *
- * pushes a vertex onto the vertex stack. make sure that you count how many
+ * Pushes a vertex onto the vertex stack. make sure that you count how many
  * vertices you've pushed because you'll need that for referencing when you push
  * your polygons.
  */
@@ -151,7 +151,7 @@
 
 /** \brief push many vertices
  *
- * push some vertices from an array. that's much better for performing than
+ * Push some vertices from an array. that's much better for performing than
  * using s3d_push_vertex() if you have a lot of vertices (and that's probably
  * the usual case).
  * \code
@@ -188,10 +188,10 @@
 
 /** \brief push material
  *
- * pushes a material for an object. you will have to count them yourself too,
+ * Pushes a material for an object. you will have to count them yourself too,
  * as polygons will ask for the material index number. the material properties
  * are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum,
- * 1.0 is the maximum a color value can be. the specular color is the color
+ * 1.0 is the maximum a color value can be. The specular color is the color
  * which is directly reflected from the light source. the diffuse color is the
  * color which can be seen in the bright side of the object, and the ambience
  * color is the color of the shadow side of the object.
@@ -337,7 +337,7 @@
 
 /** \brief push polygon
  *
- * push one polygon on the polygonstack of the object. it takes 3 vertex-index
+ * Push one polygon on the polygonstack of the object. it takes 3 vertex-index
  * numbers and one material material-index-nr. as argument.
  *
  * \code
@@ -396,7 +396,7 @@
 
 /** \brief push many polygons
  *
- * as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.
+ * As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.
  *
  * \code
  * uint32_t pbuf[] = { 0, 1, 2, 0};
@@ -742,7 +742,7 @@
  *
  * nbuf should contain n * 6 float values, for each vertex a normal vector
  * (x,y,z), and you have 2 Vertices for each line so that makes 6 float values
- * per line in Total.
+ * per line in total.
  */
 int s3d_pep_line_normals(int object, const float *nbuf, uint16_t n)
 {
@@ -1105,7 +1105,7 @@
 
 /** \brief enable flags of object
  *
- * turn some flags on for object.
+ * Turn some flags on for object.
  *
  * \remarks If you don't toggle OF_VISIBLE on, you won't see your object. usually
  * you want this. (at least after you *push()d all your content)
@@ -1128,7 +1128,7 @@
 
 /** \brief disable flags of object
  *
- * turn some flags off for object.
+ * Turn some flags off for object.
  */
 int s3d_flags_off(int object, uint32_t flags)
 {
@@ -1179,7 +1179,7 @@
 
 /** \brief rotate object
  *
- * rotate an object around the x, y and z-axis respectively. x,y,z may have
+ * Rotate an object around the x, y and z-axis respectively. x,y,z may have
  * values between [0,360] degrees.
  *
  * You will usually only rotate around one axis, leaving the unused fields on 0,



From lazhur at mail.berlios.de  Fri Sep  5 01:36:09 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 5 Sep 2008 01:36:09 +0200
Subject: [S3d-svn] r992 - in trunk/Documentation: . manpages/man3
Message-ID: <200809042336.m84Na905006379@sheep.berlios.de>

Author: lazhur
Date: 2008-09-05 01:36:09 +0200 (Fri, 05 Sep 2008)
New Revision: 992

Modified:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/manpages/man3/s3d_net_check.3
   trunk/Documentation/manpages/man3/s3d_new_object.3
   trunk/Documentation/manpages/man3/s3d_pop_event.3
   trunk/Documentation/manpages/man3/s3d_process_stack.3
   trunk/Documentation/manpages/man3/s3d_quit.3
   trunk/Documentation/manpages/man3/s3d_usage.3
   trunk/Documentation/manpages/man3/s3dw_ani_mate.3
   trunk/Documentation/manpages/man3/s3dw_getroot.3
Log:
Mark functions without parameters as <void> for manpages

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/extractdefinitions.py	2008-09-04 23:36:09 UTC (rev 992)
@@ -4,6 +4,7 @@
 import xml.dom.minidom
 from xml.dom.minidom import Node
 import os
+import re
 
 class Callable:
     def __init__(self, func):
@@ -62,6 +63,10 @@
 	while new_str[0] in ['_']:
 		new_str = new_str[1:]
 	return new_str
+
+def filter_xmldirectclosed(xml):
+	p = re.compile('<([^<>]+)\s*/>')
+	return p.sub(r'<\1>', xml)
 	
 
 """
@@ -76,7 +81,6 @@
 			t += get_text(node)
 	return t
 
-
 class detaileddescription:
 	t = []
 
@@ -186,6 +190,12 @@
 		if self.param['array'] != '':
 			create_append_text(paramdef, self.param['array'])
 
+	def is_void(self):
+		if self.param['type'] == 'void' and self.param['declname'] == '':
+			return 1
+		else:
+			return 0
+
 class struct_element:
 	def __init__(self, node):
 		self.element = {'type': '', 'name' : '', 'help': []}
@@ -343,7 +353,8 @@
 		func_file = open(name+'/functions.docbook', "w")
 		for func in functionlist:
 			sgml = docbook_functions.generate_sgml(func, synopsis)
-			sgml.writexml(func_file)
+			cleanml = filter_xmldirectclosed(sgml.toxml())
+			func_file.write(cleanml)
 		func_file.close()
 
 	"""
@@ -393,7 +404,8 @@
 		struct_file = open(name+'/structs.docbook', "w")
 		for struct in structlist:
 			sgml = docbook_structs.generate_sgml(struct)
-			sgml.writexml(struct_file)
+			cleanml = filter_xmldirectclosed(sgml.toxml())
+			struct_file.write(cleanml)
 		struct_file.close()
 
 	"""
@@ -440,7 +452,8 @@
 		typedef_file = open(name+'/typedefs.docbook', "w")
 		for typedef in typedeflist:
 			sgml = docbook_typedefs.generate_sgml(typedef)
-			sgml.writexml(typedef_file)
+			cleanml = filter_xmldirectclosed(sgml.toxml())
+			typedef_file.write(cleanml)
 		typedef_file.close()
 
 	"""
@@ -504,7 +517,8 @@
 			func_file = open('./manpages/man3/'+cleanup_stringbegin(func['name'])+'.sgml', "w")
 			func_file.write('<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">\n')
 			sgml = manpage_functions.generate_sgml(func, synopsis)
-			sgml.writexml(func_file)
+			cleanml = filter_xmldirectclosed(sgml.toxml())
+			func_file.write(cleanml)
 			func_file.close()
 
 	"""
@@ -525,10 +539,12 @@
 		create_append_text(func, function['name'])
 
 		# add parameter to function definition
-		
 		param_num = len(function['param'])
-		for i in range(0, param_num):
-			function['param'][i].dom_append(funcprototype, "\t")
+		if param_num == 1 and function['param'][0].is_void():
+			void = create_append(funcprototype, 'void')
+		else:
+			for i in range(0, param_num):
+				function['param'][i].dom_append(funcprototype, "\t")
 
 		# add help to function
 		refsect1 = create_append(refentry, 'refsect1')
@@ -551,7 +567,8 @@
 			func_file = open('./manpages/man9/'+cleanup_stringbegin(func['name'])+'.sgml', "w")
 			func_file.write('<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">\n')
 			sgml = manpage_structs.generate_sgml(func, synopsis)
-			sgml.writexml(func_file)
+			cleanml = filter_xmldirectclosed(sgml.toxml())
+			func_file.write(cleanml)
 			func_file.close()
 
 	"""

Modified: trunk/Documentation/manpages/man3/s3d_net_check.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-04 23:36:09 UTC (rev 992)
@@ -6,8 +6,7 @@
 .nf 
 #include <s3d.h> 
 .sp 1 
-\fBint \fBs3d_net_check\fP\fR( 
-\fB	void\fR); 
+\fBint \fBs3d_net_check\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3d_new_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-04 23:36:09 UTC (rev 992)
@@ -6,8 +6,7 @@
 .nf 
 #include <s3d.h> 
 .sp 1 
-\fBint \fBs3d_new_object\fP\fR( 
-\fB	void\fR); 
+\fBint \fBs3d_new_object\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3d_pop_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-04 23:36:09 UTC (rev 992)
@@ -6,8 +6,7 @@
 .nf 
 #include <s3d.h> 
 .sp 1 
-\fBstruct s3d_evt * \fBs3d_pop_event\fP\fR( 
-\fB	void\fR); 
+\fBstruct s3d_evt * \fBs3d_pop_event\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3d_process_stack.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-04 23:36:09 UTC (rev 992)
@@ -6,8 +6,7 @@
 .nf 
 #include <s3d.h> 
 .sp 1 
-\fBvoid \fBs3d_process_stack\fP\fR( 
-\fB	void\fR); 
+\fBvoid \fBs3d_process_stack\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3d_quit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-04 23:36:09 UTC (rev 992)
@@ -6,8 +6,7 @@
 .nf 
 #include <s3d.h> 
 .sp 1 
-\fBint \fBs3d_quit\fP\fR( 
-\fB	void\fR); 
+\fBint \fBs3d_quit\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3d_usage.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-04 23:36:09 UTC (rev 992)
@@ -6,8 +6,7 @@
 .nf 
 #include <s3d.h> 
 .sp 1 
-\fBvoid \fBs3d_usage\fP\fR( 
-\fB	void\fR); 
+\fBvoid \fBs3d_usage\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3dw_ani_mate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-04 23:36:09 UTC (rev 992)
@@ -6,8 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBvoid \fBs3dw_ani_mate\fP\fR( 
-\fB	void\fR); 
+\fBvoid \fBs3dw_ani_mate\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3dw_getroot.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-04 23:36:02 UTC (rev 991)
+++ trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-04 23:36:09 UTC (rev 992)
@@ -6,8 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBs3dw_widget * \fBs3dw_getroot\fP\fR( 
-\fB	void\fR); 
+\fBs3dw_widget * \fBs3dw_getroot\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 



From lazhur at mail.berlios.de  Sat Sep  6 23:09:28 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Sat, 6 Sep 2008 23:09:28 +0200
Subject: [S3d-svn] r993 - trunk/Documentation
Message-ID: <200809062109.m86L9SeS032532@sheep.berlios.de>

Author: lazhur
Date: 2008-09-06 23:09:27 +0200 (Sat, 06 Sep 2008)
New Revision: 993

Modified:
   trunk/Documentation/extractdefinitions.py
Log:
Set id for documentation references while extracting informations

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-04 23:36:09 UTC (rev 992)
+++ trunk/Documentation/extractdefinitions.py	2008-09-06 21:09:27 UTC (rev 993)
@@ -271,10 +271,11 @@
 		if node.attributes['kind'].nodeValue != 'function':
 			continue
 
-		function = {'return': '', 'name': '', 'param': [], 'brief': '', 'help': []}
+		function = {'return': '', 'name': '', 'id': '', 'param': [], 'brief': '', 'help': []}
 		for node2 in node.childNodes:
 			if node2.nodeName == "name":
 				function['name'] = get_text(node2)
+				function['id'] = function['name']
 
 			if node2.nodeName == "type":
 				function['return'] = remove_exportdefinitions(get_text(node2))
@@ -299,8 +300,9 @@
 	structlist = []
 	# find refs (names of xml files) of structs
 	for node in dom.getElementsByTagName("innerclass"):
-		struct = {'name': '', 'ref': '', 'elements': [], 'brief': '', 'help': []}
+		struct = {'name': '', 'id': '', 'ref': '', 'elements': [], 'brief': '', 'help': []}
 		struct['name'] = get_text(node)
+		struct['id'] = 'struct'+struct['name']
 		struct['ref'] = node.attributes['refid'].nodeValue
 		structlist.append(struct)
 
@@ -330,10 +332,11 @@
 		if node.attributes['kind'].nodeValue != 'typedef':
 			continue
 
-		typedef = {'name': '', 'definition': '', 'help': []}
+		typedef = {'name': '', 'id': '', 'definition': '', 'help': []}
 		for node2 in node.childNodes:
 			if node2.nodeName == 'name':
 				typedef['name'] = get_text(node2)
+				typedef['id'] = typedef['name']
 
 			if node2.nodeName == 'definition':
 				typedef['definition'] = get_text(node2)
@@ -363,7 +366,7 @@
 	def generate_sgml(function, synopsis):
 		sgml = xml.dom.minidom.Document()
 		sect2 = create_append(sgml, 'sect2')
-		sect2.setAttribute('id', function['name'])
+		sect2.setAttribute('id', function['id'])
 
 		title = create_append(sect2, 'title')
 		create_append_text(title, function['name'])
@@ -414,7 +417,7 @@
 	def generate_sgml(struct):
 		sgml = xml.dom.minidom.Document()
 		sect2 = create_append(sgml, 'sect2')
-		sect2.setAttribute('id', 'struct'+struct['name'])
+		sect2.setAttribute('id', struct['id'])
 
 		title = create_append(sect2, 'title')
 		create_append_text(title, 'struct '+struct['name'])
@@ -462,7 +465,7 @@
 	def generate_sgml(typedef):
 		sgml = xml.dom.minidom.Document()
 		sect2 = create_append(sgml, 'sect2')
-		sect2.setAttribute('id', typedef['name'])
+		sect2.setAttribute('id', typedef['id'])
 
 		title = create_append(sect2, 'title')
 		create_append_text(title, 'typedef '+typedef['name'])
@@ -481,9 +484,9 @@
 	generate_sgml = Callable(generate_sgml)
 
 
-def manpage_header(root, name, mannum, ref_name, ref_namediv, synopsisinfo):
+def manpage_header(root, name, refid, mannum, ref_name, ref_namediv, synopsisinfo):
 	refentry = create_append(root, 'refentry')
-	refentry.setAttribute('id', cleanup_stringbegin(name))
+	refentry.setAttribute('id', cleanup_stringbegin(refid))
 
 	refmeta = create_append(refentry, 'refmeta')
 
@@ -527,7 +530,7 @@
 	def generate_sgml(function, synopsis):
 		sgml = xml.dom.minidom.Document()
 
-		(refentry, funcsynopsis) = manpage_header(sgml, function['name'], '3', function['name'], function['brief'].strip(), "#include <"+synopsis+">")
+		(refentry, funcsynopsis) = manpage_header(sgml, function['name'], function['id'], '3', function['name'], function['brief'].strip(), "#include <"+synopsis+">")
 
 		# prototype
 		funcprototype = create_append(funcsynopsis, 'funcprototype')
@@ -577,7 +580,7 @@
 	def generate_sgml(struct, synopsis):
 		sgml = xml.dom.minidom.Document()
 
-		(refentry, funcsynopsis) = manpage_header(sgml, struct['name'], '9', 'struct ' + struct['name'], "", "#include <"+synopsis+">")
+		(refentry, funcsynopsis) = manpage_header(sgml, struct['name'], struct['id'], '9', 'struct ' + struct['name'], "", "#include <"+synopsis+">")
 
 		# add definition of struct
 		refsect1 = create_append(refentry, 'refsect1')



From lazhur at mail.berlios.de  Sat Sep  6 23:09:33 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Sat, 6 Sep 2008 23:09:33 +0200
Subject: [S3d-svn] r994 - in trunk/Documentation: . libs3d libs3dw
Message-ID: <200809062109.m86L9X3E032563@sheep.berlios.de>

Author: lazhur
Date: 2008-09-06 23:09:32 +0200 (Sat, 06 Sep 2008)
New Revision: 994

Modified:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/libs3d/structs.docbook
   trunk/Documentation/libs3d/typedefs.docbook
   trunk/Documentation/libs3dw/functions.docbook
   trunk/Documentation/libs3dw/structs.docbook
   trunk/Documentation/libs3dw/typedefs.docbook
Log:
Create automatically links in docbook

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-06 21:09:27 UTC (rev 993)
+++ trunk/Documentation/extractdefinitions.py	2008-09-06 21:09:32 UTC (rev 994)
@@ -12,27 +12,31 @@
 
 def main():
 	print 'reading with "doxygen xml.doxygen" generated files'
+	refidlist = []
 
 	libs3d = xml.dom.minidom.parse("xml/s3d_8h.xml")
 	libs3dw = xml.dom.minidom.parse("xml/s3dw_8h.xml")
 
 	libs3d_func = extract_functions(libs3d)
 	libs3dw_func = extract_functions(libs3dw)
+	refidlist += libs3d_func + libs3dw_func
 
 	libs3d_struct = extract_structs(libs3d)
 	libs3dw_struct = extract_structs(libs3dw)
+	refidlist += libs3d_struct + libs3dw_struct
 
 	libs3d_typedef = extract_typedefs(libs3d)
 	libs3dw_typedef = extract_typedefs(libs3dw)
+	refidlist += libs3d_typedef + libs3dw_typedef
 
-	docbook_functions.generate('libs3d', "s3d.h", libs3d_func)
-	docbook_functions.generate('libs3dw', "s3dw.h", libs3dw_func)
+	docbook_functions.generate('libs3d', "s3d.h", libs3d_func, refidlist)
+	docbook_functions.generate('libs3dw', "s3dw.h", libs3dw_func, refidlist)
 
-	docbook_structs.generate('libs3d', libs3d_struct)
-	docbook_structs.generate('libs3dw', libs3dw_struct)
+	docbook_structs.generate('libs3d', libs3d_struct, refidlist)
+	docbook_structs.generate('libs3dw', libs3dw_struct, refidlist)
 
-	docbook_typedefs.generate('libs3d', libs3d_typedef)
-	docbook_typedefs.generate('libs3dw', libs3dw_typedef)
+	docbook_typedefs.generate('libs3d', libs3d_typedef, refidlist)
+	docbook_typedefs.generate('libs3dw', libs3dw_typedef, refidlist)
 
 	rm_files('./manpages/man3/')
 	manpage_functions.generate("s3d.h", libs3d_func)
@@ -67,7 +71,6 @@
 def filter_xmldirectclosed(xml):
 	p = re.compile('<([^<>]+)\s*/>')
 	return p.sub(r'<\1>', xml)
-	
 
 """
 Generate text from all childNodes
@@ -81,6 +84,62 @@
 			t += get_text(node)
 	return t
 
+"""
+Add references to docbook dom
+"""
+def link_refids(dom, refidlist):
+	for refitem in refidlist:
+		link_refid(dom, refitem['name'], refitem['id'])
+
+"""
+Search text in dom for name to replace it by link to refid
+"""
+def link_refid(dom, name, refid):
+	num_nodes = len(dom.childNodes)
+	i = 0
+	while i < num_nodes:
+		node = dom.childNodes[i]
+		if node.nodeType == Node.TEXT_NODE:
+			string = node.data
+			valid_suround = ['', ',', '.', ' ', '(', ')', '\n', '\r', '!', '?']
+			found = 0
+			while found != -1:
+				found =  string.find(name, found)
+				if found != -1:
+					next_char = ''
+					prev_char = ''
+
+					# check for valid surounding chars
+					if (found + len(name)) < len(string):
+						next_char = string[found + len(name)]
+					if found > 0:
+						prev_char = string[found - 1]
+
+					if next_char in valid_suround and prev_char in valid_suround:
+						# suroundings chars ok -> safe beginning and link
+						create_before_text(dom, string[:found], node)
+						link = create_before(dom, 'link', node)
+						link.setAttribute('linkend', refid)
+						create_append_text(link, name)
+						num_nodes = num_nodes + 2
+						i = i + 2
+
+						# continue search after laster found
+						string = string[(found + len(name)):]
+						found = 0
+					else:
+						#no valid surounding chars found -> move on
+						found = found + 1
+
+				else:
+					# finishes search and can now remove old strings
+					create_before_text(dom, string, node)
+					dom.removeChild(node)
+		else:
+			if node.nodeName not in ['funcprototype', 'title']:
+				link_refid(node, name, refid)
+		i = i + 1
+
 class detaileddescription:
 	t = []
 
@@ -262,6 +321,32 @@
 	return t
 
 """
+Create new node with tag name node_type and add it to father before refnode
+"""
+def create_before(father, node_type, refnode):
+	if father.ownerDocument:
+		t = father.ownerDocument.createElement(node_type)
+	else:
+		# no father -> so it must be a document
+		t = father.createElement(text)
+
+	father.insertBefore(t, refnode)
+	return t
+
+"""
+Create new text node with text and add it to father before refnode
+"""
+def create_before_text(father, text, refnode):
+	if father.ownerDocument:
+		t = father.ownerDocument.createTextNode(text)
+	else:
+		# no father -> so it must be a document
+		t = father.createTextNode(text)
+
+	father.insertBefore(t, refnode)
+	return t
+
+"""
 Extract function informations from doxygen dom
 """
 def extract_functions(dom):
@@ -352,10 +437,11 @@
 	"""
 	Generate docbook file with informations to all functions
 	"""
-	def generate(name, synopsis, functionlist):
+	def generate(name, synopsis, functionlist, refidlist):
 		func_file = open(name+'/functions.docbook', "w")
 		for func in functionlist:
 			sgml = docbook_functions.generate_sgml(func, synopsis)
+			link_refids(sgml, refidlist)
 			cleanml = filter_xmldirectclosed(sgml.toxml())
 			func_file.write(cleanml)
 		func_file.close()
@@ -403,10 +489,11 @@
 	"""
 	Generate docbook file with informations to all structs
 	"""
-	def generate(name, structlist):
+	def generate(name, structlist, refidlist):
 		struct_file = open(name+'/structs.docbook', "w")
 		for struct in structlist:
 			sgml = docbook_structs.generate_sgml(struct)
+			link_refids(sgml, refidlist)
 			cleanml = filter_xmldirectclosed(sgml.toxml())
 			struct_file.write(cleanml)
 		struct_file.close()
@@ -451,10 +538,11 @@
 	"""
 	Generate docbook file with informations to all typedefs
 	"""
-	def generate(name, typedeflist):
+	def generate(name, typedeflist, refidlist):
 		typedef_file = open(name+'/typedefs.docbook', "w")
 		for typedef in typedeflist:
 			sgml = docbook_typedefs.generate_sgml(typedef)
+			link_refids(sgml, refidlist)
 			cleanml = filter_xmldirectclosed(sgml.toxml())
 			typedef_file.write(cleanml)
 		typedef_file.close()

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-06 21:09:27 UTC (rev 993)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-06 21:09:32 UTC (rev 994)
@@ -1,26 +1,26 @@
-<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in s3d_init())         </para></sect2><sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
+<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in <link linkend="s3d_init">s3d_init</link>())         </para></sect2><sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc,!
  char **argv)
  {
-         if (!s3d_init(&amp;argc, &amp;argv, &quot;Hello world&quot;))
+         if (!<link linkend="s3d_init">s3d_init</link>(&amp;argc, &amp;argv, &quot;Hello world&quot;))
          {
                  ...
-                 s3d_quit();
+                 <link linkend="s3d_quit">s3d_quit</link>();
          }
          return(0);
  }
-</programlisting></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Closes the connection and cleares the event-stack. It can also be used to leave the s3d_mainloop().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
+</programlisting></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Closes the connection and cleares the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop!
 (void)
  {
          usleep(1000); // sleep 1 ms in every cycle
  }
  ...
 
- s3d_mainloop(mainloop());
-</programlisting></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef!
 ><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
+ <link linkend="s3d_mainloop">s3d_mainloop</link>(mainloop());
+</programlisting></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef!
 ><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Push some vertices from an array. that's much better for performing than using <link linkend="s3d_push_vertex">s3d_push_vertex</link>() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
                       1.0, 2.0, 3.0,
                       3.0, 2.0, 1.0};
- s3d_push_vertices(object, vertices, 3); // pushing 3 vertices
-</programlisting></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given!
  in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <paramete!
 r>diff_r</parameter></paramdef><paramdef>float <parameter>diff!
 _g</para
meter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter!
 ></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
+ <link linkend="s3d_push_vertices">s3d_push_vertices</link>(object, vertices, 3); // pushing 3 vertices
+</programlisting></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given!
  in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <paramete!
 r>diff_r</parameter></paramdef><paramdef>float <parameter>diff!
 _g</para
meter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See <link linkend="s3d_pep_materials_a">s3d_pep_materials_a</link> if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><!
 paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as <link linkend="s3d_push_material">s3d_push_material</link>, but color has alpha value added. Use <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a bu!
 ffer of Materials. Those Materials are in the format float[n*1!
 2], with

 </para><para>mbuf[n*12 + 0-3] - ambience</para><para>mbuf[n*12 + 4-7] - specular</para><para>mbuf[n *12 + 8-11] - diffusion values
-</para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy s3d_push_material_a() function.</para><programlisting> // each line has r,g,b,a value
+</para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy <link linkend="s3d_push_material_a">s3d_push_material_a</link>() function.</para><programlisting> // each line has r,g,b,a value
  float bla[24]=
          {1, 0, 0, 1,
           1, 0, 0, 1,
@@ -29,55 +29,55 @@
           0, 1, 1, 1,
           0, 1, 1, 1};
 
- s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material
-</programlisting></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynop!
 sis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.         </para></sect2><sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;<!
 /funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_lo!
 ad_mater
ials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>!
 Push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = s3d_new_object();   // create a new object
- s3d_push_vertex(oid, 0.0, 0.0, 0.0);
- s3d_push_vertex(oid, 0.0, 1.0, 0.0);
- s3d_push_vertex(oid, 1.0, 0.0, 0.0);
- s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
- s3d_push_polygon(oid, 0, 1, 2, 0);
+ <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>(object, mbuf, 2); // push a red and a cyan material
+</programlisting></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynop!
 sis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to <link linkend="s3d_pep_material">s3d_pep_material</link> See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed Materials. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() for more information how mbuf should look like. Use <link linkend="s3d_pep_material_a">s3d_pep_material_a</link>() if you only want to alt!
 er the latest material.         </para></sect2><sect2 id="s3d_!
 load_mat
erials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the Material stack. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></par!
 amdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
+ <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
+ <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
+ <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 1.0, 0.0, 0.0);
+ <link linkend="s3d_push_material">s3d_push_material</link>(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
+ <link linkend="s3d_push_polygon">s3d_push_polygon</link>(oid, 0, 1, 2, 0);
  // this will create a red polygon
 </programlisting></sect2><sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>pbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
- int oid = s3d_new_object();   // create a new object
- s3d_push_vertex(oid, 0.0, 0.0, 0.0);
- s3d_push_vertex(oid, 0.0, 1.0, 0.0);
- s3d_push_vertex(oid, 1.0, 0.0, 0.0);
- s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
- s3d_push_polygons(oid, pbuf, 1);
+ int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
+ <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
+ <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
+ <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 1.0, 0.0, 0.0);
+ <link linkend="s3d_push_material">s3d_push_material</link>(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
+ <link linkend="s3d_push_polygons">s3d_push_polygons</link>(oid, pbuf, 1);
  // push one polygon with the pbuf data
-</programlisting></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>l!
 buf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>!
 int <function>s3d_push_textures</function></funcdef><paramdef>!
 int <par
ameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsi!
 sinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <paramete!
 r>object</parameter></paramdef><paramdef>uint32_t <parameter>n!
 </parame
ter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis>!
 <para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>n!
 buf should contain n * 9 float values, for each vertex a norma!
 l vector
 (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp t!
 he last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()         </para></sect2><sect2 id="s3d_pep_material_te!
 xture"><title>s3d_pep_material_texture</title><funcsynopsis><f!
 uncsynop
sisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3!
 d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramd!
 ef></funcprototype></funcsynopsis><para>Alter the latest pushe!
 d line, 
overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter!
 >nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 i!
 d="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_co!
 ords</ti
tle><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parame!
 ter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+</programlisting></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use <link linkend="s3d_push_lines">s3d_push_lines</link>()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef>!
 <paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in <link linkend="s3d_push_line">s3d_push_line</link>().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsyn!
 opsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprotot!
 ype><fun
cdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon!
 </title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcde!
 f>int <function>s3d_pop_texture</function></funcdef><paramdef>!
 int <par
ameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>!
 uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal i!
 nformation. With this, you can achieve smoothed edge effects.<!
 /para><p
ara>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <par!
 ameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its ent!
 ries, which are supplied in the order as in <link linkend="s3d!
 _pep_pol
ygon_tex_coord">s3d_pep_polygon_tex_coord</link>()         </para></sect2><sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with <link linkend="s3d_push_texture">s3d_push_texture</link>()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</p!
 arameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></f!
 uncdef><paramdef>int <parameter>object</parameter></paramdef><!
 paramdef
>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed line, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsi!
 sinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_line_normals">s3d_pep_line_normals</link>(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef!
 ><paramdef>uint16_t <parameter>n</parameter></paramdef></funcp!
 rototype
></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_normals">s3d_pep_polygon_normals</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_t!
 exture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parameter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
         </para></warning></sect2><sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sec!
 t2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&!
 quot; if you move the table around in space. It will also rota!
 te with 
the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
+        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sec!
 t2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from <link linkend="s3d_clone">s3d_clone</link> before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the b!
 ook will &quot;keep on the table&quot; if you move the table a!
 round in
 space. It will also rotate with the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
         </para></warning></sect2><sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags off for object.         </para></sect2><sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.<!
 /para><warning><para>Translation is absolute, not relative!
-</para></warning><programlisting> s3d_translate(object, 2, 0, 0);
- s3d_translate(object, 4, 0, 0);
+</para></warning><programlisting> <link linkend="s3d_translate">s3d_translate</link>(object, 2, 0, 0);
+ <link linkend="s3d_translate">s3d_translate</link>(object, 4, 0, 0);
  // object will end up at 4,0,0 and not 6,0,0!!
 </programlisting></sect2><sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes i!
 t any clearer ;)</para><warning><para>Rotate is absolute, not relative!
-</para></warning><programlisting> s3d_rotate(object, 90,  0, 0);
- s3d_rotate(object, 180, 0, 0);
+</para></warning><programlisting> <link linkend="s3d_rotate">s3d_rotate</link>(object, 90,  0, 0);
+ <link linkend="s3d_rotate">s3d_rotate</link>(object, 180, 0, 0);
  // object will be rotated 180 degrees around the x-axis, not 270 degress!
-</programlisting></sect2><sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative! 
+</programlisting></sect2><sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! <link linkend="s3d_scale">s3d_scale</link> is also absolute, not relative! 
         </para></warning></sect2><sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype></funcsynopsis><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef><paramdef>char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2><sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>This selects a font for the s3d_draw_string() function.</para><warning><para>Of course, you won't forget to togg!
 le it visible, won't you?
-</para></warning><programlisting> s3d_select_font(&quot;vera&quot;); // will use the vera font face
+        </para></warning></sect2><sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef><paramdef>char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2><sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>This selects a font for the <link linkend="s3d_draw_string">s3d_draw_string</link>() function.</para><warning><p!
 ara>Of course, you won't forget to toggle it visible, won't you?
+</para></warning><programlisting> <link linkend="s3d_select_font">s3d_select_font</link>(&quot;vera&quot;); // will use the vera font face
 </programlisting></sect2><sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef><paramdef>float *<parameter>xlen</parameter></paramdef></funcprototype></funcsynopsis><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
  float len;
- s3d_select_font(&quot;vera&quot;);
- s3d_draw_string(str, len);
+ <link linkend="s3d_select_font">s3d_select_font</link>(&quot;vera&quot;);
+ <link linkend="s3d_draw_string">s3d_draw_string</link>(str, len);
 
- // not interested in the length? do that: s3d_draw_string(str, NULL);
-</programlisting></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://!
 en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</param!
 eter>[]</paramdef><paramdef>float <parameter>result_vector</pa!
 rameter>
[]</paramdef></funcprototype></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="!
 s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>!
 const float <parameter>vector1</parameter>[]</paramdef><paramd!
 ef>const
 float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>v!
 oid</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes an event, the argu!
 ment is the pointer to the event which is to be deleted (maybe!
  obtaine
d from s3d_find_event).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling s3d_init()
+ // not interested in the length? do that: <link linkend="s3d_draw_string">s3d_draw_string</link>(str, NULL);
+</programlisting></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://!
 en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</param!
 eter>[]</paramdef><paramdef>float <parameter>result_vector</pa!
 rameter>
[]</paramdef></funcprototype></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="!
 s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>!
 const float <parameter>vector1</parameter>[]</paramdef><paramd!
 ef>const
 float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>v!
 oid</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter>!
 </paramdef></funcprototype></funcsynopsis><para>Deletes an eve!
 nt, the 
argument is the pointer to the event which is to be deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init</link>()
 </para></warning><programlisting> #include &lt;inttypes.h&gt;
 
- void obj_click(struct s3d_evt event)
+ void obj_click(struct <link linkend="structs3d_evt">s3d_evt</link> event)
  {
          printf(&quot;object id %&quot;PRIu32&quot; got clicked&quot;, *((uint32_t *)event-&gt;buf));
  }
  ...
- s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click);
+ <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_NEW_OBJECT, obj_click);
  // this will tell you when a object got clicked
-</programlisting></sect2><sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Clears the callback which is associated with the event.         </para></sect2><sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2><sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d!
 .h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the Callback-function of the event.</para><programlisting> struct s3d_evt e;
+</programlisting></sect2><sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Clears the callback which is associated with the event.         </para></sect2><sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2><sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d!
 .h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the Callback-function of the event.</para><programlisting> struct <link linkend="structs3d_evt">s3d_evt</link> e;
  ...
- s3d_get_callback(S3D_EVENT_KEY)(e);
+ <link linkend="s3d_get_callback">s3d_get_callback</link>(S3D_EVENT_KEY)(e);
  // will call the key-handling function with argument e.
 </programlisting></sect2><sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2><sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.      !
    </para></sect2><sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3d/structs.docbook
===================================================================
--- trunk/Documentation/libs3d/structs.docbook	2008-09-06 21:09:27 UTC (rev 993)
+++ trunk/Documentation/libs3d/structs.docbook	2008-09-06 21:09:32 UTC (rev 994)
@@ -1,16 +1,16 @@
-<sect2 id="structs3d_evt"><title>struct s3d_evt</title><programlisting>struct s3d_evt {
+<sect2 id="structs3d_evt"><title>struct s3d_evt</title><programlisting>struct <link linkend="structs3d_evt">s3d_evt</link> {
 	uint8_t event;
 	int length;
 	char *buf;
-	struct s3d_evt *next;
-}</programlisting><para>This is the event information holder.     </para><variablelist><varlistentry><term>event</term><listitem><para>gives the event type         </para></listitem></varlistentry><varlistentry><term>length</term><listitem><para>gives the length of the buffer *buf         </para></listitem></varlistentry><varlistentry><term>buf</term><listitem><para>is the pointer to the multiple purpose buffer, which will have more specific information about the object         </para></listitem></varlistentry><varlistentry><term>next</term><listitem><para>can be safely ignored ;)         </para></listitem></varlistentry></variablelist></sect2><sect2 id="structmcp_object"><title>struct mcp_object</title><programlisting>struct mcp_object {
+	struct <link linkend="structs3d_evt">s3d_evt</link> *next;
+}</programlisting><para>This is the event information holder.     </para><variablelist><varlistentry><term>event</term><listitem><para>gives the event type         </para></listitem></varlistentry><varlistentry><term>length</term><listitem><para>gives the length of the buffer *buf         </para></listitem></varlistentry><varlistentry><term>buf</term><listitem><para>is the pointer to the multiple purpose buffer, which will have more specific information about the object         </para></listitem></varlistentry><varlistentry><term>next</term><listitem><para>can be safely ignored ;)         </para></listitem></varlistentry></variablelist></sect2><sect2 id="structmcp_object"><title>struct mcp_object</title><programlisting>struct <link linkend="structmcp_object">mcp_object</link> {
 	uint32_t object;
 	float trans_x;
 	float trans_y;
 	float trans_z;
 	float r;
 	char name;
-}</programlisting><para>Deprecated</para><para>don't use, to be removed soon (use struct s3d_but_info). ;)     </para></sect2><sect2 id="structs3d_obj_info"><title>struct s3d_obj_info</title><programlisting>struct s3d_obj_info {
+}</programlisting><para>Deprecated</para><para>don't use, to be removed soon (use struct <link linkend="structs3d_but_info">s3d_but_info</link>). ;)     </para></sect2><sect2 id="structs3d_obj_info"><title>struct s3d_obj_info</title><programlisting>struct <link linkend="structs3d_obj_info">s3d_obj_info</link> {
 	uint32_t object;
 	uint32_t flags;
 	float trans_x;
@@ -22,10 +22,10 @@
 	float scale;
 	float r;
 	char name;
-}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp.</para><para>Special objects like camera, pointer will have the &quot;sys_&quot; prefix in the name and will be named &quot;pointer0&quot;, &quot;pointer1&quot; ... or &quot;cam0&quot;, &quot;cam1&quot; ... For cam object, scale will contain the aspect ratio.     </para></sect2><sect2 id="structs3d_but_info"><title>struct s3d_but_info</title><programlisting>struct s3d_but_info {
+}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp.</para><para>Special objects like camera, pointer will have the &quot;sys_&quot; prefix in the name and will be named &quot;pointer0&quot;, &quot;pointer1&quot; ... or &quot;cam0&quot;, &quot;cam1&quot; ... For cam object, scale will contain the aspect ratio.     </para></sect2><sect2 id="structs3d_but_info"><title>struct s3d_but_info</title><programlisting>struct <link linkend="structs3d_but_info">s3d_but_info</link> {
 	uint8_t button;
 	uint8_t state;
-}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.     </para></sect2><sect2 id="structs3d_key_event"><title>struct s3d_key_event</title><programlisting>struct s3d_key_event {
+}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.     </para></sect2><sect2 id="structs3d_key_event"><title>struct s3d_key_event</title><programlisting>struct <link linkend="structs3d_key_event">s3d_key_event</link> {
 	uint16_t keysym;
 	uint16_t unicode;
 	uint16_t modifier;

Modified: trunk/Documentation/libs3d/typedefs.docbook
===================================================================
--- trunk/Documentation/libs3d/typedefs.docbook	2008-09-06 21:09:27 UTC (rev 993)
+++ trunk/Documentation/libs3d/typedefs.docbook	2008-09-06 21:09:32 UTC (rev 994)
@@ -1 +1 @@
-<sect2 id="s3d_cb"><title>typedef s3d_cb</title><programlisting>typedef int(* s3d_cb)(struct s3d_evt *)</programlisting><para>This defines the callback format. Each callback should return void and take an argument of struct s3d_evt *. Callbacks can be defined with s3d_set_callback().         </para></sect2>
\ No newline at end of file
+<sect2 id="s3d_cb"><title>typedef s3d_cb</title><programlisting>typedef int(* <link linkend="s3d_cb">s3d_cb</link>)(struct <link linkend="structs3d_evt">s3d_evt</link> *)</programlisting><para>This defines the callback format. Each callback should return void and take an argument of struct <link linkend="structs3d_evt">s3d_evt</link> *. Callbacks can be defined with <link linkend="s3d_set_callback">s3d_set_callback</link>().         </para></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3dw/functions.docbook
===================================================================
--- trunk/Documentation/libs3dw/functions.docbook	2008-09-06 21:09:27 UTC (rev 993)
+++ trunk/Documentation/libs3dw/functions.docbook	2008-09-06 21:09:32 UTC (rev 994)
@@ -1,47 +1,47 @@
-<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button * <function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See s3dw_button for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label * <function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface<!
 /parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See s3dw_label for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input * <function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new input-box on the surface with a!
  input width of &quot;width&quot;, the upper left corner at (p!
 osx,posy
) on the surface. The input-box is empty on creation and can be change with s3dw_input_change_text, and received with s3dw_input_gettext</para><para>See s3dw_input for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox * <function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and !
 height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See s3dw_textbox for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char * <function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2><sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></fun!
 csynopsis><para>Change the text in the referenced input-box to!
  the spe
cified text.         </para></sect2><sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2><sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface * <function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quo!
 t;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See s3dw_surface for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget * <function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use s3dw_moveit()</para><programlisting> s3dw_widget *root = s3dw_getroot();
+<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button * <function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_button">s3dw_button</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label * <function>s3dw_label_new</function></funcdef><paramdef>cons!
 t s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_label">s3dw_label</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input * <function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototy!
 pe></funcsynopsis><para>Creates a new input-box on the surface!
  with a 
input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with <link linkend="s3dw_input_change_text">s3dw_input_change_text</link>, and received with <link linkend="s3dw_input_gettext">s3dw_input_gettext</link></para><para>See <link linkend="s3dw_input">s3dw_input</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox * <function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</paramete!
 r></paramdef></funcprototype></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See <link linkend="s3dw_textbox">s3dw_textbox</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char * <function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2><sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisin!
 fo><funcprototype><funcdef>void <function>s3dw_input_change_te!
 xt</func
tion></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced input-box to the specified text.         </para></sect2><sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2><sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface * <function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>t!
 itle</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget * <function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s!
 3dw_getroot">s3dw_getroot</link>();
  // move widget center to (0,5,0). upon creation, it's centered at (0,0,0),
  // so this might move it up
  root-&gt;x=0;
  root-&gt;y=5;
  root-&gt;z=0;
- s3dw_moveit(root);
-</programlisting></sect2><sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <fun!
 ction>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>tex!
 tbox</parameter></paramdef></funcprototype></funcsynopsis><par!
 a>Scroll
s the text in the textbox up by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scro!
 llright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2><sect2 id="s3dw_textbox_change_text"><title>s3dw_te!
 xtbox_change_text</title><funcsynopsis><funcsynopsisinfo>#incl!
 ude &lt;
s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2><sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler.</para><programlisting> // way 1:
- s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dw_handle_click);
+ <link linkend="s3dw_moveit">s3dw_moveit</link>(root);
+</programlisting></sect2><sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Moves/translates the widget as you specified in it's private <link linkend="s3dw_widget">s3dw_widget</link> structure. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinf!
 o><funcprototype><funcdef>void <function>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><pa!
 ramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef>!
 </funcpr
ototype></funcsynopsis><para>Scrolls the text in the textbox up by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_sc!
 rollright"><title>s3dw_textbox_scrollright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2><sect2 id="s3dw_!
 textbox_change_text"><title>s3dw_textbox_change_text</title><f!
 uncsynop
sis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2><sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler.</para><programlisting> // way 1:
+ <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_OBJ_CLICK,<link linkend="s3dw_handle_click">s3dw_handle_click</link>);
 
  // way 2:
  ...
- void click(struct s3d_evt *evt)
+ void click(struct <link linkend="structs3d_evt">s3d_evt</link> *evt)
  {
-         s3dw_handle_click(evt);
+         <link linkend="s3dw_handle_click">s3dw_handle_click</link>(evt);
          ....
          // your own clickhandler code
          ...
  }
  ....
- s3d_set_callback(S3D_EVENT_OBJ_CLICK,click);
+ <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_OBJ_CLICK,click);
 </programlisting></sect2><sect2 id="s3dw_handle_key"><title>s3dw_handle_key</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_key</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;)</para><programlisting> // way 1:
- s3d_set_callback(S3D_EVENT_KEY,s3dw_handle_key);
+ <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_KEY,<link linkend="s3dw_handle_key">s3dw_handle_key</link>);
 
  // way 2:
  ...
- void key(struct s3d_evt *evt)
+ void key(struct <link linkend="structs3d_evt">s3d_evt</link> *evt)
  {
-         s3dw_handle_key(evt);
+         <link linkend="s3dw_handle_key">s3dw_handle_key</link>(evt);
          ....
          // your own keyhandler code
          ...
  }
  ....
- s3d_set_callback(S3D_EVENT_KEY,key);
+ <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_KEY,key);
 </programlisting></sect2><sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2><sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
  static struct timespec t={0.33*1000*1000}; // 33 mili seconds
  void mainloop()
  {
          // keep this in your mainloop. this will do smooth animations for you ...
-         s3dw_ani_mate();
+         <link linkend="s3dw_ani_mate">s3dw_ani_mate</link>();
          nanosleep(&amp;t,NULL);
  }
 
  ....
- s3d_mainloop(mainloop);
+ <link linkend="s3d_mainloop">s3d_mainloop</link>(mainloop);
 </programlisting></sect2>
\ No newline at end of file

Modified: trunk/Documentation/libs3dw/structs.docbook
===================================================================
--- trunk/Documentation/libs3dw/structs.docbook	2008-09-06 21:09:27 UTC (rev 993)
+++ trunk/Documentation/libs3dw/structs.docbook	2008-09-06 21:09:32 UTC (rev 994)
@@ -1,4 +1,4 @@
-<sect2 id="struct_s3dw_style"><title>struct _s3dw_style</title><programlisting>struct _s3dw_style {
+<sect2 id="struct_s3dw_style"><title>struct _s3dw_style</title><programlisting>struct <link linkend="struct_s3dw_style">_s3dw_style</link> {
 	char *name;
 	char *fontface;
 	float surface_mat;
@@ -7,7 +7,7 @@
 	float text_mat;
 	float title_mat;
 	float title_text_mat;
-}</programlisting><para>With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.     </para><variablelist><varlistentry><term>name</term><listitem><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>material for buttonboxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>material for inputfield background         </para></listitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>mate!
 rial for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2><sect2 id="struct_s3dw_widget"><title>struct _s3dw_widget</title><programlisting>struct _s3dw_widget {
+}</programlisting><para>With <link linkend="s3dw_style">s3dw_style</link> you can change the colors/materials of your widgets. materials are in the same as in <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.     </para><variablelist><varlistentry><term>name</term><listitem><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>material for buttonboxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>material for inputfield background         </para></l!
 istitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>material for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2><sect2 id="struct_s3dw_widget"><title>struct _s3dw_widget</title><programlisting>struct <link linkend="struct_s3dw_widget">_s3dw_widget</link> {
 	int type;
 	s3dw_widget *parent;
 	s3dw_style *style;
@@ -33,16 +33,16 @@
 	float rx;
 	float ry;
 	float rz;
-}</programlisting><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2><sect2 id="struct_s3dw_button"><title>struct _s3dw_button</title><programlisting>struct _s3dw_button {
+}</programlisting><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call <link linkend="s3dw_moveit">s3dw_moveit</link> to turn your action reality. Every other widget has this type as first entry, so a simple typecast to <link linkend="s3dw_widget">s3dw_widget</link> will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2><sect2 id="struct_s3dw_button"><title>struct _s3dw_button</title><programlisting>struct <link linkend="struct_s3dw_button">_s3dw_button</link> {
 	s3dw_widget widget;
 	char *text;
 	uint32_t oid_text;
 	s3dw_callback onclick;
-}</programlisting><para>The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.     </para></sect2><sect2 id="struct_s3dw_label"><title>struct _s3dw_label</title><programlisting>struct _s3dw_label {
+}</programlisting><para>The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.     </para></sect2><sect2 id="struct_s3dw_label"><title>struct _s3dw_label</title><programlisting>struct <link linkend="struct_s3dw_label">_s3dw_label</link> {
 	s3dw_widget widget;
 	char *text;
 	s3dw_callback onclick;
-}</programlisting><para>The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_scrollbar"><title>struct _s3dw_scrollbar</title><programlisting>struct _s3dw_scrollbar {
+}</programlisting><para>The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_scrollbar"><title>struct _s3dw_scrollbar</title><programlisting>struct <link linkend="struct_s3dw_scrollbar">_s3dw_scrollbar</link> {
 	s3dw_widget widget;
 	float pos;
 	float max;
@@ -52,7 +52,7 @@
 	int baroid;
 	s3dw_callback lonclick;
 	s3dw_callback ronclick;
-}</programlisting><para>The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.     </para></sect2><sect2 id="struct_s3dw_textbox"><title>struct _s3dw_textbox</title><programlisting>struct _s3dw_textbox {
+}</programlisting><para>The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.     </para></sect2><sect2 id="struct_s3dw_textbox"><title>struct _s3dw_textbox</title><programlisting>struct <link linkend="struct_s3dw_textbox">_s3dw_textbox</link> {
 	s3dw_widget widget;
 	s3dw_scrollbar *scroll_vertical;
 	s3dw_scrollbar *scroll_horizontal;
@@ -62,13 +62,13 @@
 	int window_x;
 	int window_y;
 	s3dw_callback onclick;
-}</programlisting><para>A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.     </para></sect2><sect2 id="struct_s3dw_input"><title>struct _s3dw_input</title><programlisting>struct _s3dw_input {
+}</programlisting><para>A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.     </para></sect2><sect2 id="struct_s3dw_input"><title>struct _s3dw_input</title><programlisting>struct <link linkend="struct_s3dw_input">_s3dw_input</link> {
 	s3dw_widget widget;
 	char *text;
 	uint32_t oid_text;
 	s3dw_callback onclick;
 	s3dw_callback onedit;
-}</programlisting><para>The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_surface"><title>struct _s3dw_surface</title><programlisting>struct _s3dw_surface {
+}</programlisting><para>The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_surface"><title>struct _s3dw_surface</title><programlisting>struct <link linkend="struct_s3dw_surface">_s3dw_surface</link> {
 	s3dw_widget widget;
 	uint32_t oid_title;
 	uint32_t oid_tbar;

Modified: trunk/Documentation/libs3dw/typedefs.docbook
===================================================================
--- trunk/Documentation/libs3dw/typedefs.docbook	2008-09-06 21:09:27 UTC (rev 993)
+++ trunk/Documentation/libs3dw/typedefs.docbook	2008-09-06 21:09:32 UTC (rev 994)
@@ -1,5 +1,5 @@
-<sect2 id="s3dw_widget"><title>typedef s3dw_widget</title><programlisting>typedef struct _s3dw_widget s3dw_widget</programlisting></sect2><sect2 id="s3dw_button"><title>typedef s3dw_button</title><programlisting>typedef struct _s3dw_button s3dw_button</programlisting></sect2><sect2 id="s3dw_label"><title>typedef s3dw_label</title><programlisting>typedef struct _s3dw_label s3dw_label</programlisting></sect2><sect2 id="s3dw_textbox"><title>typedef s3dw_textbox</title><programlisting>typedef struct _s3dw_textbox s3dw_textbox</programlisting></sect2><sect2 id="s3dw_scrollbar"><title>typedef s3dw_scrollbar</title><programlisting>typedef struct _s3dw_scrollbar s3dw_scrollbar</programlisting></sect2><sect2 id="s3dw_input"><title>typedef s3dw_input</title><programlisting>typedef struct _s3dw_input s3dw_input</programlisting></sect2><sect2 id="s3dw_surface"><title>typedef s3dw_surface</title><programlisting>typedef struct _s3dw_surface s3dw_surface</programlisting></sect2><sect2 id=!
 "s3dw_style"><title>typedef s3dw_style</title><programlisting>typedef struct _s3dw_style s3dw_style</programlisting></sect2><sect2 id="s3dw_callback"><title>typedef s3dw_callback</title><programlisting>typedef void(* s3dw_callback)(s3dw_widget *)</programlisting><para>The callback type. Receive the widget which is affected as argument.</para><programlisting> // example
- void my_handler(s3dw_widget *widget)
+<sect2 id="s3dw_widget"><title>typedef s3dw_widget</title><programlisting>typedef struct <link linkend="struct_s3dw_widget">_s3dw_widget</link> <link linkend="s3dw_widget">s3dw_widget</link></programlisting></sect2><sect2 id="s3dw_button"><title>typedef s3dw_button</title><programlisting>typedef struct <link linkend="struct_s3dw_button">_s3dw_button</link> <link linkend="s3dw_button">s3dw_button</link></programlisting></sect2><sect2 id="s3dw_label"><title>typedef s3dw_label</title><programlisting>typedef struct <link linkend="struct_s3dw_label">_s3dw_label</link> <link linkend="s3dw_label">s3dw_label</link></programlisting></sect2><sect2 id="s3dw_textbox"><title>typedef s3dw_textbox</title><programlisting>typedef struct <link linkend="struct_s3dw_textbox">_s3dw_textbox</link> <link linkend="s3dw_textbox">s3dw_textbox</link></programlisting></sect2><sect2 id="s3dw_scrollbar"><title>typedef s3dw_scrollbar</title><programlisting>typedef struct <link linkend="struct_s3dw_scroll!
 bar">_s3dw_scrollbar</link> <link linkend="s3dw_scrollbar">s3dw_scrollbar</link></programlisting></sect2><sect2 id="s3dw_input"><title>typedef s3dw_input</title><programlisting>typedef struct <link linkend="struct_s3dw_input">_s3dw_input</link> <link linkend="s3dw_input">s3dw_input</link></programlisting></sect2><sect2 id="s3dw_surface"><title>typedef s3dw_surface</title><programlisting>typedef struct <link linkend="struct_s3dw_surface">_s3dw_surface</link> <link linkend="s3dw_surface">s3dw_surface</link></programlisting></sect2><sect2 id="s3dw_style"><title>typedef s3dw_style</title><programlisting>typedef struct <link linkend="struct_s3dw_style">_s3dw_style</link> <link linkend="s3dw_style">s3dw_style</link></programlisting></sect2><sect2 id="s3dw_callback"><title>typedef s3dw_callback</title><programlisting>typedef void(* <link linkend="s3dw_callback">s3dw_callback</link>)(<link linkend="s3dw_widget">s3dw_widget</link> *)</programlisting><para>The callback type. Receive !
 the widget which is affected as argument.</para><programlistin!
 g> // ex
ample
+ void my_handler(<link linkend="s3dw_widget">s3dw_widget</link> *widget)
  {
          // do something with the widget
          ...



From lazhur at mail.berlios.de  Mon Sep  8 11:42:18 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 8 Sep 2008 11:42:18 +0200
Subject: [S3d-svn] r995 - in trunk/Documentation: . libs3d libs3dw
Message-ID: <200809080942.m889gIlP028276@sheep.berlios.de>

Author: lazhur
Date: 2008-09-08 11:42:17 +0200 (Mon, 08 Sep 2008)
New Revision: 995

Modified:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/libs3d/structs.docbook
   trunk/Documentation/libs3d/typedefs.docbook
   trunk/Documentation/libs3dw/functions.docbook
   trunk/Documentation/libs3dw/structs.docbook
   trunk/Documentation/libs3dw/typedefs.docbook
Log:
Put every sect2 on a new line in (functions|structs|typedefs).docbook

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-06 21:09:32 UTC (rev 994)
+++ trunk/Documentation/extractdefinitions.py	2008-09-08 09:42:17 UTC (rev 995)
@@ -442,7 +442,7 @@
 		for func in functionlist:
 			sgml = docbook_functions.generate_sgml(func, synopsis)
 			link_refids(sgml, refidlist)
-			cleanml = filter_xmldirectclosed(sgml.toxml())
+			cleanml = filter_xmldirectclosed(sgml.toxml()+'\n')
 			func_file.write(cleanml)
 		func_file.close()
 
@@ -494,7 +494,7 @@
 		for struct in structlist:
 			sgml = docbook_structs.generate_sgml(struct)
 			link_refids(sgml, refidlist)
-			cleanml = filter_xmldirectclosed(sgml.toxml())
+			cleanml = filter_xmldirectclosed(sgml.toxml()+'\n')
 			struct_file.write(cleanml)
 		struct_file.close()
 
@@ -543,7 +543,7 @@
 		for typedef in typedeflist:
 			sgml = docbook_typedefs.generate_sgml(typedef)
 			link_refids(sgml, refidlist)
-			cleanml = filter_xmldirectclosed(sgml.toxml())
+			cleanml = filter_xmldirectclosed(sgml.toxml()+'\n')
 			typedef_file.write(cleanml)
 		typedef_file.close()
 

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-06 21:09:32 UTC (rev 994)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-08 09:42:17 UTC (rev 995)
@@ -1,4 +1,5 @@
-<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in <link linkend="s3d_init">s3d_init</link>())         </para></sect2><sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc,!
  char **argv)
+<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in <link linkend="s3d_init">s3d_init</link>())         </para></sect2>
+<sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
  {
          if (!<link linkend="s3d_init">s3d_init</link>(&amp;argc, &amp;argv, &quot;Hello world&quot;))
          {
@@ -7,18 +8,26 @@
          }
          return(0);
  }
-</programlisting></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Closes the connection and cleares the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop!
 (void)
+</programlisting></sect2>
+<sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Closes the connection and cleares the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2>
+<sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
  {
          usleep(1000); // sleep 1 ms in every cycle
  }
  ...
 
  <link linkend="s3d_mainloop">s3d_mainloop</link>(mainloop());
-</programlisting></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef!
 ><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Push some vertices from an array. that's much better for performing than using <link linkend="s3d_push_vertex">s3d_push_vertex</link>() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
+</programlisting></sect2>
+<sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2>
+<sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Push some vertices from an array. that's much better for performing than using <link linkend="s3d_push_vertex">s3d_push_vertex</link>() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
                       1.0, 2.0, 3.0,
                       3.0, 2.0, 1.0};
  <link linkend="s3d_push_vertices">s3d_push_vertices</link>(object, vertices, 3); // pushing 3 vertices
-</programlisting></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given!
  in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <paramete!
 r>diff_r</parameter></paramdef><paramdef>float <parameter>diff!
 _g</para
meter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See <link linkend="s3d_pep_materials_a">s3d_pep_materials_a</link> if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><!
 paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as <link linkend="s3d_push_material">s3d_push_material</link>, but color has alpha value added. Use <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a bu!
 ffer of Materials. Those Materials are in the format float[n*1!
 2], with

+</programlisting></sect2>
+<sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) !
 color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2>
+<sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See <link linkend="s3d_pep_materials_a">s3d_pep_materials_a</link> if you want to pep more mat!
 erials.         </para></sect2>
+<sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as <lin!
 k linkend="s3d_push_material">s3d_push_material</link>, but color has alpha value added. Use <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() if you have a lot of materials to push.         </para></sect2>
+<sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
 </para><para>mbuf[n*12 + 0-3] - ambience</para><para>mbuf[n*12 + 4-7] - specular</para><para>mbuf[n *12 + 8-11] - diffusion values
 </para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy <link linkend="s3d_push_material_a">s3d_push_material_a</link>() function.</para><programlisting> // each line has r,g,b,a value
  float bla[24]=
@@ -30,14 +39,19 @@
           0, 1, 1, 1};
 
  <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>(object, mbuf, 2); // push a red and a cyan material
-</programlisting></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynop!
 sis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to <link linkend="s3d_pep_material">s3d_pep_material</link> See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed Materials. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() for more information how mbuf should look like. Use <link linkend="s3d_pep_material_a">s3d_pep_material_a</link>() if you only want to alt!
 er the latest material.         </para></sect2><sect2 id="s3d_!
 load_mat
erials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the Material stack. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></par!
 amdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
+</programlisting></sect2>
+<sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the!
  latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to <link linkend="s3d_pep_material">s3d_pep_material</link> See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> if you want to pep more materials.         </para></sect2>
+<sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed Materials. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() for more information how mbuf should look like. Use <link linkend="s3d_pep_material_a">s3d_pep_material_a</link>() if you only want to alter the latest material.         </para></sect2>
+<sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the Material stack. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> for more informatino about the values in mbuf.         </para></sect2>
+<sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 1.0, 0.0, 0.0);
  <link linkend="s3d_push_material">s3d_push_material</link>(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
  <link linkend="s3d_push_polygon">s3d_push_polygon</link>(oid, 0, 1, 2, 0);
  // this will create a red polygon
-</programlisting></sect2><sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>pbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
+</programlisting></sect2>
+<sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>pbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
  int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
@@ -45,28 +59,77 @@
  <link linkend="s3d_push_material">s3d_push_material</link>(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
  <link linkend="s3d_push_polygons">s3d_push_polygons</link>(oid, pbuf, 1);
  // push one polygon with the pbuf data
-</programlisting></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use <link linkend="s3d_push_lines">s3d_push_lines</link>()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef>!
 <paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in <link linkend="s3d_push_line">s3d_push_line</link>().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsyn!
 opsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprotot!
 ype><fun
cdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon!
 </title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcde!
 f>int <function>s3d_pop_texture</function></funcdef><paramdef>!
 int <par
ameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>!
 uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal i!
 nformation. With this, you can achieve smoothed edge effects.<!
 /para><p
ara>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <par!
 ameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its ent!
 ries, which are supplied in the order as in <link linkend="s3d!
 _pep_pol
ygon_tex_coord">s3d_pep_polygon_tex_coord</link>()         </para></sect2><sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with <link linkend="s3d_push_texture">s3d_push_texture</link>()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</p!
 arameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></f!
 uncdef><paramdef>int <parameter>object</parameter></paramdef><!
 paramdef
>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed line, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsi!
 sinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_line_normals">s3d_pep_line_normals</link>(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef!
 ><paramdef>uint16_t <parameter>n</parameter></paramdef></funcp!
 rototype
></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_normals">s3d_pep_polygon_normals</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_t!
 exture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parameter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sec!
 t2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from <link linkend="s3d_clone">s3d_clone</link> before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the b!
 ook will &quot;keep on the table&quot; if you move the table a!
 round in
 space. It will also rotate with the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
-        </para></warning></sect2><sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags off for object.         </para></sect2><sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.<!
 /para><warning><para>Translation is absolute, not relative!
+</programlisting></sect2>
+<sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use <link linkend="s3d_push_lines">s3d_push_lines</link>()         </para></sect2>
+<sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in <link linkend="s3d_push_line">s3d_push_line</link>().         </para></sect2>
+<sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2>
+<sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2>
+<sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2>
+<sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2>
+<sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2>
+<sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2>
+<sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2>
+<sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in total.         </para></sect2>
+<sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.        !
  </para></sect2>
+<sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coor!
 ds</link>()         </para></sect2>
+<sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord</link>()         </para></sect2>
+<sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with <link linkend="s3d_push_texture">s3d_push_texture</link>()         </para></sect2>
+<sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2>
+<sect2 id="s3d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2>
+<sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed line, overwriting with the supplied values.         </para></sect2>
+<sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2>
+<sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_line_normals">s3d_pep_line_normals</link>(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2>
+<sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_normals">s3d_pep_polygon_normals</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
+<sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
+<sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parameter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2>
+<sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2>
+<sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2>
+<sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2>
+<sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from <link linkend="s3d_clone">s3d_clone</link> before.         </para></sect2>
+<sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&quot; if you move the table around in space. It will also rotate with the table etc.         </para></sect2>
+<sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2>
+<sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
+        </para></warning></sect2>
+<sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags off for object.         </para></sect2>
+<sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.</para><warning><para>Translation is absolute, not relative!
 </para></warning><programlisting> <link linkend="s3d_translate">s3d_translate</link>(object, 2, 0, 0);
  <link linkend="s3d_translate">s3d_translate</link>(object, 4, 0, 0);
  // object will end up at 4,0,0 and not 6,0,0!!
-</programlisting></sect2><sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes i!
 t any clearer ;)</para><warning><para>Rotate is absolute, not relative!
+</programlisting></sect2>
+<sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes it any clearer ;)</para><w!
 arning><para>Rotate is absolute, not relative!
 </para></warning><programlisting> <link linkend="s3d_rotate">s3d_rotate</link>(object, 90,  0, 0);
  <link linkend="s3d_rotate">s3d_rotate</link>(object, 180, 0, 0);
  // object will be rotated 180 degrees around the x-axis, not 270 degress!
-</programlisting></sect2><sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! <link linkend="s3d_scale">s3d_scale</link> is also absolute, not relative! 
-        </para></warning></sect2><sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype></funcsynopsis><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2><sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef><paramdef>char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2><sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>This selects a font for the <link linkend="s3d_draw_string">s3d_draw_string</link>() function.</para><warning><p!
 ara>Of course, you won't forget to toggle it visible, won't you?
+</programlisting></sect2>
+<sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! <link linkend="s3d_scale">s3d_scale</link> is also absolute, not relative! 
+        </para></warning></sect2>
+<sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype></funcsynopsis><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+        </para></warning></sect2>
+<sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef><paramdef>char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2>
+<sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>This selects a font for the <link linkend="s3d_draw_string">s3d_draw_string</link>() function.</para><warning><para>Of course, you won't forget to toggle it visible, won't you?
 </para></warning><programlisting> <link linkend="s3d_select_font">s3d_select_font</link>(&quot;vera&quot;); // will use the vera font face
-</programlisting></sect2><sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef><paramdef>float *<parameter>xlen</parameter></paramdef></funcprototype></funcsynopsis><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
+</programlisting></sect2>
+<sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef><paramdef>float *<parameter>xlen</parameter></paramdef></funcprototype></funcsynopsis><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
  float len;
  <link linkend="s3d_select_font">s3d_select_font</link>(&quot;vera&quot;);
  <link linkend="s3d_draw_string">s3d_draw_string</link>(str, len);
 
  // not interested in the length? do that: <link linkend="s3d_draw_string">s3d_draw_string</link>(str, NULL);
-</programlisting></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://!
 en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</param!
 eter>[]</paramdef><paramdef>float <parameter>result_vector</pa!
 rameter>
[]</paramdef></funcprototype></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="!
 s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>!
 const float <parameter>vector1</parameter>[]</paramdef><paramd!
 ef>const
 float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>v!
 oid</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter>!
 </paramdef></funcprototype></funcsynopsis><para>Deletes an eve!
 nt, the 
argument is the pointer to the event which is to be deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init</link>()
+</programlisting></sect2>
+<sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2>
+<sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2>
+<sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
+<sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
+<sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).         </para></sect2>
+<sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init</link>()
 </para></warning><programlisting> #include &lt;inttypes.h&gt;
 
  void obj_click(struct <link linkend="structs3d_evt">s3d_evt</link> event)
@@ -76,8 +139,14 @@
  ...
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_NEW_OBJECT, obj_click);
  // this will tell you when a object got clicked
-</programlisting></sect2><sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Clears the callback which is associated with the event.         </para></sect2><sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2><sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d!
 .h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the Callback-function of the event.</para><programlisting> struct <link linkend="structs3d_evt">s3d_evt</link> e;
+</programlisting></sect2>
+<sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Clears the callback which is associated with the event.         </para></sect2>
+<sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2>
+<sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the Callback-function of the event.</para><programlisting> struct <link linkend="structs3d_evt">s3d_evt</link> e;
  ...
  <link linkend="s3d_get_callback">s3d_get_callback</link>(S3D_EVENT_KEY)(e);
  // will call the key-handling function with argument e.
-</programlisting></sect2><sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2><sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.      !
    </para></sect2><sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>
\ No newline at end of file
+</programlisting></sect2>
+<sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2>
+<sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.         </para></sect2>
+<sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>

Modified: trunk/Documentation/libs3d/structs.docbook
===================================================================
--- trunk/Documentation/libs3d/structs.docbook	2008-09-06 21:09:32 UTC (rev 994)
+++ trunk/Documentation/libs3d/structs.docbook	2008-09-08 09:42:17 UTC (rev 995)
@@ -3,14 +3,16 @@
 	int length;
 	char *buf;
 	struct <link linkend="structs3d_evt">s3d_evt</link> *next;
-}</programlisting><para>This is the event information holder.     </para><variablelist><varlistentry><term>event</term><listitem><para>gives the event type         </para></listitem></varlistentry><varlistentry><term>length</term><listitem><para>gives the length of the buffer *buf         </para></listitem></varlistentry><varlistentry><term>buf</term><listitem><para>is the pointer to the multiple purpose buffer, which will have more specific information about the object         </para></listitem></varlistentry><varlistentry><term>next</term><listitem><para>can be safely ignored ;)         </para></listitem></varlistentry></variablelist></sect2><sect2 id="structmcp_object"><title>struct mcp_object</title><programlisting>struct <link linkend="structmcp_object">mcp_object</link> {
+}</programlisting><para>This is the event information holder.     </para><variablelist><varlistentry><term>event</term><listitem><para>gives the event type         </para></listitem></varlistentry><varlistentry><term>length</term><listitem><para>gives the length of the buffer *buf         </para></listitem></varlistentry><varlistentry><term>buf</term><listitem><para>is the pointer to the multiple purpose buffer, which will have more specific information about the object         </para></listitem></varlistentry><varlistentry><term>next</term><listitem><para>can be safely ignored ;)         </para></listitem></varlistentry></variablelist></sect2>
+<sect2 id="structmcp_object"><title>struct mcp_object</title><programlisting>struct <link linkend="structmcp_object">mcp_object</link> {
 	uint32_t object;
 	float trans_x;
 	float trans_y;
 	float trans_z;
 	float r;
 	char name;
-}</programlisting><para>Deprecated</para><para>don't use, to be removed soon (use struct <link linkend="structs3d_but_info">s3d_but_info</link>). ;)     </para></sect2><sect2 id="structs3d_obj_info"><title>struct s3d_obj_info</title><programlisting>struct <link linkend="structs3d_obj_info">s3d_obj_info</link> {
+}</programlisting><para>Deprecated</para><para>don't use, to be removed soon (use struct <link linkend="structs3d_but_info">s3d_but_info</link>). ;)     </para></sect2>
+<sect2 id="structs3d_obj_info"><title>struct s3d_obj_info</title><programlisting>struct <link linkend="structs3d_obj_info">s3d_obj_info</link> {
 	uint32_t object;
 	uint32_t flags;
 	float trans_x;
@@ -22,12 +24,14 @@
 	float scale;
 	float r;
 	char name;
-}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp.</para><para>Special objects like camera, pointer will have the &quot;sys_&quot; prefix in the name and will be named &quot;pointer0&quot;, &quot;pointer1&quot; ... or &quot;cam0&quot;, &quot;cam1&quot; ... For cam object, scale will contain the aspect ratio.     </para></sect2><sect2 id="structs3d_but_info"><title>struct s3d_but_info</title><programlisting>struct <link linkend="structs3d_but_info">s3d_but_info</link> {
+}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp.</para><para>Special objects like camera, pointer will have the &quot;sys_&quot; prefix in the name and will be named &quot;pointer0&quot;, &quot;pointer1&quot; ... or &quot;cam0&quot;, &quot;cam1&quot; ... For cam object, scale will contain the aspect ratio.     </para></sect2>
+<sect2 id="structs3d_but_info"><title>struct s3d_but_info</title><programlisting>struct <link linkend="structs3d_but_info">s3d_but_info</link> {
 	uint8_t button;
 	uint8_t state;
-}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.     </para></sect2><sect2 id="structs3d_key_event"><title>struct s3d_key_event</title><programlisting>struct <link linkend="structs3d_key_event">s3d_key_event</link> {
+}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.     </para></sect2>
+<sect2 id="structs3d_key_event"><title>struct s3d_key_event</title><programlisting>struct <link linkend="structs3d_key_event">s3d_key_event</link> {
 	uint16_t keysym;
 	uint16_t unicode;
 	uint16_t modifier;
 	uint16_t state;
-}</programlisting></sect2>
\ No newline at end of file
+}</programlisting></sect2>

Modified: trunk/Documentation/libs3d/typedefs.docbook
===================================================================
--- trunk/Documentation/libs3d/typedefs.docbook	2008-09-06 21:09:32 UTC (rev 994)
+++ trunk/Documentation/libs3d/typedefs.docbook	2008-09-08 09:42:17 UTC (rev 995)
@@ -1 +1 @@
-<sect2 id="s3d_cb"><title>typedef s3d_cb</title><programlisting>typedef int(* <link linkend="s3d_cb">s3d_cb</link>)(struct <link linkend="structs3d_evt">s3d_evt</link> *)</programlisting><para>This defines the callback format. Each callback should return void and take an argument of struct <link linkend="structs3d_evt">s3d_evt</link> *. Callbacks can be defined with <link linkend="s3d_set_callback">s3d_set_callback</link>().         </para></sect2>
\ No newline at end of file
+<sect2 id="s3d_cb"><title>typedef s3d_cb</title><programlisting>typedef int(* <link linkend="s3d_cb">s3d_cb</link>)(struct <link linkend="structs3d_evt">s3d_evt</link> *)</programlisting><para>This defines the callback format. Each callback should return void and take an argument of struct <link linkend="structs3d_evt">s3d_evt</link> *. Callbacks can be defined with <link linkend="s3d_set_callback">s3d_set_callback</link>().         </para></sect2>

Modified: trunk/Documentation/libs3dw/functions.docbook
===================================================================
--- trunk/Documentation/libs3dw/functions.docbook	2008-09-06 21:09:32 UTC (rev 994)
+++ trunk/Documentation/libs3dw/functions.docbook	2008-09-08 09:42:17 UTC (rev 995)
@@ -1,11 +1,30 @@
-<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button * <function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_button">s3dw_button</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label * <function>s3dw_label_new</function></funcdef><paramdef>cons!
 t s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_label">s3dw_label</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input * <function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototy!
 pe></funcsynopsis><para>Creates a new input-box on the surface!
  with a 
input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with <link linkend="s3dw_input_change_text">s3dw_input_change_text</link>, and received with <link linkend="s3dw_input_gettext">s3dw_input_gettext</link></para><para>See <link linkend="s3dw_input">s3dw_input</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox * <function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</paramete!
 r></paramdef></funcprototype></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See <link linkend="s3dw_textbox">s3dw_textbox</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char * <function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2><sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisin!
 fo><funcprototype><funcdef>void <function>s3dw_input_change_te!
 xt</func
tion></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced input-box to the specified text.         </para></sect2><sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2><sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface * <function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>t!
 itle</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.         </para></sect2><sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget * <function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s!
 3dw_getroot">s3dw_getroot</link>();
+<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button * <function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_button">s3dw_button</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label * <function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_label">s3dw_label</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input * <function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new input-box on the surface with a input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with <link linkend="s3dw_input_change_text">s3dw_input_change_text</link>, and received with <link linkend="s3dw_input_gettext">s3dw_input_gettext</link></para><para>See <link linkend="s3dw_input">s3dw_input</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox * <function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See <link linkend="s3dw_textbox">s3dw_textbox</link> for information about callbacks which may be defined.         </para></sect!
 2>
+<sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char * <function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2>
+<sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced input-box to the specified text.         </para></sect2>
+<sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2>
+<sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface * <function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget * <function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s3dw_getroot">s3dw_getroot</link>();
  // move widget center to (0,5,0). upon creation, it's centered at (0,0,0),
  // so this might move it up
  root-&gt;x=0;
  root-&gt;y=5;
  root-&gt;z=0;
  <link linkend="s3dw_moveit">s3dw_moveit</link>(root);
-</programlisting></sect2><sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Moves/translates the widget as you specified in it's private <link linkend="s3dw_widget">s3dw_widget</link> structure. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinf!
 o><funcprototype><funcdef>void <function>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2><sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><pa!
 ramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef>!
 </funcpr
ototype></funcsynopsis><para>Scrolls the text in the textbox up by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_sc!
 rollright"><title>s3dw_textbox_scrollright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2><sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2><sect2 id="s3dw_!
 textbox_change_text"><title>s3dw_textbox_change_text</title><f!
 uncsynop
sis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2><sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler.</para><programlisting> // way 1:
+</programlisting></sect2>
+<sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Moves/translates the widget as you specified in it's private <link linkend="s3dw_widget">s3dw_widget</link> structure. Should be casted with S3DWIDGET().         </para></sect2>
+<sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2>
+<sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2>
+<sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2>
+<sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox up by one line, if possible.         </para></sect2>
+<sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2>
+<sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2>
+<sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scrollright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2>
+<sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2>
+<sect2 id="s3dw_textbox_change_text"><title>s3dw_textbox_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2>
+<sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler.</para><programlisting> // way 1:
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_OBJ_CLICK,<link linkend="s3dw_handle_click">s3dw_handle_click</link>);
 
  // way 2:
@@ -19,7 +38,8 @@
  }
  ....
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_OBJ_CLICK,click);
-</programlisting></sect2><sect2 id="s3dw_handle_key"><title>s3dw_handle_key</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_key</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;)</para><programlisting> // way 1:
+</programlisting></sect2>
+<sect2 id="s3dw_handle_key"><title>s3dw_handle_key</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_key</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;)</para><programlisting> // way 1:
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_KEY,<link linkend="s3dw_handle_key">s3dw_handle_key</link>);
 
  // way 2:
@@ -33,7 +53,9 @@
  }
  ....
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_KEY,key);
-</programlisting></sect2><sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2><sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
+</programlisting></sect2>
+<sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2>
+<sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
  static struct timespec t={0.33*1000*1000}; // 33 mili seconds
  void mainloop()
  {
@@ -44,4 +66,4 @@
 
  ....
  <link linkend="s3d_mainloop">s3d_mainloop</link>(mainloop);
-</programlisting></sect2>
\ No newline at end of file
+</programlisting></sect2>

Modified: trunk/Documentation/libs3dw/structs.docbook
===================================================================
--- trunk/Documentation/libs3dw/structs.docbook	2008-09-06 21:09:32 UTC (rev 994)
+++ trunk/Documentation/libs3dw/structs.docbook	2008-09-08 09:42:17 UTC (rev 995)
@@ -7,7 +7,8 @@
 	float text_mat;
 	float title_mat;
 	float title_text_mat;
-}</programlisting><para>With <link linkend="s3dw_style">s3dw_style</link> you can change the colors/materials of your widgets. materials are in the same as in <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.     </para><variablelist><varlistentry><term>name</term><listitem><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>material for buttonboxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>material for inputfield background         </para></l!
 istitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>material for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2><sect2 id="struct_s3dw_widget"><title>struct _s3dw_widget</title><programlisting>struct <link linkend="struct_s3dw_widget">_s3dw_widget</link> {
+}</programlisting><para>With <link linkend="s3dw_style">s3dw_style</link> you can change the colors/materials of your widgets. materials are in the same as in <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.     </para><variablelist><varlistentry><term>name</term><listitem><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>material for buttonboxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>material for inputfield background         </para></l!
 istitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>material for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2>
+<sect2 id="struct_s3dw_widget"><title>struct _s3dw_widget</title><programlisting>struct <link linkend="struct_s3dw_widget">_s3dw_widget</link> {
 	int type;
 	s3dw_widget *parent;
 	s3dw_style *style;
@@ -33,16 +34,19 @@
 	float rx;
 	float ry;
 	float rz;
-}</programlisting><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call <link linkend="s3dw_moveit">s3dw_moveit</link> to turn your action reality. Every other widget has this type as first entry, so a simple typecast to <link linkend="s3dw_widget">s3dw_widget</link> will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2><sect2 id="struct_s3dw_button"><title>struct _s3dw_button</title><programlisting>struct <link linkend="struct_s3dw_button">_s3dw_button</link> {
+}</programlisting><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call <link linkend="s3dw_moveit">s3dw_moveit</link> to turn your action reality. Every other widget has this type as first entry, so a simple typecast to <link linkend="s3dw_widget">s3dw_widget</link> will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2>
+<sect2 id="struct_s3dw_button"><title>struct _s3dw_button</title><programlisting>struct <link linkend="struct_s3dw_button">_s3dw_button</link> {
 	s3dw_widget widget;
 	char *text;
 	uint32_t oid_text;
 	s3dw_callback onclick;
-}</programlisting><para>The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.     </para></sect2><sect2 id="struct_s3dw_label"><title>struct _s3dw_label</title><programlisting>struct <link linkend="struct_s3dw_label">_s3dw_label</link> {
+}</programlisting><para>The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.     </para></sect2>
+<sect2 id="struct_s3dw_label"><title>struct _s3dw_label</title><programlisting>struct <link linkend="struct_s3dw_label">_s3dw_label</link> {
 	s3dw_widget widget;
 	char *text;
 	s3dw_callback onclick;
-}</programlisting><para>The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_scrollbar"><title>struct _s3dw_scrollbar</title><programlisting>struct <link linkend="struct_s3dw_scrollbar">_s3dw_scrollbar</link> {
+}</programlisting><para>The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2>
+<sect2 id="struct_s3dw_scrollbar"><title>struct _s3dw_scrollbar</title><programlisting>struct <link linkend="struct_s3dw_scrollbar">_s3dw_scrollbar</link> {
 	s3dw_widget widget;
 	float pos;
 	float max;
@@ -52,7 +56,8 @@
 	int baroid;
 	s3dw_callback lonclick;
 	s3dw_callback ronclick;
-}</programlisting><para>The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.     </para></sect2><sect2 id="struct_s3dw_textbox"><title>struct _s3dw_textbox</title><programlisting>struct <link linkend="struct_s3dw_textbox">_s3dw_textbox</link> {
+}</programlisting><para>The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.     </para></sect2>
+<sect2 id="struct_s3dw_textbox"><title>struct _s3dw_textbox</title><programlisting>struct <link linkend="struct_s3dw_textbox">_s3dw_textbox</link> {
 	s3dw_widget widget;
 	s3dw_scrollbar *scroll_vertical;
 	s3dw_scrollbar *scroll_horizontal;
@@ -62,15 +67,17 @@
 	int window_x;
 	int window_y;
 	s3dw_callback onclick;
-}</programlisting><para>A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.     </para></sect2><sect2 id="struct_s3dw_input"><title>struct _s3dw_input</title><programlisting>struct <link linkend="struct_s3dw_input">_s3dw_input</link> {
+}</programlisting><para>A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.     </para></sect2>
+<sect2 id="struct_s3dw_input"><title>struct _s3dw_input</title><programlisting>struct <link linkend="struct_s3dw_input">_s3dw_input</link> {
 	s3dw_widget widget;
 	char *text;
 	uint32_t oid_text;
 	s3dw_callback onclick;
 	s3dw_callback onedit;
-}</programlisting><para>The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2><sect2 id="struct_s3dw_surface"><title>struct _s3dw_surface</title><programlisting>struct <link linkend="struct_s3dw_surface">_s3dw_surface</link> {
+}</programlisting><para>The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2>
+<sect2 id="struct_s3dw_surface"><title>struct _s3dw_surface</title><programlisting>struct <link linkend="struct_s3dw_surface">_s3dw_surface</link> {
 	s3dw_widget widget;
 	uint32_t oid_title;
 	uint32_t oid_tbar;
 	char *title;
-}</programlisting><para>A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...     </para></sect2>
\ No newline at end of file
+}</programlisting><para>A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...     </para></sect2>

Modified: trunk/Documentation/libs3dw/typedefs.docbook
===================================================================
--- trunk/Documentation/libs3dw/typedefs.docbook	2008-09-06 21:09:32 UTC (rev 994)
+++ trunk/Documentation/libs3dw/typedefs.docbook	2008-09-08 09:42:17 UTC (rev 995)
@@ -1,7 +1,15 @@
-<sect2 id="s3dw_widget"><title>typedef s3dw_widget</title><programlisting>typedef struct <link linkend="struct_s3dw_widget">_s3dw_widget</link> <link linkend="s3dw_widget">s3dw_widget</link></programlisting></sect2><sect2 id="s3dw_button"><title>typedef s3dw_button</title><programlisting>typedef struct <link linkend="struct_s3dw_button">_s3dw_button</link> <link linkend="s3dw_button">s3dw_button</link></programlisting></sect2><sect2 id="s3dw_label"><title>typedef s3dw_label</title><programlisting>typedef struct <link linkend="struct_s3dw_label">_s3dw_label</link> <link linkend="s3dw_label">s3dw_label</link></programlisting></sect2><sect2 id="s3dw_textbox"><title>typedef s3dw_textbox</title><programlisting>typedef struct <link linkend="struct_s3dw_textbox">_s3dw_textbox</link> <link linkend="s3dw_textbox">s3dw_textbox</link></programlisting></sect2><sect2 id="s3dw_scrollbar"><title>typedef s3dw_scrollbar</title><programlisting>typedef struct <link linkend="struct_s3dw_scroll!
 bar">_s3dw_scrollbar</link> <link linkend="s3dw_scrollbar">s3dw_scrollbar</link></programlisting></sect2><sect2 id="s3dw_input"><title>typedef s3dw_input</title><programlisting>typedef struct <link linkend="struct_s3dw_input">_s3dw_input</link> <link linkend="s3dw_input">s3dw_input</link></programlisting></sect2><sect2 id="s3dw_surface"><title>typedef s3dw_surface</title><programlisting>typedef struct <link linkend="struct_s3dw_surface">_s3dw_surface</link> <link linkend="s3dw_surface">s3dw_surface</link></programlisting></sect2><sect2 id="s3dw_style"><title>typedef s3dw_style</title><programlisting>typedef struct <link linkend="struct_s3dw_style">_s3dw_style</link> <link linkend="s3dw_style">s3dw_style</link></programlisting></sect2><sect2 id="s3dw_callback"><title>typedef s3dw_callback</title><programlisting>typedef void(* <link linkend="s3dw_callback">s3dw_callback</link>)(<link linkend="s3dw_widget">s3dw_widget</link> *)</programlisting><para>The callback type. Receive !
 the widget which is affected as argument.</para><programlistin!
 g> // ex
ample
+<sect2 id="s3dw_widget"><title>typedef s3dw_widget</title><programlisting>typedef struct <link linkend="struct_s3dw_widget">_s3dw_widget</link> <link linkend="s3dw_widget">s3dw_widget</link></programlisting></sect2>
+<sect2 id="s3dw_button"><title>typedef s3dw_button</title><programlisting>typedef struct <link linkend="struct_s3dw_button">_s3dw_button</link> <link linkend="s3dw_button">s3dw_button</link></programlisting></sect2>
+<sect2 id="s3dw_label"><title>typedef s3dw_label</title><programlisting>typedef struct <link linkend="struct_s3dw_label">_s3dw_label</link> <link linkend="s3dw_label">s3dw_label</link></programlisting></sect2>
+<sect2 id="s3dw_textbox"><title>typedef s3dw_textbox</title><programlisting>typedef struct <link linkend="struct_s3dw_textbox">_s3dw_textbox</link> <link linkend="s3dw_textbox">s3dw_textbox</link></programlisting></sect2>
+<sect2 id="s3dw_scrollbar"><title>typedef s3dw_scrollbar</title><programlisting>typedef struct <link linkend="struct_s3dw_scrollbar">_s3dw_scrollbar</link> <link linkend="s3dw_scrollbar">s3dw_scrollbar</link></programlisting></sect2>
+<sect2 id="s3dw_input"><title>typedef s3dw_input</title><programlisting>typedef struct <link linkend="struct_s3dw_input">_s3dw_input</link> <link linkend="s3dw_input">s3dw_input</link></programlisting></sect2>
+<sect2 id="s3dw_surface"><title>typedef s3dw_surface</title><programlisting>typedef struct <link linkend="struct_s3dw_surface">_s3dw_surface</link> <link linkend="s3dw_surface">s3dw_surface</link></programlisting></sect2>
+<sect2 id="s3dw_style"><title>typedef s3dw_style</title><programlisting>typedef struct <link linkend="struct_s3dw_style">_s3dw_style</link> <link linkend="s3dw_style">s3dw_style</link></programlisting></sect2>
+<sect2 id="s3dw_callback"><title>typedef s3dw_callback</title><programlisting>typedef void(* <link linkend="s3dw_callback">s3dw_callback</link>)(<link linkend="s3dw_widget">s3dw_widget</link> *)</programlisting><para>The callback type. Receive the widget which is affected as argument.</para><programlisting> // example
  void my_handler(<link linkend="s3dw_widget">s3dw_widget</link> *widget)
  {
          // do something with the widget
          ...
  }
-</programlisting></sect2>
\ No newline at end of file
+</programlisting></sect2>



From lazhur at mail.berlios.de  Mon Sep  8 11:42:26 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 8 Sep 2008 11:42:26 +0200
Subject: [S3d-svn] r996 - in trunk: Documentation/libs3d
	Documentation/libs3dw Documentation/manpages/man3
	Documentation/manpages/man9 Documentation/server libs3d libs3dw
Message-ID: <200809080942.m889gQcj028298@sheep.berlios.de>

Author: lazhur
Date: 2008-09-08 11:42:24 +0200 (Mon, 08 Sep 2008)
New Revision: 996

Modified:
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/libs3d/libs3d.docbook
   trunk/Documentation/libs3dw/libs3dw.docbook
   trunk/Documentation/libs3dw/structs.docbook
   trunk/Documentation/manpages/man3/s3d_clone.3
   trunk/Documentation/manpages/man3/s3d_find_event.3
   trunk/Documentation/manpages/man3/s3d_init.3
   trunk/Documentation/manpages/man3/s3d_load_materials_a.3
   trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_material.3
   trunk/Documentation/manpages/man3/s3d_pep_material_a.3
   trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_push_line.3
   trunk/Documentation/manpages/man3/s3d_push_lines.3
   trunk/Documentation/manpages/man3/s3d_push_material.3
   trunk/Documentation/manpages/man3/s3d_push_materials_a.3
   trunk/Documentation/manpages/man3/s3d_push_polygon.3
   trunk/Documentation/manpages/man3/s3d_push_texture.3
   trunk/Documentation/manpages/man3/s3d_push_vertex.3
   trunk/Documentation/manpages/man3/s3d_quit.3
   trunk/Documentation/manpages/man9/s3dw_style.9
   trunk/Documentation/manpages/man9/s3dw_surface.9
   trunk/Documentation/manpages/man9/s3dw_widget.9
   trunk/Documentation/server/server.docbook
   trunk/libs3d/event.c
   trunk/libs3d/io.c
   trunk/libs3d/proto_out.c
   trunk/libs3dw/s3dw.h
Log:
Fix smaller spelling mistakes in documentation

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-08 09:42:24 UTC (rev 996)
@@ -1,5 +1,5 @@
 <sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in <link linkend="s3d_init">s3d_init</link>())         </para></sect2>
-<sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
+<sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in server initialization. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
  {
          if (!<link linkend="s3d_init">s3d_init</link>(&amp;argc, &amp;argv, &quot;Hello world&quot;))
          {
@@ -9,7 +9,7 @@
          return(0);
  }
 </programlisting></sect2>
-<sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Closes the connection and cleares the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2>
+<sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Closes the connection and clears the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2>
 <sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
  {
          usleep(1000); // sleep 1 ms in every cycle
@@ -18,16 +18,16 @@
 
  <link linkend="s3d_mainloop">s3d_mainloop</link>(mainloop());
 </programlisting></sect2>
-<sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2>
+<sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a vertex onto the vertex stack. Make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2>
 <sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Push some vertices from an array. that's much better for performing than using <link linkend="s3d_push_vertex">s3d_push_vertex</link>() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
                       1.0, 2.0, 3.0,
                       3.0, 2.0, 1.0};
  <link linkend="s3d_push_vertices">s3d_push_vertices</link>(object, vertices, 3); // pushing 3 vertices
 </programlisting></sect2>
-<sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) !
 color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2>
-<sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See <link linkend="s3d_pep_materials_a">s3d_pep_materials_a</link> if you want to pep more mat!
 erials.         </para></sect2>
+<sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. The material properties are given in rgb (red/green/blue) !
 color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. The diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2>
+<sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed material, overwriting the current value with the specified one. See <link linkend="s3d_pep_materials_a">s3d_pep_materials_a</link> if you want to pep more mat!
 erials.         </para></sect2>
 <sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as <lin!
 k linkend="s3d_push_material">s3d_push_material</link>, but color has alpha value added. Use <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() if you have a lot of materials to push.         </para></sect2>
-<sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
+<sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a buffer of materials. Those materials are in the format float[n*12], with
 </para><para>mbuf[n*12 + 0-3] - ambience</para><para>mbuf[n*12 + 4-7] - specular</para><para>mbuf[n *12 + 8-11] - diffusion values
 </para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy <link linkend="s3d_push_material_a">s3d_push_material_a</link>() function.</para><programlisting> // each line has r,g,b,a value
  float bla[24]=
@@ -38,12 +38,12 @@
           0, 1, 1, 1,
           0, 1, 1, 1};
 
- <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>(object, mbuf, 2); // push a red and a cyan material
+ <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>(object, bla, 2); // push a red and a cyan material
 </programlisting></sect2>
-<sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the!
  latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to <link linkend="s3d_pep_material">s3d_pep_material</link> See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> if you want to pep more materials.         </para></sect2>
-<sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed Materials. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() for more information how mbuf should look like. Use <link linkend="s3d_pep_material_a">s3d_pep_material_a</link>() if you only want to alter the latest material.         </para></sect2>
-<sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the Material stack. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> for more informatino about the values in mbuf.         </para></sect2>
-<sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
+<sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the!
  latest pushed material, overwriting the current value with the specified one, with alpha value in contrast to <link linkend="s3d_pep_material">s3d_pep_material</link> See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> if you want to pep more materials.         </para></sect2>
+<sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed materials. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() for more information how mbuf should look like. Use <link linkend="s3d_pep_material_a">s3d_pep_material_a</link>() if you only want to alter the latest material.         </para></sect2>
+<sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the material stack. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> for more informations about the values in mbuf.         </para></sect2>
+<sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one polygon on the polygon stack of the object. It takes 3 vertex-index numbers and one material material-index-no. as argument.</para><programlisting> int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 1.0, 0.0, 0.0);
@@ -60,17 +60,17 @@
  <link linkend="s3d_push_polygons">s3d_push_polygons</link>(oid, pbuf, 1);
  // push one polygon with the pbuf data
 </programlisting></sect2>
-<sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use <link linkend="s3d_push_lines">s3d_push_lines</link>()         </para></sect2>
-<sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in <link linkend="s3d_push_line">s3d_push_line</link>().         </para></sect2>
-<sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2>
+<sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the line stack of the object. It takes 2 vertex-index-no, and one material material-index-no. as argument. If you have a lot of lines to push, use <link linkend="s3d_push_lines">s3d_push_lines</link>()         </para></sect2>
+<sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the line stack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in <link linkend="s3d_push_line">s3d_push_line</link>().         </para></sect2>
+<sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texture stack.         </para></sect2>
 <sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2>
 <sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2>
 <sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2>
 <sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2>
 <sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2>
 <sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2>
-<sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in total.         </para></sect2>
-<sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.        !
  </para></sect2>
+<sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 vertices for each line so that makes 6 float values per line in total.         </para></sect2>
+<sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 vertices for each Polygon so that makes 9 float values per Polygon in total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.        !
  </para></sect2>
 <sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coor!
 ds</link>()         </para></sect2>
 <sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord</link>()         </para></sect2>
 <sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with <link linkend="s3d_push_texture">s3d_push_texture</link>()         </para></sect2>
@@ -86,7 +86,7 @@
 <sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
         </para></warning></sect2>
 <sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2>
-<sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2>
+<sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already existing object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2>
 <sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from <link linkend="s3d_clone">s3d_clone</link> before.         </para></sect2>
 <sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&quot; if you move the table around in space. It will also rotate with the table etc.         </para></sect2>
 <sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2>
@@ -127,7 +127,7 @@
 <sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
 <sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2>
 <sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
-<sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
+<sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurrence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
 <sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).         </para></sect2>
 <sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init</link>()
 </para></warning><programlisting> #include &lt;inttypes.h&gt;

Modified: trunk/Documentation/libs3d/libs3d.docbook
===================================================================
--- trunk/Documentation/libs3d/libs3d.docbook	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/libs3d/libs3d.docbook	2008-09-08 09:42:24 UTC (rev 996)
@@ -150,7 +150,7 @@
 <sect2 id="s3d_object_flags">
 <title>S3D Object Flags</title>
 <para>
-Objects can have several flags to change their behaviour in the server and can be set with 
+Objects can have several flags to change their behavior in the server and can be set with
 <link linkend="s3d_flags_on">s3d_flags_on()</link> and
 <link linkend="s3d_flags_off">s3d_flags_off()</link>
 <variablelist>
@@ -160,7 +160,7 @@
 Obviously, if this flag is toggled the user can see it, if not it will be hidden. ;)
 </para><para>
 When an object is created it's turned off, so you will be able push your geometry data and
-turn it on after you're done. That avaoids flickering and stuff.
+turn it on after you're done. That avoids flickering and stuff.
 </para></listitem>
 </varlistentry>
 
@@ -191,7 +191,7 @@
 <title>About alpha transparency</title>
 <para>
 Alpha transparency works, but polygons don't get ordered in view direction on the server yet. So please don't
-use this feature yet. If you have an easy idea how to do that with opengl please drop me a line.
+use this feature yet. If you have an easy idea how to do that with OpenGL please drop me a line.
 </para>
 </sect2>
 </sect1>

Modified: trunk/Documentation/libs3dw/libs3dw.docbook
===================================================================
--- trunk/Documentation/libs3dw/libs3dw.docbook	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/libs3dw/libs3dw.docbook	2008-09-08 09:42:24 UTC (rev 996)
@@ -6,7 +6,7 @@
 <sect2 id="gettingstarted_s3dw">
 <title>Getting started</title>
 <para>
-	Assuming you have already read about the lowlevel <link linkend="libs3d">libs3d s3d api</link>, the s3d widget library is 
+	Assuming you have already read about the low level <link linkend="libs3d">libs3d s3d api</link>, the s3d widget library is 
 	build on top of it and should be (hopefully) easy to use as any other widget library.
 	Just include
 	

Modified: trunk/Documentation/libs3dw/structs.docbook
===================================================================
--- trunk/Documentation/libs3dw/structs.docbook	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/libs3dw/structs.docbook	2008-09-08 09:42:24 UTC (rev 996)
@@ -7,7 +7,7 @@
 	float text_mat;
 	float title_mat;
 	float title_text_mat;
-}</programlisting><para>With <link linkend="s3dw_style">s3dw_style</link> you can change the colors/materials of your widgets. materials are in the same as in <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.     </para><variablelist><varlistentry><term>name</term><listitem><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>material for buttonboxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>material for inputfield background         </para></l!
 istitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>material for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2>
+}</programlisting><para>With <link linkend="s3dw_style">s3dw_style</link> you can change the colors/materials of your widgets. materials are in the same as in <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>, that means red,green,blue and alpha float values (between 0.0 and 1.0) for ambience, specular and diffuse color.     </para><variablelist><varlistentry><term>name</term><listitem><para>name of the style ... kind of redundant         </para></listitem></varlistentry><varlistentry><term>fontface</term><listitem><para>font face for all used fonts         </para></listitem></varlistentry><varlistentry><term>surface_mat</term><listitem><para>material for the surface background         </para></listitem></varlistentry><varlistentry><term>input_mat</term><listitem><para>material for button boxes and other widgets         </para></listitem></varlistentry><varlistentry><term>inputback_mat</term><listitem><para>material for input field background         </para><!
 /listitem></varlistentry><varlistentry><term>text_mat</term><listitem><para>material for the text on buttons and inputs         </para></listitem></varlistentry><varlistentry><term>title_mat</term><listitem><para>material for the title bar         </para></listitem></varlistentry><varlistentry><term>title_text_mat</term><listitem><para>material for the text on the title bar         </para></listitem></varlistentry></variablelist></sect2>
 <sect2 id="struct_s3dw_widget"><title>struct _s3dw_widget</title><programlisting>struct <link linkend="struct_s3dw_widget">_s3dw_widget</link> {
 	int type;
 	s3dw_widget *parent;
@@ -34,7 +34,7 @@
 	float rx;
 	float ry;
 	float rz;
-}</programlisting><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call <link linkend="s3dw_moveit">s3dw_moveit</link> to turn your action reality. Every other widget has this type as first entry, so a simple typecast to <link linkend="s3dw_widget">s3dw_widget</link> will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2>
+}</programlisting><para>This is the most basic widget type, it contains all the &quot;general&quot; widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call <link linkend="s3dw_moveit">s3dw_moveit</link> to turn your action reality. Every other widget has this type as first entry, so a simple typecast to <link linkend="s3dw_widget">s3dw_widget</link> will give you the widgets &quot;general&quot; information. For typecast, you may use S3DWIDGET().</para><para>The pointer ptr allows linking to user-specific data structures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.     </para></sect2>
 <sect2 id="struct_s3dw_button"><title>struct _s3dw_button</title><programlisting>struct <link linkend="struct_s3dw_button">_s3dw_button</link> {
 	s3dw_widget widget;
 	char *text;
@@ -80,4 +80,4 @@
 	uint32_t oid_title;
 	uint32_t oid_tbar;
 	char *title;
-}</programlisting><para>A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...     </para></sect2>
+}</programlisting><para>A surface is the window of this widget library, holding all of our elements like buttons, input fields etc ...     </para></sect2>

Modified: trunk/Documentation/manpages/man3/s3d_clone.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -11,5 +11,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.          
+Clones an already existing object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_find_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -11,5 +11,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.          
+Finds the latest occurrence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_init.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_init.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_init.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -13,7 +13,7 @@
 .fi 
 .SH "Description" 
 .PP 
-This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name. 
+This will initialize the s3d-library and the connection to the Server. It will return 0 on success in server initialization. name specifies the your programs name. 
 .PP 
 .nf 
 int main(char argc, char **argv) 

Modified: trunk/Documentation/manpages/man3/s3d_load_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -14,5 +14,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.          
+Loads n materials starting from index position start into the material stack. See s3d_push_materials_a for more informations about the values in mbuf.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -15,5 +15,5 @@
 .PP 
 Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models. 
 .PP 
-nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in total.          
+nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 vertices for each line so that makes 6 float values per line in total.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -20,5 +20,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.          
+Overwriting the latest pushed material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -23,5 +23,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.          
+Overwriting the latest pushed material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -13,5 +13,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.          
+Alters the last n pushed materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -15,5 +15,5 @@
 .PP 
 Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects. 
 .PP 
-nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.          
+nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 vertices for each Polygon so that makes 9 float values per Polygon in total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -14,5 +14,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()          
+Push one line on the line stack of the object. It takes 2 vertex-index-no, and one material material-index-no. as argument. If you have a lot of lines to push, use s3d_push_lines()          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -13,5 +13,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().          
+Pushing n lines on the line stack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -20,5 +20,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.          
+Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. The material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. The diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -13,7 +13,7 @@
 .fi 
 .SH "Description" 
 .PP 
-Pushes a buffer of Materials. Those Materials are in the format float[n*12], with 
+Pushes a buffer of materials. Those materials are in the format float[n*12], with 
 .PP 
 mbuf[n*12 + 0-3] \- ambience 
 .PP 
@@ -33,7 +33,7 @@
 0, 1, 1, 1, 
 0, 1, 1, 1}; 
  
-s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material 
+s3d_push_materials_a(object, bla, 2); // push a red and a cyan material 
 .fi 
 .PP 
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -15,7 +15,7 @@
 .fi 
 .SH "Description" 
 .PP 
-Push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument. 
+Push one polygon on the polygon stack of the object. It takes 3 vertex-index numbers and one material material-index-no. as argument. 
 .PP 
 .nf 
 int oid = s3d_new_object();   // create a new object 

Modified: trunk/Documentation/manpages/man3/s3d_push_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -13,5 +13,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Adds a new texture with height w and height h on the texturestack.          
+Adds a new texture with height w and height h on the texture stack.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_push_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -14,5 +14,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.          
+Pushes a vertex onto the vertex stack. Make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man3/s3d_quit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-08 09:42:24 UTC (rev 996)
@@ -10,5 +10,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Closes the connection and cleares the event-stack. It can also be used to leave the s3d_mainloop().          
+Closes the connection and clears the event-stack. It can also be used to leave the s3d_mainloop().          
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_style.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_style.9	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man9/s3dw_style.9	2008-09-08 09:42:24 UTC (rev 996)
@@ -23,7 +23,7 @@
 .PP 
 .SH "Description" 
 .PP 
-With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience, Specular and Diffuse Color.      
+With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0.0 and 1.0) for ambience, specular and diffuse color.      
 .IP "name" 10 
 name of the style ... kind of redundant          
 .IP "fontface" 10 
@@ -31,9 +31,9 @@
 .IP "surface_mat" 10 
 material for the surface background          
 .IP "input_mat" 10 
-material for buttonboxes and other widgets          
+material for button boxes and other widgets          
 .IP "inputback_mat" 10 
-material for inputfield background          
+material for input field background          
 .IP "text_mat" 10 
 material for the text on buttons and inputs          
 .IP "title_mat" 10 

Modified: trunk/Documentation/manpages/man9/s3dw_surface.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_surface.9	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man9/s3dw_surface.9	2008-09-08 09:42:24 UTC (rev 996)
@@ -19,5 +19,5 @@
 .PP 
 .SH "Description" 
 .PP 
-A surface is the window of this widget library, holding all of our elements like buttons, inputfields etc ...      
+A surface is the window of this widget library, holding all of our elements like buttons, input fields etc ...      
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/manpages/man9/s3dw_widget.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_widget.9	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/manpages/man9/s3dw_widget.9	2008-09-08 09:42:24 UTC (rev 996)
@@ -42,5 +42,5 @@
 .PP 
 This is the most basic widget type, it contains all the "general" widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets "general" information. For typecast, you may use S3DWIDGET(). 
 .PP 
-The pointer ptr allows linking to user-specific datastructures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.      
+The pointer ptr allows linking to user-specific data structures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.      
 .\" created by instant / docbook-to-man

Modified: trunk/Documentation/server/server.docbook
===================================================================
--- trunk/Documentation/server/server.docbook	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/Documentation/server/server.docbook	2008-09-08 09:42:24 UTC (rev 996)
@@ -38,7 +38,7 @@
 left mouse button is for clicking :)
 </para></listitem>
 <listitem><para>
-presse f2 to get in ego-shooter mode :D you can use w,a,s,d for movement now. f2 again to deactivate.
+press f2 to get in ego-shooter mode :D you can use w,a,s,d for movement now. f2 again to deactivate.
 this only works with dot_mcp, the others above work out-of-the box within the server.
 </para></listitem>
 </itemizedlist>

Modified: trunk/libs3d/event.c
===================================================================
--- trunk/libs3d/event.c	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/libs3d/event.c	2008-09-08 09:42:24 UTC (rev 996)
@@ -77,7 +77,7 @@
 
 /** \brief find eevnt on stack
  *
- * Finds the latest occurence of an event, giving the event type as argument.
+ * Finds the latest occurrence of an event, giving the event type as argument.
  * Returns a pointer to struct s3d_evt.
  */
 struct s3d_evt *s3d_find_event(uint8_t event) {

Modified: trunk/libs3d/io.c
===================================================================
--- trunk/libs3d/io.c	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/libs3d/io.c	2008-09-08 09:42:24 UTC (rev 996)
@@ -119,7 +119,7 @@
 /** \brief initialize s3d library
  *
  * This will initialize the s3d-library and the connection to the Server. It
- * will return 0 on success in Server initializion. name specifies the your
+ * will return 0 on success in server initialization. name specifies the your
  * programs name.
  *
  * \code
@@ -192,7 +192,7 @@
 
 /** \brief shutdown s3d library
  *
- * Closes the connection and cleares the event-stack. It can also be used to
+ * Closes the connection and clears the event-stack. It can also be used to
  * leave the s3d_mainloop().
  */
 int s3d_quit(void)

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/libs3d/proto_out.c	2008-09-08 09:42:24 UTC (rev 996)
@@ -56,7 +56,7 @@
 
 /** \brief clone object
  *
- * Clones an already exisiting object. They get just look the same as the
+ * Clones an already existing object. They get just look the same as the
  * parent-object and will change when the parent-object changes. Cloning
  * especially makes sense if you want to use the same object a lot of times.
  * Move and transform is independent from the parent. The function returns the
@@ -127,7 +127,7 @@
 
 /** \brief push vertex
  *
- * Pushes a vertex onto the vertex stack. make sure that you count how many
+ * Pushes a vertex onto the vertex stack. Make sure that you count how many
  * vertices you've pushed because you'll need that for referencing when you push
  * your polygons.
  */
@@ -189,10 +189,10 @@
 /** \brief push material
  *
  * Pushes a material for an object. you will have to count them yourself too,
- * as polygons will ask for the material index number. the material properties
+ * as polygons will ask for the material index number. The material properties
  * are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum,
  * 1.0 is the maximum a color value can be. The specular color is the color
- * which is directly reflected from the light source. the diffuse color is the
+ * which is directly reflected from the light source. The diffuse color is the
  * color which can be seen in the bright side of the object, and the ambience
  * color is the color of the shadow side of the object.
  */
@@ -287,7 +287,7 @@
 
 /** \brief push many materials
  *
- * Pushes a buffer of Materials. Those Materials are in the format float[n*12],
+ * Pushes a buffer of materials. Those materials are in the format float[n*12],
  * with
  * - mbuf[n*12 + 0-3] - ambience
  * - mbuf[n*12 + 4-7] - specular
@@ -307,7 +307,7 @@
  *          0, 1, 1, 1,
  *          0, 1, 1, 1};
  *
- * s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material
+ * s3d_push_materials_a(object, bla, 2); // push a red and a cyan material
  * \endcode
  */
 int s3d_push_materials_a(int object, const float *mbuf, uint16_t n)
@@ -337,8 +337,8 @@
 
 /** \brief push polygon
  *
- * Push one polygon on the polygonstack of the object. it takes 3 vertex-index
- * numbers and one material material-index-nr. as argument.
+ * Push one polygon on the polygon stack of the object. It takes 3 vertex-index
+ * numbers and one material material-index-no. as argument.
  *
  * \code
  * int oid = s3d_new_object();   // create a new object
@@ -372,9 +372,9 @@
 
 /** \brief push line
  *
- * Push one line on the linestack of the object. It takes 2 vertex-index-
- * numbers and one material material-index-nr. as argument. If you have a lot of
- * lines to push, use s3d_push_lines()
+ * Push one line on the line stack of the object. It takes 2 vertex-index-no,
+ * and one material material-index-no. as argument. If you have a lot of lines
+ * to push, use s3d_push_lines()
  */
 int s3d_push_line(int object, uint32_t v1, uint32_t v2, uint32_t material)
 {
@@ -396,7 +396,9 @@
 
 /** \brief push many polygons
  *
- * As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.
+ * As for vertices, you can push arrays of polygons to have greater performance.
+ * The pbuf should contain n polygons which consist of 4 uint32_t values of 3
+ * vertices indices and 1 material index.
  *
  * \code
  * uint32_t pbuf[] = { 0, 1, 2, 0};
@@ -437,7 +439,7 @@
 
 /** \brief push many lines
  *
- * Pushing n lines on the linestack of the object, each lbuf has a size of n*3,
+ * Pushing n lines on the line stack of the object, each lbuf has a size of n*3,
  * each entry has the index number of the first vertex, second vertex and
  * material number just as in s3d_push_line().
  */
@@ -471,7 +473,7 @@
 
 /** \brief push texture
  *
- * Adds a new texture with height w and height h on the texturestack.
+ * Adds a new texture with height w and height h on the texture stack.
  */
 int s3d_push_texture(int object, uint16_t w, uint16_t h)
 {
@@ -596,7 +598,7 @@
 
 /** \brief rewrite material
  *
- * Overwriting the latest pushed Material, overwriting the current value with
+ * Overwriting the latest pushed material, overwriting the current value with
  * the specified one. See s3d_pep_materials_a if you want to pep more materials.
  */
 int s3d_pep_material(int object,
@@ -643,7 +645,7 @@
 
 /** \brief rewrite material with alpha
  *
- * Overwriting the latest pushed Material, overwriting the current value with
+ * Overwriting the latest pushed material, overwriting the current value with
  * the specified one, with alpha value in contrast to s3d_pep_material See
  * s3d_push_materials_a if you want to pep more materials.
  */
@@ -691,7 +693,7 @@
 
 /** \brief rewrite materials with alpha
  *
- * Alters the last n pushed Materials. See s3d_push_materials_a() for more
+ * Alters the last n pushed materials. See s3d_push_materials_a() for more
  * information how mbuf should look like. Use s3d_pep_material_a() if you only
  * want to alter the latest material.
  */
@@ -714,8 +716,8 @@
  * information. With this, you can achieve smoothed edge effects.
  *
  * nbuf should contain n * 9 float values, for each vertex a normal vector
- * (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float
- * values per Polygon in Total. Don't worry if you don't use this, it's kind of
+ * (x,y,z), and you have 3 vertices for each Polygon so that makes 9 float
+ * values per Polygon in total. Don't worry if you don't use this, it's kind of
  * hard to calculate and the server will always use some proper normal values
  * (same for every vertex, calculated by the plane which is defined by the 3
  * points of the polygon.
@@ -741,7 +743,7 @@
  * when you're going to build wireframe models.
  *
  * nbuf should contain n * 6 float values, for each vertex a normal vector
- * (x,y,z), and you have 2 Vertices for each line so that makes 6 float values
+ * (x,y,z), and you have 2 vertices for each line so that makes 6 float values
  * per line in total.
  */
 int s3d_pep_line_normals(int object, const float *nbuf, uint16_t n)
@@ -995,8 +997,8 @@
 
 /** \brief add materials with alpha to polygons
  *
- * Loads n materials starting from index position start into the Material stack.
- * See s3d_push_materials_a for more informatino about the values in mbuf.
+ * Loads n materials starting from index position start into the material stack.
+ * See s3d_push_materials_a for more informations about the values in mbuf.
  */
 int s3d_load_materials_a(int object, const float *mbuf, uint32_t start, uint16_t n)
 {

Modified: trunk/libs3dw/s3dw.h
===================================================================
--- trunk/libs3dw/s3dw.h	2008-09-08 09:42:17 UTC (rev 995)
+++ trunk/libs3dw/s3dw.h	2008-09-08 09:42:24 UTC (rev 996)
@@ -74,15 +74,15 @@
 /**
  * With s3dw_style you can change the colors/materials of your widgets.
  * materials are in the same as in s3d_push_materials_a, that means
- * red,green,blue and alpha float values (between 0.0 and 1.0) for Ambience,
- * Specular and Diffuse Color.
+ * red,green,blue and alpha float values (between 0.0 and 1.0) for ambience,
+ * specular and diffuse color.
  */
 struct _s3dw_style {
 	char *name;     /**< name of the style ... kind of redundant */
 	char *fontface;    /**< font face for all used fonts */
 	float surface_mat[12];  /**< material for the surface background */
-	float input_mat[12];  /**< material for buttonboxes and other widgets */
-	float inputback_mat[12]; /**< material for inputfield background */
+	float input_mat[12];  /**< material for button boxes and other widgets */
+	float inputback_mat[12]; /**< material for input field background */
 	float text_mat[12];   /**< material for the text on buttons and inputs */
 	float title_mat[12];  /**< material for the title bar */
 	float title_text_mat[12]; /**< material for the text on the title bar */
@@ -95,9 +95,9 @@
  * type as first entry, so a simple typecast to s3dw_widget will give you the
  * widgets "general" information. For typecast, you may use S3DWIDGET().
  *
- * The pointer ptr allows linking to user-specific datastructures. That comes in
- * handy if the widget is called back by an event, and the program must now find
- * out on which data the user reacted.
+ * The pointer ptr allows linking to user-specific data structures. That comes
+ * in handy if the widget is called back by an event, and the program must now
+ * find out on which data the user reacted.
  */
  struct _s3dw_widget {
 	/* private .. */
@@ -210,7 +210,7 @@
 
 /**
  * A surface is the window of this widget library, holding all of our elements
- * like buttons, inputfields etc ...
+ * like buttons, input fields etc ...
  */
 struct _s3dw_surface {
 	/* private */



From lazhur at mail.berlios.de  Mon Sep  8 11:42:31 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 8 Sep 2008 11:42:31 +0200
Subject: [S3d-svn] r997 - in trunk: Documentation/libs3dw
	Documentation/manpages/man9 libs3dw
Message-ID: <200809080942.m889gVH8028323@sheep.berlios.de>

Author: lazhur
Date: 2008-09-08 11:42:31 +0200 (Mon, 08 Sep 2008)
New Revision: 997

Modified:
   trunk/Documentation/libs3dw/structs.docbook
   trunk/Documentation/manpages/man9/s3dw_label.9
   trunk/libs3dw/s3dw.h
Log:
Remove documentation about s3dw_label::onedit which does not exist

Modified: trunk/Documentation/libs3dw/structs.docbook
===================================================================
--- trunk/Documentation/libs3dw/structs.docbook	2008-09-08 09:42:24 UTC (rev 996)
+++ trunk/Documentation/libs3dw/structs.docbook	2008-09-08 09:42:31 UTC (rev 997)
@@ -45,7 +45,7 @@
 	s3dw_widget widget;
 	char *text;
 	s3dw_callback onclick;
-}</programlisting><para>The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.     </para></sect2>
+}</programlisting><para>The labels is an label-field where a user may type things. onclick reacts on click in the field.     </para></sect2>
 <sect2 id="struct_s3dw_scrollbar"><title>struct _s3dw_scrollbar</title><programlisting>struct <link linkend="struct_s3dw_scrollbar">_s3dw_scrollbar</link> {
 	s3dw_widget widget;
 	float pos;

Modified: trunk/Documentation/manpages/man9/s3dw_label.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_label.9	2008-09-08 09:42:24 UTC (rev 996)
+++ trunk/Documentation/manpages/man9/s3dw_label.9	2008-09-08 09:42:31 UTC (rev 997)
@@ -18,5 +18,5 @@
 .PP 
 .SH "Description" 
 .PP 
-The labels is an label-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.      
+The labels is an label-field where a user may type things. onclick reacts on click in the field.      
 .\" created by instant / docbook-to-man

Modified: trunk/libs3dw/s3dw.h
===================================================================
--- trunk/libs3dw/s3dw.h	2008-09-08 09:42:24 UTC (rev 996)
+++ trunk/libs3dw/s3dw.h	2008-09-08 09:42:31 UTC (rev 997)
@@ -149,7 +149,7 @@
 
 /**
  * The labels is an label-field where a user may type things. onclick reacts on
- * click in the field, onedit notifies you when someone writes in the field.
+ * click in the field.
  */
 struct _s3dw_label {
 	/* private */



From lazhur at mail.berlios.de  Mon Sep  8 11:42:37 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 8 Sep 2008 11:42:37 +0200
Subject: [S3d-svn] r998 - in trunk: Documentation/libs3d
	Documentation/manpages/man3 libs3d
Message-ID: <200809080942.m889gbZx028346@sheep.berlios.de>

Author: lazhur
Date: 2008-09-08 11:42:36 +0200 (Mon, 08 Sep 2008)
New Revision: 998

Modified:
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/manpages/man3/s3d_load_texture.3
   trunk/libs3d/proto_out.c
Log:
Replace documentation of s3d_load_texture with original version

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-08 09:42:31 UTC (rev 997)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-08 09:42:36 UTC (rev 998)
@@ -81,8 +81,7 @@
 <sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_line_normals">s3d_pep_line_normals</link>(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2>
 <sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_normals">s3d_pep_polygon_normals</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
 <sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
-<sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parameter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
-        </para></warning></sect2>
+<sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parameter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>This will load an 32bit rgba image supplied in data at position xpos,ypos of the texture tex. The image has the width w and height h. This can be used to update only parts of the texture. It's no problem to supply big textures, as the image will be sent to server in fragments. Of course, you will have created the texture with <link linkend="s3d_p!
 ush_texture">s3d_push_texture</link>, have an material assigned to the texture with <link linkend="s3d_pep_material_texture">s3d_pep_material_texture</link>() and have your polygons set sane polygon texture coords using <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord</link>().         </para></sect2>
 <sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
         </para></warning></sect2>
 <sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2>

Modified: trunk/Documentation/manpages/man3/s3d_load_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-08 09:42:31 UTC (rev 997)
+++ trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-08 09:42:36 UTC (rev 998)
@@ -17,12 +17,5 @@
 .fi 
 .SH "Description" 
 .PP 
-Creates a new object, returning the object id. 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-Of course, you won't forget to toggle it visible, won't you?  
- 
-.RE 
+This will load an 32bit rgba image supplied in data at position xpos,ypos of the texture tex. The image has the width w and height h. This can be used to update only parts of the texture. It's no problem to supply big textures, as the image will be sent to server in fragments. Of course, you will have created the texture with s3d_push_texture, have an material assigned to the texture with s3d_pep_material_texture() and have your polygons set sane polygon texture coords using s3d_pep_polygon_tex_coord().          
 .\" created by instant / docbook-to-man

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-09-08 09:42:31 UTC (rev 997)
+++ trunk/libs3d/proto_out.c	2008-09-08 09:42:36 UTC (rev 998)
@@ -1067,9 +1067,13 @@
 
 /** \brief load texture from memory
  *
- * Creates a new object, returning the object id.
- *
- * \remarks Of course, you won't forget to toggle it visible, won't you?
+ * This will load an 32bit rgba image supplied in data at position xpos,ypos of
+ * the texture tex. The image has the width w and height h. This can be used to
+ * update only parts of the texture. It's no problem to supply big textures,
+ * as the image will be sent to server in fragments. Of course, you will have
+ * created the texture with s3d_push_texture, have an material assigned to the
+ * texture with s3d_pep_material_texture() and have your polygons set sane
+ * polygon texture coords using s3d_pep_polygon_tex_coord().
  */
 int s3d_load_texture(int object, uint32_t tex, uint16_t xpos, uint16_t ypos, uint16_t w, uint16_t h, const uint8_t *data)
 {



From lazhur at mail.berlios.de  Mon Sep  8 11:42:43 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Mon, 8 Sep 2008 11:42:43 +0200
Subject: [S3d-svn] r999 - in trunk/Documentation: . libs3d libs3dw
	manpages/man3
Message-ID: <200809080942.m889ghRj028364@sheep.berlios.de>

Author: lazhur
Date: 2008-09-08 11:42:42 +0200 (Mon, 08 Sep 2008)
New Revision: 999

Modified:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/libs3dw/functions.docbook
   trunk/Documentation/manpages/man3/s3d_find_event.3
   trunk/Documentation/manpages/man3/s3d_pop_event.3
   trunk/Documentation/manpages/man3/s3dw_button_new.3
   trunk/Documentation/manpages/man3/s3dw_getroot.3
   trunk/Documentation/manpages/man3/s3dw_input_gettext.3
   trunk/Documentation/manpages/man3/s3dw_input_new.3
   trunk/Documentation/manpages/man3/s3dw_label_new.3
   trunk/Documentation/manpages/man3/s3dw_surface_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_new.3
Log:
Don't add space between * of the return type and the function name in docbook

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/extractdefinitions.py	2008-09-08 09:42:42 UTC (rev 999)
@@ -466,7 +466,10 @@
 		funcprototype = create_append(funcsynopsis, 'funcprototype')
 
 		funcdef = create_append(funcprototype, 'funcdef')
-		create_append_text(funcdef, function['return']+" ")
+		create_append_text(funcdef, function['return'])
+		if function['return'][-1:] != "*":
+				# dont add space between * and name
+				create_append_text(funcdef, " ")
 
 		func = create_append(funcdef, 'function')
 		create_append_text(func, function['name'])
@@ -624,7 +627,10 @@
 		funcprototype = create_append(funcsynopsis, 'funcprototype')
 
 		funcdef = create_append(funcprototype, 'funcdef')
-		create_append_text(funcdef, function['return']+" ")
+		create_append_text(funcdef, function['return'])
+		if function['return'][-1:] != "*":
+				# dont add space between * and name
+				create_append_text(funcdef, " ")
 
 		func = create_append(funcdef, 'function')
 		create_append_text(func, function['name'])

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-08 09:42:42 UTC (rev 999)
@@ -125,8 +125,8 @@
 <sect2 id="s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
 <sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
 <sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2>
-<sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
-<sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurrence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
+<sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_pop_event</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
+<sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurrence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
 <sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).         </para></sect2>
 <sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init</link>()
 </para></warning><programlisting> #include &lt;inttypes.h&gt;

Modified: trunk/Documentation/libs3dw/functions.docbook
===================================================================
--- trunk/Documentation/libs3dw/functions.docbook	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/libs3dw/functions.docbook	2008-09-08 09:42:42 UTC (rev 999)
@@ -1,12 +1,12 @@
-<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button * <function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_button">s3dw_button</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label * <function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_label">s3dw_label</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input * <function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new input-box on the surface with a input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with <link linkend="s3dw_input_change_text">s3dw_input_change_text</link>, and received with <link linkend="s3dw_input_gettext">s3dw_input_gettext</link></para><para>See <link linkend="s3dw_input">s3dw_input</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox * <function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See <link linkend="s3dw_textbox">s3dw_textbox</link> for information about callbacks which may be defined.         </para></sect!
 2>
-<sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char * <function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2>
+<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button *<function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_button">s3dw_button</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label *<function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_label">s3dw_label</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input *<function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new input-box on the surface with a input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with <link linkend="s3dw_input_change_text">s3dw_input_change_text</link>, and received with <link linkend="s3dw_input_gettext">s3dw_input_gettext</link></para><para>See <link linkend="s3dw_input">s3dw_input</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox *<function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See <link linkend="s3dw_textbox">s3dw_textbox</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char *<function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2>
 <sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced input-box to the specified text.         </para></sect2>
 <sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2>
-<sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface * <function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget * <function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s3dw_getroot">s3dw_getroot</link>();
+<sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface *<function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget *<function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s3dw_getroot">s3dw_getroot</link>();
  // move widget center to (0,5,0). upon creation, it's centered at (0,0,0),
  // so this might move it up
  root-&gt;x=0;

Modified: trunk/Documentation/manpages/man3/s3d_find_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3d.h> 
 .sp 1 
-\fBstruct s3d_evt * \fBs3d_find_event\fP\fR( 
+\fBstruct s3d_evt *\fBs3d_find_event\fP\fR( 
 \fB	uint8_t \fBevent\fR\fR); 
 .fi 
 .SH "Description" 

Modified: trunk/Documentation/manpages/man3/s3d_pop_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3d.h> 
 .sp 1 
-\fBstruct s3d_evt * \fBs3d_pop_event\fP\fR(\fBvoid\fR) 
+\fBstruct s3d_evt *\fBs3d_pop_event\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3dw_button_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBs3dw_button * \fBs3dw_button_new\fP\fR( 
+\fBs3dw_button *\fBs3dw_button_new\fP\fR( 
 \fB	const s3dw_surface *\fBsurface\fR\fR, 
 \fB	const char *\fBtext\fR\fR, 
 \fB	float \fBposx\fR\fR, 

Modified: trunk/Documentation/manpages/man3/s3dw_getroot.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBs3dw_widget * \fBs3dw_getroot\fP\fR(\fBvoid\fR) 
+\fBs3dw_widget *\fBs3dw_getroot\fP\fR(\fBvoid\fR) 
 .fi 
 .SH "Description" 
 .PP 

Modified: trunk/Documentation/manpages/man3/s3dw_input_gettext.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBchar * \fBs3dw_input_gettext\fP\fR( 
+\fBchar *\fBs3dw_input_gettext\fP\fR( 
 \fB	s3dw_input *\fBinput\fR\fR); 
 .fi 
 .SH "Description" 

Modified: trunk/Documentation/manpages/man3/s3dw_input_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBs3dw_input * \fBs3dw_input_new\fP\fR( 
+\fBs3dw_input *\fBs3dw_input_new\fP\fR( 
 \fB	const s3dw_surface *\fBsurface\fR\fR, 
 \fB	float \fBwidth\fR\fR, 
 \fB	float \fBposx\fR\fR, 

Modified: trunk/Documentation/manpages/man3/s3dw_label_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBs3dw_label * \fBs3dw_label_new\fP\fR( 
+\fBs3dw_label *\fBs3dw_label_new\fP\fR( 
 \fB	const s3dw_surface *\fBsurface\fR\fR, 
 \fB	const char *\fBtext\fR\fR, 
 \fB	float \fBposx\fR\fR, 

Modified: trunk/Documentation/manpages/man3/s3dw_surface_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBs3dw_surface * \fBs3dw_surface_new\fP\fR( 
+\fBs3dw_surface *\fBs3dw_surface_new\fP\fR( 
 \fB	const char *\fBtitle\fR\fR, 
 \fB	float \fBwidth\fR\fR, 
 \fB	float \fBheight\fR\fR); 

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-08 09:42:36 UTC (rev 998)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-08 09:42:42 UTC (rev 999)
@@ -6,7 +6,7 @@
 .nf 
 #include <s3dw.h> 
 .sp 1 
-\fBs3dw_textbox * \fBs3dw_textbox_new\fP\fR( 
+\fBs3dw_textbox *\fBs3dw_textbox_new\fP\fR( 
 \fB	const s3dw_surface *\fBsurface\fR\fR, 
 \fB	const char *\fBtext\fR\fR, 
 \fB	float \fBposx\fR\fR, 



From dotslash at mail.berlios.de  Fri Sep 26 00:15:00 2008
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Fri, 26 Sep 2008 00:15:00 +0200
Subject: [S3d-svn] r1000 - trunk
Message-ID: <200809252215.m8PMF0fu006011@sheep.berlios.de>

Author: dotslash
Date: 2008-09-26 00:15:00 +0200 (Fri, 26 Sep 2008)
New Revision: 1000

Modified:
   trunk/README
Log:
update README

YAY, revision 1000. ?\227?\130?\132?\227?\129?\163?\227?\129?\159?\227?\128?\156


Modified: trunk/README
===================================================================
--- trunk/README	2008-09-08 09:42:42 UTC (rev 999)
+++ trunk/README	2008-09-25 22:15:00 UTC (rev 1000)
@@ -15,18 +15,16 @@
 1.REASONS
 ---------
 
-There are several reasons for this project, one of the most influencing
-ones is boredem. i'm bored and blessed with too much time, and my gpu is bored
-as well with all this computing power which remains unused on common
-desktops.
+Many people, have been fascinated by 3D Desktops. There were/are projects like
+3dwm and SUNs Looking Glass among others which try to replace your daily 
+boring 2D Desktop. However, 3D GUIs are still hard and uncomfortable to use.
 
-I think a 3d desktop would/could be a very interesting thing (when it works :),
-since it gives so many new possibility's in GUI design (or possibilitys in
-confusing users, depends on readers view).
-there are/were other projects like 3dwm which died somehow (3dwm.org is not
-accessable, for me), and I did not understand it's system thou ... looking
-glass from sun seems to be very interesting too, but I haven't tried it out
-yet ... so my ignorance and stupidity were reasons for this project as well :)
+S3d unfortunately does not change that, but gives you a big playground to try 
+your own ideas of 3D GUIs. With the simple API you can easily implement own 
+interfaces without caring about writing object interaction, model loading or
+3D widgets yourself. Many 3D applications can coexist in the same space 
+(unlike usual OpenGL apps), just as the windows on your screen. And who knows, 
+maybe we can really have a complete usable 3D desktop someday? :)
 
 2.INSTALL
 ---------



From lazhur at mail.berlios.de  Fri Sep 26 00:21:02 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 26 Sep 2008 00:21:02 +0200
Subject: [S3d-svn] r1001 - trunk/server
Message-ID: <200809252221.m8PML2up006607@sheep.berlios.de>

Author: lazhur
Date: 2008-09-26 00:21:01 +0200 (Fri, 26 Sep 2008)
New Revision: 1001

Modified:
   trunk/server/proto.c
   trunk/server/shm.c
   trunk/server/tcp.c
Log:
Read incoming data from aligned address

When mips reads data from a unaligned address a sigbus will be generated.If it
we will read it into a general register the kernel will emulate the read after
noticing the cpu exception, but if we read into a fpu register the program will
receive a sighub and stops. As workaround we read the 8 bit cmd and the 16 bit
length into the input buffer and the user data will be saved to a address
4 bytes or more away from the beginning of the start of te input buffer.
This should be an aligned address. To establish this we use int_least32_t as
reference data type.

Modified: trunk/server/proto.c
===================================================================
--- trunk/server/proto.c	2008-09-25 22:15:00 UTC (rev 1000)
+++ trunk/server/proto.c	2008-09-25 22:21:01 UTC (rev 1001)
@@ -24,9 +24,9 @@
 
 #include "global.h"
 #include "proto.h"
-/* #include <string.h>  / *  memcpy() * / */
 #include <stdlib.h>  /*  malloc() */
 #include <string.h>  /*  strncpy(),memset() */
+#include <stdint.h>
 #ifdef WIN32
 #include <winsock2.h>
 #else
@@ -61,7 +61,7 @@
 		}
 	}
 	length = ntohs(*((uint16_t *)((uint8_t *)pbuf + 1)));
-	cptr = buf = pbuf + 3;
+	cptr = buf = pbuf + sizeof(int_least32_t);
 	/*  if (mcp_oid==-1) s3dprintf(HIGH,"couldn't find mcp-oid for pid %d!",p->id); */
 	switch (command) {
 	case S3D_P_C_INIT:

Modified: trunk/server/shm.c
===================================================================
--- trunk/server/shm.c	2008-09-25 22:15:00 UTC (rev 1000)
+++ trunk/server/shm.c	2008-09-25 22:21:01 UTC (rev 1001)
@@ -42,6 +42,7 @@
 #include <sys/ipc.h>
 #include <sys/shm.h>
 #include <time.h> /* nanosleep() */
+#include <stdint.h>
 
 static struct t_shmcb waiting_comblock;
 
@@ -243,7 +244,7 @@
 			length = ntohs(*((uint16_t *)((uint8_t *)ibuf + 1)));
 			s3dprintf(VLOW, "command %d, length %d", ibuf[0], length);
 			if (length > 0) {
-				shm_readn(dai, ibuf + 3, length);
+				shm_readn(dai, ibuf + sizeof(int_least32_t), length);
 			}
 			prot_com_in(p, ibuf);
 		}

Modified: trunk/server/tcp.c
===================================================================
--- trunk/server/tcp.c	2008-09-25 22:15:00 UTC (rev 1000)
+++ trunk/server/tcp.c	2008-09-25 22:21:01 UTC (rev 1001)
@@ -43,6 +43,7 @@
 #endif
 #include <unistd.h>   /*  read(),write(),getpid(),close() */
 #include <stdlib.h>   /*  malloc(),free() */
+#include <stdint.h>
 
 static int tcp_sockid;
 int tcp_init(void)
@@ -190,7 +191,7 @@
 		length = ntohs(*((uint16_t *)((uint8_t *)ibuf + 1)));
 		s3dprintf(VLOW, "command %d, length %d", ibuf[0], length);
 		if (length > 0) {
-			tcp_readn(p->sockid, ibuf + 3, length);   /*  uint16_t is limited to 65536, so  */
+			tcp_readn(p->sockid, ibuf + sizeof(int_least32_t), length);   /*  uint16_t is limited to 65536, so  */
 			/*  length can't be bigger than that ... lucky */
 		}
 		prot_com_in(p, ibuf);



From lazhur at mail.berlios.de  Fri Sep 26 00:21:16 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 26 Sep 2008 00:21:16 +0200
Subject: [S3d-svn] r1002 - trunk/libs3d
Message-ID: <200809252221.m8PMLGnP006651@sheep.berlios.de>

Author: lazhur
Date: 2008-09-26 00:21:16 +0200 (Fri, 26 Sep 2008)
New Revision: 1002

Modified:
   trunk/libs3d/proto_out.c
Log:
Send S3D_P_C_LOAD_* instead of S3D_PC_PEP_* in s3d_load_* proto functions

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-09-25 22:21:01 UTC (rev 1001)
+++ trunk/libs3d/proto_out.c	2008-09-25 22:21:16 UTC (rev 1002)
@@ -923,7 +923,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)nbuf + i*stepl, flen);
-		net_send(S3D_P_C_PEP_POLY_NORMAL, buf, flen + 8);
+		net_send(S3D_P_C_LOAD_POLY_NORMAL, buf, flen + 8);
 		mstart += stepl;
 	}
 	return(0);
@@ -956,7 +956,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)nbuf + i*stepl, flen);
-		net_send(S3D_P_C_PEP_LINE_NORMAL, buf, flen + 8);
+		net_send(S3D_P_C_LOAD_LINE_NORMAL, buf, flen + 8);
 		mstart += stepl;
 	}
 	return(0);
@@ -989,7 +989,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)tbuf + i*stepl, flen);
-		net_send(S3D_P_C_PEP_POLY_TEXC, buf, flen + 8);
+		net_send(S3D_P_C_LOAD_POLY_TEXC, buf, flen + 8);
 		mstart += stepl;
 	}
 	return(0);
@@ -1022,7 +1022,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)mbuf + i*stepl, flen);
-		net_send(S3D_P_C_PEP_MAT, buf, flen + 8);
+		net_send(S3D_P_C_LOAD_MAT, buf, flen + 8);
 		mstart += stepl;
 	}
 	return(0);



From lazhur at mail.berlios.de  Fri Sep 26 00:21:33 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 26 Sep 2008 00:21:33 +0200
Subject: [S3d-svn] r1003 - in trunk: libs3d server
Message-ID: <200809252221.m8PMLXeD006673@sheep.berlios.de>

Author: lazhur
Date: 2008-09-26 00:21:32 +0200 (Fri, 26 Sep 2008)
New Revision: 1003

Modified:
   trunk/libs3d/proto_in.c
   trunk/libs3d/proto_out.c
   trunk/server/event.c
   trunk/server/mcp.c
   trunk/server/proto.c
Log:
Use floats in network endian byte order

Floats are also affected by the little and big endian byte order. Currently
there is no function available to convert byte in a network safe byte order.
To be sure that both ends can read and write ieee 32 bit floats we can use
ntohl and htonl to convert the byte order of any 32 bit data type.

Modified: trunk/libs3d/proto_in.c
===================================================================
--- trunk/libs3d/proto_in.c	2008-09-25 22:21:16 UTC (rev 1002)
+++ trunk/libs3d/proto_in.c	2008-09-25 22:21:32 UTC (rev 1003)
@@ -28,6 +28,16 @@
 #include <netinet/in.h>  /*  htons(),htonl() */
 #include <errno.h>   /*  errno */
 #include <stdlib.h>   /*  malloc(), free() */
+
+/* convert buffer with floats from network to host endianess */
+static void ntohfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = ntohl(*(uint32_t*)&netfloat[i]);
+	}
+}
+
 /*  this proccesses the commands and pushes s3d-events, or does other things ;) */
 int net_prot_in(uint8_t opcode, uint16_t length, char *buf)
 {
@@ -108,6 +118,7 @@
 				s3devt->length = length;
 				mo = (struct mcp_object *)buf;
 				*((uint32_t *)buf) = ntohl(*((uint32_t *)buf));  /*  revert oid */
+				ntohfb(&mo->trans_x, 4);
 
 				buf[length-1] = '\0';  /*  put a null byte at the end  */
 				/*  for the not so careful users */
@@ -127,6 +138,7 @@
 				oi = (struct s3d_obj_info *)buf;
 				oi->object = ntohl(oi->object);
 				oi->flags = ntohl(oi->flags);
+				ntohfb(&oi->trans_x, 8);
 
 				buf[length-1] = '\0';  /*  put a null byte at the end  */
 				/*  for the not so careful users */

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-09-25 22:21:16 UTC (rev 1002)
+++ trunk/libs3d/proto_out.c	2008-09-25 22:21:32 UTC (rev 1003)
@@ -38,6 +38,15 @@
 
 #define MF_LEN 65530  /*  maximum fragmentation length */
 
+/* convert buffer with floats from host to network endianess */
+static void htonfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = htonl(*(uint32_t*)&netfloat[i]);
+	}
+}
+
 /** \brief create new object
  *
  * Creates a new object, returning the object id.
@@ -145,6 +154,8 @@
 	ptr += sizeof(float);
 	*((float *)ptr) = z;
 	ptr += sizeof(float);
+
+	htonfb((float*)(buf + sizeof(uint32_t)), 3);
 	net_send(S3D_P_C_PUSH_VERTEX, buf, len);
 	return(0);
 }
@@ -180,6 +191,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)vbuf + i*stepl, flen);
+		htonfb((float*)(ptr), flen / 4);
 		net_send(S3D_P_C_PUSH_VERTEX, buf, flen + 4);
 	}
 	/*  free(buf); */
@@ -234,6 +246,7 @@
 	*((float *)ptr) = 1.0;
 	ptr += sizeof(float);
 
+	htonfb((float*)(buf + sizeof(uint32_t)), 12);
 	net_send(S3D_P_C_PUSH_MAT, buf, len);
 	return(0);  /*  nothing yet */
 }
@@ -281,6 +294,7 @@
 	*((float *)ptr) = diff_a;
 	ptr += sizeof(float);
 
+	htonfb((float*)(buf + sizeof(uint32_t)), 12);
 	net_send(S3D_P_C_PUSH_MAT, buf, len);
 	return(0);  /*  nothing yet */
 }
@@ -329,6 +343,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)mbuf + i*stepl, flen);
+		htonfb((float*)(ptr), flen / 4);
 		net_send(S3D_P_C_PUSH_MAT, buf, flen + 4);
 	}
 	/*  free(buf); */
@@ -639,6 +654,7 @@
 	*((float *)ptr) = 1.0;
 	ptr += sizeof(float);
 
+	htonfb((float*)(buf + sizeof(uint32_t)), 12);
 	net_send(S3D_P_C_PEP_MAT, buf, len);
 	return(0);  /*  nothing yet */
 }
@@ -687,6 +703,7 @@
 	*((float *)ptr) = diff_a;
 	ptr += sizeof(float);
 
+	htonfb((float*)(buf + sizeof(uint32_t)), 12);
 	net_send(S3D_P_C_PEP_MAT, buf, len);
 	return(0);  /*  nothing yet */
 }
@@ -706,6 +723,7 @@
 	}
 	*((uint32_t *)buf) = htonl(object);  /*  object id */
 	memcpy(buf + 4, mbuf, 12*n*sizeof(float));
+	htonfb((float*)(buf + sizeof(uint32_t)), n*12);
 	net_send(S3D_P_C_PEP_MAT, buf, n*12*sizeof(float) + 4);
 	return(0);
 }
@@ -731,6 +749,7 @@
 	}
 	*((uint32_t *)buf) = htonl(object);
 	memcpy(buf + 4, nbuf, 9*n*sizeof(float));
+	htonfb((float*)(buf + sizeof(uint32_t)), 9*n);
 	net_send(S3D_P_C_PEP_POLY_NORMAL, (char *)buf, n*9*sizeof(float) + 4);
 	return(0);
 
@@ -755,6 +774,7 @@
 	}
 	*((uint32_t *)buf) = htonl(object);
 	memcpy(buf + 4, nbuf, 6*n*sizeof(float));
+	htonfb((float*)(buf + sizeof(uint32_t)), 6*n);
 	net_send(S3D_P_C_PEP_LINE_NORMAL, (char *)buf, n*6*sizeof(float) + 4);
 	return(0);
 
@@ -778,6 +798,8 @@
 	ptr += sizeof(float);
 	*((float *)ptr) = z;
 	ptr += sizeof(float);
+
+	htonfb((float*)(buf + sizeof(uint32_t)), 3);
 	net_send(S3D_P_C_PEP_VERTEX, buf, len);
 	return(0);
 }
@@ -842,6 +864,7 @@
 	}
 	*((uint32_t *)buf) = htonl(object);
 	memcpy(buf + 4, vbuf, 3*n*sizeof(float));
+	htonfb((float*)(buf + sizeof(uint32_t)), 3*n);
 	net_send(S3D_P_C_PEP_VERTEX, (char *)buf, n*3*sizeof(float) + 4);
 	return(0);
 
@@ -873,6 +896,8 @@
 	ptr += 4;
 	*((float *)ptr) = y3;
 	ptr += 4;
+
+	htonfb((float*)(buf + sizeof(uint32_t)), 6);
 	net_send(S3D_P_C_PEP_POLY_TEXC, (char *)buf, 6*4 + 4);
 	return(0);
 }
@@ -892,6 +917,7 @@
 	}
 	*((uint32_t *)buf) = htonl(object);
 	memcpy(buf + 4, tbuf, 6*n*sizeof(float));
+	htonfb((float*)(buf + sizeof(uint32_t)), 6*n);
 	net_send(S3D_P_C_PEP_POLY_TEXC, (char *)buf, n*6*sizeof(float) + 4);
 	return(0);
 }
@@ -923,6 +949,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)nbuf + i*stepl, flen);
+		htonfb((float*)(ptr), flen / 4);
 		net_send(S3D_P_C_LOAD_POLY_NORMAL, buf, flen + 8);
 		mstart += stepl;
 	}
@@ -956,6 +983,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)nbuf + i*stepl, flen);
+		htonfb((float*)(ptr), flen / 4);
 		net_send(S3D_P_C_LOAD_LINE_NORMAL, buf, flen + 8);
 		mstart += stepl;
 	}
@@ -989,6 +1017,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)tbuf + i*stepl, flen);
+		htonfb((float*)(ptr), flen / 4);
 		net_send(S3D_P_C_LOAD_POLY_TEXC, buf, flen + 8);
 		mstart += stepl;
 	}
@@ -1022,6 +1051,7 @@
 		else
 			flen = (len - i * stepl);
 		memcpy(ptr, (char *)mbuf + i*stepl, flen);
+		htonfb((float*)(ptr), flen / 4);
 		net_send(S3D_P_C_LOAD_MAT, buf, flen + 8);
 		mstart += stepl;
 	}
@@ -1178,6 +1208,8 @@
 	*((float *)ptr) = y;
 	ptr += 4;
 	*((float *)ptr) = z;
+
+	htonfb((float*)(buf + sizeof(uint32_t)), 3);
 	net_send(S3D_P_C_TRANSLATE, buf, len);
 	return(0);
 
@@ -1216,6 +1248,8 @@
 	*((float *)ptr) = y;
 	ptr += 4;
 	*((float *)ptr) = z;
+
+	htonfb((float*)(buf + sizeof(uint32_t)), 3);
 	net_send(S3D_P_C_ROTATE, buf, len);
 	return(0);
 }
@@ -1236,6 +1270,8 @@
 	*((uint32_t *)ptr) = htonl(object);
 	ptr += 4;
 	*((float *)ptr) = s;
+
+	htonfb((float*)(buf + sizeof(uint32_t)), 3);
 	net_send(S3D_P_C_SCALE, buf, len);
 	return(0);
 }

Modified: trunk/server/event.c
===================================================================
--- trunk/server/event.c	2008-09-25 22:21:16 UTC (rev 1002)
+++ trunk/server/event.c	2008-09-25 22:21:32 UTC (rev 1003)
@@ -32,6 +32,15 @@
 #endif
 #include <string.h>  /*  strlen(),strcpy() */
 
+/* convert buffer with floats from host to network endianess */
+static void htonfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = htonl(*(uint32_t*)&netfloat[i]);
+	}
+}
+
 /*  I don't plan to keep this until the end, but it can show us how */
 /*  to interact ... */
 int event_obj_click(struct t_process *p, int32_t oid)
@@ -179,6 +188,7 @@
 			break;
 
 		}
+		htonfb(&mo.trans_x, 8);
 		prot_com_out(p, S3D_P_S_OINFO, (uint8_t *)&mo, sizeof(mo));
 	}
 	return(0);

Modified: trunk/server/mcp.c
===================================================================
--- trunk/server/mcp.c	2008-09-25 22:21:16 UTC (rev 1002)
+++ trunk/server/mcp.c	2008-09-25 22:21:32 UTC (rev 1003)
@@ -31,7 +31,16 @@
 #endif
 #include <string.h>    /*  strncpy() */
 
+/* convert buffer with floats from host to network endianess */
+static void htonfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = htonl(*(uint32_t*)&netfloat[i]);
+	}
+}
 
+
 /*  this interacts with the actual mcp client */
 struct mcp_object {
 	uint32_t object;
@@ -73,6 +82,8 @@
 	mo.trans_y = p->object[mcp_oid]->translate.y;
 	mo.trans_z = p->object[mcp_oid]->translate.z;
 	mo.r = p->object[mcp_oid]->r;
+
+	htonfb(&mo.trans_x, 4);
 	/*  mo.event=MCP_NEW_OBJECT; */
 	ap = get_proc_by_pid(p->object[mcp_oid]->virtual_pid);
 	strncpy(mo.name, ap->name, S3D_NAME_MAX);

Modified: trunk/server/proto.c
===================================================================
--- trunk/server/proto.c	2008-09-25 22:21:16 UTC (rev 1002)
+++ trunk/server/proto.c	2008-09-25 22:21:32 UTC (rev 1003)
@@ -38,6 +38,16 @@
 /*  handle an incoming command from the client .. */
 
 
+/* convert buffer with floats from network to host endianess */
+static void ntohfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = ntohl(*(uint32_t*)&netfloat[i]);
+	}
+}
+
+
 int prot_com_in(struct t_process *p, uint8_t *pbuf)
 {
 	uint8_t  command;
@@ -115,6 +125,7 @@
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 4) / (4 * 3);
+			ntohfb((float *)cptr, num * 3);
 			/*      s3dprintf(LOW,"received %d new vertices for object oid...%d", num, oid); */
 			obj_push_vertex(p, oid, (float  *)cptr, num);
 		}
@@ -124,6 +135,7 @@
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 4) / (4 * 12);
+			ntohfb((float *)cptr, num * 12);
 			/*      s3dprintf(LOW,"received %d new materials for object oid...%d", num, oid); */
 			obj_push_mat(p, oid, (float *)cptr, num);
 		}
@@ -172,6 +184,7 @@
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 4) / (9 * 4);
+			ntohfb((float *)cptr, num * 9);
 			s3dprintf(VLOW, "PEP_POLY_NORMAL[%d]: oid %d, %f polys", length, oid, (length - 4) / (9.0*4.0));
 			obj_pep_poly_normal(p, oid, (float *)cptr, num);
 		}
@@ -181,6 +194,7 @@
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 4) / (6 * 4);
+			ntohfb((float *)cptr, num * 6);
 			s3dprintf(VLOW, "PEP_LINE_NORMAL[%d]: oid %d, %.1f lines", length, oid, (length - 4) / (6.0*4.0));
 			obj_pep_line_normal(p, oid, (float *)cptr, num);
 		}
@@ -190,6 +204,7 @@
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 4) / (6 * 4);
+			ntohfb((float *)cptr, num * 6);
 			s3dprintf(VLOW, "PEP_POLY_TEXC[%d]: oid %d, %f polys", length, oid, (length - 4) / (6.0*4.0));
 			obj_pep_poly_texc(p, oid, (float *)cptr, num);
 		}
@@ -199,6 +214,7 @@
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 4) / (4 * 12);
+			ntohfb((float *)cptr, num * 12);
 			s3dprintf(VLOW, "PEP_MAT[%d]: %d materials for object oid...%d", length, num, oid);
 			obj_pep_mat(p, oid, (float *)cptr, num);
 		}
@@ -208,6 +224,7 @@
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 4) / (4 * 3);
+			ntohfb((float *)cptr, num * 3);
 			s3dprintf(VLOW, "pepping %d new vertices for object oid...%d", num, oid);
 			obj_pep_vertex(p, oid, (float  *)cptr, num);
 		}
@@ -244,6 +261,7 @@
 			toid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 8) / (6 * 4);
+			ntohfb((float *)cptr, num * 6);
 			s3dprintf(VLOW, "LOAD_POLY_NORMAL[%d]: oid %d, %.2f lines", length, oid, (length - 8) / (6.0*4.0));
 			obj_load_line_normal(p, oid, (float *)cptr, toid, num);
 		}
@@ -255,6 +273,7 @@
 			toid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 8) / (9 * 4);
+			ntohfb((float *)cptr, num * 9);
 			s3dprintf(MED, "LOAD_POLY_NORMAL[%d]: oid %d, %f polys", length, oid, (length - 8) / (9.0*4.0));
 			obj_load_poly_normal(p, oid, (float *)cptr, toid, num);
 		}
@@ -266,6 +285,7 @@
 			toid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 8) / (6 * 4);
+			ntohfb((float *)cptr, num * 6);
 			s3dprintf(MED, "LOAD_POLY_TEXC[%d]: oid %d, %f polys", length, oid, (length - 8) / (6.0*4.0));
 			obj_load_poly_texc(p, oid, (float *)cptr, toid, num);
 		}
@@ -277,6 +297,7 @@
 			toid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
 			num = (length - 8) / (4 * 12);
+			ntohfb((float *)cptr, num * 12);
 			s3dprintf(LOW, "LOAD_MAT[%d]: %d materials for object oid...%d", length, num, oid);
 			obj_load_mat(p, oid, (float *)cptr, toid, num);
 		}
@@ -386,6 +407,7 @@
 		if (length >= 16) {
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
+			ntohfb((float *)cptr, 3);
 			obj_translate(p, oid, (float *)cptr);
 		}
 		break;
@@ -393,6 +415,7 @@
 		if (length >= 16) {
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
+			ntohfb((float *)cptr, 3);
 			obj_rotate(p, oid, (float *)cptr);
 		}
 		break;
@@ -400,6 +423,7 @@
 		if (length >= 8) {
 			oid = ntohl(*((uint32_t *)cptr));
 			cptr += 4;
+			ntohfb((float *)cptr, 3);
 			obj_scale(p, oid, *((float *)cptr));
 		}
 		break;



From lazhur at mail.berlios.de  Fri Sep 26 00:21:57 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 26 Sep 2008 00:21:57 +0200
Subject: [S3d-svn] r1004 - in trunk: libs3d server
Message-ID: <200809252221.m8PMLvwm006722@sheep.berlios.de>

Author: lazhur
Date: 2008-09-26 00:21:51 +0200 (Fri, 26 Sep 2008)
New Revision: 1004

Added:
   trunk/libs3d/endian.c
   trunk/server/endian.c
Modified:
   trunk/libs3d/CMakeLists.txt
   trunk/libs3d/proto_in.c
   trunk/libs3d/proto_out.c
   trunk/libs3d/s3dlib.h
   trunk/server/CMakeLists.txt
   trunk/server/event.c
   trunk/server/global.h
   trunk/server/mcp.c
   trunk/server/proto.c
Log:
Simplify block endian conversations

Modified: trunk/libs3d/CMakeLists.txt
===================================================================
--- trunk/libs3d/CMakeLists.txt	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/libs3d/CMakeLists.txt	2008-09-25 22:21:51 UTC (rev 1004)
@@ -2,9 +2,9 @@
 
 set(S3D_LIBRARY_DEPENDENCIES  ${MATH_LIBRARIES} ${G3D_LIBRARIES} ${FONTCONFIG_LIBRARIES} ${FREETYPE_LIBRARIES})
 
-add_library(s3d SHARED callback.c error.c event.c fontselect.c freetype.c
-	io.c modelread.c network.c object_queue.c proto_in.c proto_out.c
-	sei_construct.c sei_misc.c sei_monotone.c sei_tri.c shm.c
+add_library(s3d SHARED callback.c endian.c error.c event.c fontselect.c
+	freetype.c io.c modelread.c network.c object_queue.c proto_in.c
+	proto_out.c sei_construct.c sei_misc.c sei_monotone.c sei_tri.c shm.c
 	shm_ringbuf.c tcp.c vector.c hash.c texture.c)
 target_link_libraries(s3d ${S3D_LIBRARY_DEPENDENCIES})
 set_target_properties(s3d PROPERTIES VERSION ${VERSION} SOVERSION 2)

Added: trunk/libs3d/endian.c
===================================================================
--- trunk/libs3d/endian.c	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/libs3d/endian.c	2008-09-25 22:21:51 UTC (rev 1004)
@@ -0,0 +1,79 @@
+/*
+ * event.c
+ *
+ * Copyright (C) 2004-2008 S3D contributors
+ *
+ * This file is part of s3d, a 3d network display server.
+ * See http://s3d.berlios.de/ for more updates.
+ *
+ * s3d is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * s3d is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with s3d; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include <arpa/inet.h> /*  htonl(),htons() */
+#include <stdint.h>
+
+/* convert buffer with floats from host to network endianess */
+void htonfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = htonl(*(uint32_t*)&netfloat[i]);
+	}
+}
+
+/* convert buffer with floats from network to host endianess */
+void ntohfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = ntohl(*(uint32_t*)&netfloat[i]);
+	}
+}
+
+/* convert buffer with uint32_ts from host to network endianess */
+void htonlb(uint32_t* netint32, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		netint32[i] = htonl(netint32[i]);
+	}
+}
+
+/* convert buffer with uint32_ts from network to host endianess */
+void ntohlb(uint32_t* netint32, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		netint32[i] = ntohl(netint32[i]);
+	}
+}
+
+/* convert buffer with uint16_ts from host to network endianess */
+void htonsb(uint16_t* netint16, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		netint16[i] = htons(netint16[i]);
+	}
+}
+
+/* convert buffer with uint16_ts from network to host endianess */
+void ntohsb(uint16_t* netint16, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		netint16[i] = ntohs(netint16[i]);
+	}
+}

Modified: trunk/libs3d/proto_in.c
===================================================================
--- trunk/libs3d/proto_in.c	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/libs3d/proto_in.c	2008-09-25 22:21:51 UTC (rev 1004)
@@ -29,15 +29,6 @@
 #include <errno.h>   /*  errno */
 #include <stdlib.h>   /*  malloc(), free() */
 
-/* convert buffer with floats from network to host endianess */
-static void ntohfb(float* netfloat, int num)
-{
-	int i;
-	for (i = 0; i < num; i++) {
-		*(uint32_t*)&netfloat[i] = ntohl(*(uint32_t*)&netfloat[i]);
-	}
-}
-
 /*  this proccesses the commands and pushes s3d-events, or does other things ;) */
 int net_prot_in(uint8_t opcode, uint16_t length, char *buf)
 {

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/libs3d/proto_out.c	2008-09-25 22:21:51 UTC (rev 1004)
@@ -38,15 +38,6 @@
 
 #define MF_LEN 65530  /*  maximum fragmentation length */
 
-/* convert buffer with floats from host to network endianess */
-static void htonfb(float* netfloat, int num)
-{
-	int i;
-	for (i = 0; i < num; i++) {
-		*(uint32_t*)&netfloat[i] = htonl(*(uint32_t*)&netfloat[i]);
-	}
-}
-
 /** \brief create new object
  *
  * Creates a new object, returning the object id.

Modified: trunk/libs3d/s3dlib.h
===================================================================
--- trunk/libs3d/s3dlib.h	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/libs3d/s3dlib.h	2008-09-25 22:21:51 UTC (rev 1004)
@@ -172,3 +172,10 @@
 void _s3d_handle_texshm(struct s3d_texshm *tshm);
 int _s3d_load_texture_shm(int object, uint32_t tid, uint16_t xpos, uint16_t ypos, uint16_t w, uint16_t h, const uint8_t *data);
 
+/* endian.c */
+void htonfb(float* netfloat, int num);
+void ntohfb(float* netfloat, int num);
+void htonlb(uint32_t* netint32, int num);
+void ntohlb(uint32_t* netint32, int num);
+void htonsb(uint16_t* netint16, int num);
+void ntohsb(uint16_t* netint16, int num);

Modified: trunk/server/CMakeLists.txt
===================================================================
--- trunk/server/CMakeLists.txt	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/server/CMakeLists.txt	2008-09-25 22:21:51 UTC (rev 1004)
@@ -1,7 +1,7 @@
 include_directories(${s3d_SOURCE_DIR}/libs3d)
 
 # base files
-set(server_src allocate.c cull.c error.c event.c graphics.c
+set(server_src allocate.c cull.c endian.c error.c event.c graphics.c
 	main.c matrix.c mcp.c navigation.c network.c object.c
 	process.c proto.c shm.c	shm_ringbuf.c tcp.c user.c)
 

Added: trunk/server/endian.c
===================================================================
--- trunk/server/endian.c	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/server/endian.c	2008-09-25 22:21:51 UTC (rev 1004)
@@ -0,0 +1,79 @@
+/*
+ * event.c
+ *
+ * Copyright (C) 2004-2008 S3D contributors
+ *
+ * This file is part of s3d, a 3d network display server.
+ * See http://s3d.berlios.de/ for more updates.
+ *
+ * s3d is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * s3d is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with s3d; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include <arpa/inet.h> /*  htonl(),htons() */
+#include <stdint.h>
+
+/* convert buffer with floats from host to network endianess */
+void htonfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = htonl(*(uint32_t*)&netfloat[i]);
+	}
+}
+
+/* convert buffer with floats from network to host endianess */
+void ntohfb(float* netfloat, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		*(uint32_t*)&netfloat[i] = ntohl(*(uint32_t*)&netfloat[i]);
+	}
+}
+
+/* convert buffer with uint32_ts from host to network endianess */
+void htonlb(uint32_t* netint32, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		netint32[i] = htonl(netint32[i]);
+	}
+}
+
+/* convert buffer with uint32_ts from network to host endianess */
+void ntohlb(uint32_t* netint32, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		netint32[i] = ntohl(netint32[i]);
+	}
+}
+
+/* convert buffer with uint16_ts from host to network endianess */
+void htonsb(uint16_t* netint16, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		netint16[i] = htons(netint16[i]);
+	}
+}
+
+/* convert buffer with uint16_ts from network to host endianess */
+void ntohsb(uint16_t* netint16, int num)
+{
+	int i;
+	for (i = 0; i < num; i++) {
+		netint16[i] = ntohs(netint16[i]);
+	}
+}

Modified: trunk/server/event.c
===================================================================
--- trunk/server/event.c	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/server/event.c	2008-09-25 22:21:51 UTC (rev 1004)
@@ -32,15 +32,6 @@
 #endif
 #include <string.h>  /*  strlen(),strcpy() */
 
-/* convert buffer with floats from host to network endianess */
-static void htonfb(float* netfloat, int num)
-{
-	int i;
-	for (i = 0; i < num; i++) {
-		*(uint32_t*)&netfloat[i] = htonl(*(uint32_t*)&netfloat[i]);
-	}
-}
-
 /*  I don't plan to keep this until the end, but it can show us how */
 /*  to interact ... */
 int event_obj_click(struct t_process *p, int32_t oid)

Modified: trunk/server/global.h
===================================================================
--- trunk/server/global.h	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/server/global.h	2008-09-25 22:21:51 UTC (rev 1004)
@@ -397,3 +397,11 @@
 #define free(x)   debugFree(x);
 #define realloc(x,y) debugRealloc(x,y,42)
 #endif
+
+/* endian.c */
+void htonfb(float* netfloat, int num);
+void ntohfb(float* netfloat, int num);
+void htonlb(uint32_t* netint32, int num);
+void ntohlb(uint32_t* netint32, int num);
+void htonsb(uint16_t* netint16, int num);
+void ntohsb(uint16_t* netint16, int num);

Modified: trunk/server/mcp.c
===================================================================
--- trunk/server/mcp.c	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/server/mcp.c	2008-09-25 22:21:51 UTC (rev 1004)
@@ -31,16 +31,6 @@
 #endif
 #include <string.h>    /*  strncpy() */
 
-/* convert buffer with floats from host to network endianess */
-static void htonfb(float* netfloat, int num)
-{
-	int i;
-	for (i = 0; i < num; i++) {
-		*(uint32_t*)&netfloat[i] = htonl(*(uint32_t*)&netfloat[i]);
-	}
-}
-
-
 /*  this interacts with the actual mcp client */
 struct mcp_object {
 	uint32_t object;

Modified: trunk/server/proto.c
===================================================================
--- trunk/server/proto.c	2008-09-25 22:21:32 UTC (rev 1003)
+++ trunk/server/proto.c	2008-09-25 22:21:51 UTC (rev 1004)
@@ -37,17 +37,6 @@
 int focus_oid = -1;  /*  initially focus the pid */
 /*  handle an incoming command from the client .. */
 
-
-/* convert buffer with floats from network to host endianess */
-static void ntohfb(float* netfloat, int num)
-{
-	int i;
-	for (i = 0; i < num; i++) {
-		*(uint32_t*)&netfloat[i] = ntohl(*(uint32_t*)&netfloat[i]);
-	}
-}
-
-
 int prot_com_in(struct t_process *p, uint8_t *pbuf)
 {
 	uint8_t  command;
@@ -146,9 +135,7 @@
 			cptr += 4;
 			num = (length - 4) / (4 * 4);
 			/*      s3dprintf(LOW,"received %d new polygons for object oid...%d", num, oid); */
-			for (i = 0;i < (num*4);i++)
-				*((uint32_t *)cptr + i) =
-				        ntohl(*((uint32_t *)cptr + i));
+			ntohlb((uint32_t *)cptr, num*4);
 			/*  convert index names */
 			obj_push_poly(p, oid, (uint32_t *)cptr, num);
 		}
@@ -159,9 +146,7 @@
 			cptr += 4;
 			num = (length - 4) / (4 * 3);
 			s3dprintf(VLOW, "received %d new lines for object oid...%d", num, oid);
-			for (i = 0;i < (num*3);i++)
-				*((uint32_t *)cptr + i) =
-				        ntohl(*((uint32_t *)cptr + i));
+			ntohlb((uint32_t *)cptr, num*3);
 			/*  convert index names */
 			obj_push_line(p, oid, (uint32_t *)cptr, num);
 		}
@@ -172,9 +157,7 @@
 			cptr += 4;
 			num = (length - 4) / (2 * 2);
 			s3dprintf(LOW, "received %d new textures for object oid...%d", num, oid);
-			for (i = 0;i < (num*2);i++)
-				*((uint16_t *)cptr + i) =
-				        ntohs(*((uint16_t *)cptr + i));
+			ntohsb((uint16_t *)cptr , num*2);
 			/*  convert index names */
 			obj_push_tex(p, oid, (uint16_t *)cptr, num);
 		}
@@ -236,9 +219,7 @@
 			cptr += 4;
 			num = (length - 4) / (4);
 			s3dprintf(VLOW, "PEP_MAT_TEX[%d]: %d materials for object oid...%d", length, num, oid);
-			for (i = 0;i < num;i++)
-				*((uint32_t *)cptr + i) =
-				        ntohl(*((uint32_t *)cptr + i));
+			ntohlb((uint32_t *)cptr, num);
 			obj_pep_mat_tex(p, oid, (uint32_t *)cptr, num);
 		}
 		break;
@@ -248,9 +229,7 @@
 			cptr += 4;
 			num = (length - 4) / (4 * 3);
 			s3dprintf(VLOW, "pepping %d new lines for object oid...%d", num, oid);
-			for (i = 0;i < (num*3);i++)
-				*((uint32_t *)cptr + i) =
-				        ntohl(*((uint32_t *)cptr + i));
+			ntohlb((uint32_t *)cptr, num*3);
 			obj_pep_line(p, oid, (uint32_t *)cptr, num);
 		}
 		break;



From lazhur at mail.berlios.de  Fri Sep 26 00:22:15 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 26 Sep 2008 00:22:15 +0200
Subject: [S3d-svn] r1005 - in trunk: experimental/testvis libs3d server
Message-ID: <200809252222.m8PMMFDd006853@sheep.berlios.de>

Author: lazhur
Date: 2008-09-26 00:22:14 +0200 (Fri, 26 Sep 2008)
New Revision: 1005

Modified:
   trunk/experimental/testvis/testvis.c
   trunk/libs3d/modelread.c
   trunk/libs3d/proto_out.c
   trunk/server/proto.c
Log:
Remove dead stores

Modified: trunk/experimental/testvis/testvis.c
===================================================================
--- trunk/experimental/testvis/testvis.c	2008-09-25 22:21:51 UTC (rev 1004)
+++ trunk/experimental/testvis/testvis.c	2008-09-25 22:22:14 UTC (rev 1005)
@@ -218,7 +218,7 @@
 			t->active = 1;
 			t->next = head->next;
 			head->next = t;
-		} else if ((tmp_buffer = strstr(buffer, "list")) != NULL) {
+		} else if (strstr(buffer, "list") != NULL) {
 
 			list_data(head, z);
 
@@ -240,7 +240,7 @@
 			tmp_buffer += 4;
 			act_data(atoi(tmp_buffer), head, z);
 
-		} else if ((tmp_buffer = strstr(buffer, "quit")) != NULL) {
+		} else if (strstr(buffer, "quit") != NULL) {
 
 			break;
 

Modified: trunk/libs3d/modelread.c
===================================================================
--- trunk/libs3d/modelread.c	2008-09-25 22:21:51 UTC (rev 1004)
+++ trunk/libs3d/modelread.c	2008-09-25 22:22:14 UTC (rev 1005)
@@ -257,7 +257,6 @@
 				s3d_push_polygons(obj_id, polybuf, npoly);
 				if (oldflags & G3D_FLAG_FAC_NORMALS)  s3d_pep_polygon_normals(obj_id, normalbuf,   npoly);
 				if (oldflags & G3D_FLAG_FAC_TEXMAP)   s3d_pep_polygon_tex_coords(obj_id, texcoordbuf, npoly);
-				npoly = 0;
 			}
 
 			voff += object->vertex_count; /* increase vertex offset */

Modified: trunk/libs3d/proto_out.c
===================================================================
--- trunk/libs3d/proto_out.c	2008-09-25 22:21:51 UTC (rev 1004)
+++ trunk/libs3d/proto_out.c	2008-09-25 22:22:14 UTC (rev 1005)
@@ -144,7 +144,6 @@
 	*((float *)ptr) = y;
 	ptr += sizeof(float);
 	*((float *)ptr) = z;
-	ptr += sizeof(float);
 
 	htonfb((float*)(buf + sizeof(uint32_t)), 3);
 	net_send(S3D_P_C_PUSH_VERTEX, buf, len);
@@ -235,7 +234,6 @@
 	*((float *)ptr) = diff_b;
 	ptr += sizeof(float);
 	*((float *)ptr) = 1.0;
-	ptr += sizeof(float);
 
 	htonfb((float*)(buf + sizeof(uint32_t)), 12);
 	net_send(S3D_P_C_PUSH_MAT, buf, len);
@@ -283,7 +281,6 @@
 	*((float *)ptr) = diff_b;
 	ptr += sizeof(float);
 	*((float *)ptr) = diff_a;
-	ptr += sizeof(float);
 
 	htonfb((float*)(buf + sizeof(uint32_t)), 12);
 	net_send(S3D_P_C_PUSH_MAT, buf, len);
@@ -370,7 +367,6 @@
 	*((uint32_t *)ptr) = htonl(v3);
 	ptr += sizeof(uint32_t);
 	*((uint32_t *)ptr) = htonl(material);
-	ptr += sizeof(uint32_t);
 
 	net_send(S3D_P_C_PUSH_POLY, buf, len);
 	return(0);
@@ -394,7 +390,6 @@
 	*((uint32_t *)ptr) = htonl(v2);
 	ptr += sizeof(uint32_t);
 	*((uint32_t *)ptr) = htonl(material);
-	ptr += sizeof(uint32_t);
 
 	net_send(S3D_P_C_PUSH_LINE, buf, len);
 	return(0);
@@ -643,7 +638,6 @@
 	*((float *)ptr) = diff_b;
 	ptr += sizeof(float);
 	*((float *)ptr) = 1.0;
-	ptr += sizeof(float);
 
 	htonfb((float*)(buf + sizeof(uint32_t)), 12);
 	net_send(S3D_P_C_PEP_MAT, buf, len);
@@ -692,7 +686,6 @@
 	*((float *)ptr) = diff_b;
 	ptr += sizeof(float);
 	*((float *)ptr) = diff_a;
-	ptr += sizeof(float);
 
 	htonfb((float*)(buf + sizeof(uint32_t)), 12);
 	net_send(S3D_P_C_PEP_MAT, buf, len);
@@ -788,7 +781,6 @@
 	*((float *)ptr) = y;
 	ptr += sizeof(float);
 	*((float *)ptr) = z;
-	ptr += sizeof(float);
 
 	htonfb((float*)(buf + sizeof(uint32_t)), 3);
 	net_send(S3D_P_C_PEP_VERTEX, buf, len);
@@ -811,7 +803,6 @@
 	*((uint32_t *)ptr) = htonl(v2);
 	ptr += sizeof(uint32_t);
 	*((uint32_t *)ptr) = htonl(material);
-	ptr += sizeof(uint32_t);
 
 	net_send(S3D_P_C_PEP_LINE, buf, len);
 	return(0);
@@ -874,19 +865,18 @@
 	char *ptr, buf[4*6+4];
 	ptr = buf;
 	*((uint32_t *)buf) = htonl(object);
-	ptr += 4;
+	ptr += sizeof(uint32_t);
 	*((float *)ptr) = x1;
-	ptr += 4;
+	ptr += sizeof(float);
 	*((float *)ptr) = y1;
-	ptr += 4;
+	ptr += sizeof(float);
 	*((float *)ptr) = x2;
-	ptr += 4;
+	ptr += sizeof(float);
 	*((float *)ptr) = y2;
-	ptr += 4;
+	ptr += sizeof(float);
 	*((float *)ptr) = x3;
-	ptr += 4;
+	ptr += sizeof(float);
 	*((float *)ptr) = y3;
-	ptr += 4;
 
 	htonfb((float*)(buf + sizeof(uint32_t)), 6);
 	net_send(S3D_P_C_PEP_POLY_TEXC, (char *)buf, 6*4 + 4);
@@ -1061,7 +1051,7 @@
 	*((uint32_t *)ptr) = htonl(object);
 	ptr += sizeof(uint32_t);  /*  object id */
 	*((uint32_t *)ptr) = htonl(tex);
-	ptr += sizeof(uint32_t);   /*  texture index numer */
+
 	net_send(S3D_P_C_PEP_MAT_TEX, buf, 8);
 	return(0);
 }
@@ -1080,7 +1070,7 @@
 	*((uint16_t *)ptr) = htons(w);
 	ptr += sizeof(uint16_t);  /*  width */
 	*((uint16_t *)ptr) = htons(h);
-	ptr += sizeof(uint16_t);  /*  height */
+
 	net_send(S3D_P_C_UPDATE_TEX, buf, 16);
 	return(0);
 
@@ -1144,11 +1134,11 @@
 	ptr = buf;
 	/*  s3dprintf(VLOW, "toggling flags on .. %010x", flags); */
 	*((uint32_t *)ptr) = htonl(object);
-	ptr += 4;
+	ptr += sizeof(uint32_t);
 	*ptr = OF_TURN_ON;
-	ptr += 1;
+	ptr += sizeof(unsigned char);
 	*((uint32_t *)ptr) = htonl(flags);
-	ptr += 4;
+
 	net_send(S3D_P_C_TOGGLE_FLAGS, buf, len);
 	return(0);
 }
@@ -1164,11 +1154,11 @@
 	ptr = buf;
 	/*  s3dprintf(VLOW, "toggling flags off .. %010x", flags); */
 	*((uint32_t *)ptr) = htonl(object);
-	ptr += 4;
+	ptr += sizeof(uint32_t);
 	*ptr = OF_TURN_OFF;
-	ptr += 1;
+	ptr += sizeof(unsigned char);
 	*((uint32_t *)ptr) = htonl(flags);
-	ptr += 4;
+
 	net_send(S3D_P_C_TOGGLE_FLAGS, buf, len);
 	return(0);
 }

Modified: trunk/server/proto.c
===================================================================
--- trunk/server/proto.c	2008-09-25 22:21:51 UTC (rev 1004)
+++ trunk/server/proto.c	2008-09-25 22:22:14 UTC (rev 1005)
@@ -304,17 +304,17 @@
 	case S3D_P_C_UPDATE_TEX:
 		if (length == 16) {
 			oid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);
 			toid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);
 			x = ntohs(*((uint16_t *)cptr));
-			cptr += 2;
+			cptr += sizeof(uint16_t);
 			y = ntohs(*((uint16_t *)cptr));
-			cptr += 2;
+			cptr += sizeof(uint16_t);
 			w = ntohs(*((uint16_t *)cptr));
-			cptr += 2;
+			cptr += sizeof(uint16_t);
 			h = ntohs(*((uint16_t *)cptr));
-			cptr += 2;
+
 			s3dprintf(VLOW, "UPDATE_TEX[%d]: oid %d, texture %d, [%d x %d] data at [%d x %d] ", length, oid, toid, w, h, x, y);
 			obj_update_tex(p, oid, toid, x, y, w, h, NULL);
 		}
@@ -323,9 +323,9 @@
 	case S3D_P_C_DEL_VERTEX:
 		if (length == 8) {
 			oid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);
 			num = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+
 			/*      s3dprintf(LOW,"deleting %d vertices for object oid...%d", num, oid); */
 			obj_del_vertex(p, oid, num);
 		}
@@ -333,9 +333,9 @@
 	case S3D_P_C_DEL_POLY:
 		if (length == 8) {
 			oid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);
 			num = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+
 			/*      s3dprintf(LOW,"deleting %d vertices for object oid...%d", num, oid); */
 			obj_del_poly(p, oid, num);
 		}
@@ -343,9 +343,9 @@
 	case S3D_P_C_DEL_LINE:
 		if (length == 8) {
 			oid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);
 			num = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+
 			s3dprintf(VLOW, "deleting %d lines for object oid...%d", num, oid);
 			obj_del_line(p, oid, num);
 		}
@@ -354,9 +354,9 @@
 	case S3D_P_C_DEL_MAT:
 		if (length == 8) {
 			oid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);
 			num = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+
 			/*      s3dprintf(LOW,"deleting %d materials for object oid...%d", num, oid); */
 			obj_del_mat(p, oid, num);
 		}
@@ -364,9 +364,9 @@
 	case S3D_P_C_DEL_TEX:
 		if (length == 8) {
 			oid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);
 			num = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+
 			/*      s3dprintf(LOW,"deleting %d textures for object oid...%d", num, oid); */
 			obj_del_tex(p, oid, num);
 		}
@@ -374,18 +374,18 @@
 	case S3D_P_C_TOGGLE_FLAGS:
 		if (length == 9) {
 			oid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);;
 			type = *cptr;
-			cptr += 1;
+			cptr += sizeof(unsigned char);
 			flags = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+
 			obj_toggle_flags(p, oid, type, flags);
 		}
 		break;
 	case S3D_P_C_TRANSLATE:
 		if (length >= 16) {
 			oid = ntohl(*((uint32_t *)cptr));
-			cptr += 4;
+			cptr += sizeof(uint32_t);
 			ntohfb((float *)cptr, 3);
 			obj_translate(p, oid, (float *)cptr);
 		}



From lazhur at mail.berlios.de  Fri Sep 26 00:22:33 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 26 Sep 2008 00:22:33 +0200
Subject: [S3d-svn] r1006 - in trunk: apps/kism3d libs3d server
Message-ID: <200809252222.m8PMMXC0006948@sheep.berlios.de>

Author: lazhur
Date: 2008-09-26 00:22:32 +0200 (Fri, 26 Sep 2008)
New Revision: 1006

Modified:
   trunk/apps/kism3d/kism3d.c
   trunk/libs3d/proto_in.c
   trunk/server/graphics_sdl.c
Log:
Fix possible null pointer dereferences

Modified: trunk/apps/kism3d/kism3d.c
===================================================================
--- trunk/apps/kism3d/kism3d.c	2008-09-25 22:22:14 UTC (rev 1005)
+++ trunk/apps/kism3d/kism3d.c	2008-09-25 22:22:32 UTC (rev 1006)
@@ -227,9 +227,16 @@
 
 				}
 
-				wlan_network->type = atoi(type);
-				wlan_network->chan = atoi(channel);
+				if (channel != NULL)
+					wlan_network->chan = atoi(channel);
+				else
+					wlan_network->chan = 0;
 
+				if (type != NULL)
+					wlan_network->type = atoi(type);
+				else
+					wlan_network->type = 0;
+
 				if (wlan_network->ssid != NULL)
 					free(wlan_network->ssid);
 

Modified: trunk/libs3d/proto_in.c
===================================================================
--- trunk/libs3d/proto_in.c	2008-09-25 22:22:14 UTC (rev 1005)
+++ trunk/libs3d/proto_in.c	2008-09-25 22:22:32 UTC (rev 1006)
@@ -86,8 +86,9 @@
 				keyevent->state = ntohs(keyevent->state);
 				s3devt->buf = buf;
 				s3devt->event = (keyevent->state == 0) ? S3D_EVENT_KEYDOWN : S3D_EVENT_KEYUP;
+
+				s3dprintf(VLOW, "S3D_P_S_KEY: key %d hit!!", *((uint16_t *)s3devt->buf));
 			}
-			s3dprintf(VLOW, "S3D_P_S_KEY: key %d hit!!", *((uint16_t *)s3devt->buf));
 		}
 		break;
 	case S3D_P_S_MBUTTON:
@@ -96,8 +97,8 @@
 				s3devt->event = S3D_EVENT_MBUTTON;
 				s3devt->length = 2;
 				s3devt->buf = buf;
+				s3dprintf(VLOW, "S3D_P_S_MBUTTON: mbutton %d, state %d !!", *((uint8_t *)s3devt->buf), *(1 + (uint8_t *)s3devt->buf));
 			}
-			s3dprintf(VLOW, "S3D_P_S_MBUTTON: mbutton %d, state %d !!", *((uint8_t *)s3devt->buf), *(1 + (uint8_t *)s3devt->buf));
 		}
 		break;
 	case S3D_P_MCP_OBJECT:

Modified: trunk/server/graphics_sdl.c
===================================================================
--- trunk/server/graphics_sdl.c	2008-09-25 22:22:14 UTC (rev 1005)
+++ trunk/server/graphics_sdl.c	2008-09-25 22:22:32 UTC (rev 1006)
@@ -40,16 +40,18 @@
 		errsf("SDL_Init()", SDL_GetError());
 	if ((VideoInfo = (SDL_VideoInfo *)SDL_GetVideoInfo()) == NULL)
 		errs("SDL_GetVIdeoInfo()", SDL_GetError());
-	if (VideoInfo -> hw_available) {
-		s3dprintf(LOW, "detected HW_SURFACE");
-		SDLFlags |= SDL_HWSURFACE;
-	} else {
-		s3dprintf(LOW, "detected SW_SURFACE");
-		SDLFlags |= SDL_SWSURFACE;
+	else {
+		if (VideoInfo->hw_available) {
+			s3dprintf(LOW, "detected HW_SURFACE");
+			SDLFlags |= SDL_HWSURFACE;
+		} else {
+			s3dprintf(LOW, "detected SW_SURFACE");
+			SDLFlags |= SDL_SWSURFACE;
+		}
+		if (VideoInfo->blit_hw)
+			SDLFlags |= SDL_HWACCEL;
+		/*     if(SDL_WM_ToggleFullScreen(GLwin) == 0)         SDLerror("SDL_WM_ToggleFullScreen"); */
 	}
-	if (VideoInfo -> blit_hw)
-		SDLFlags |= SDL_HWACCEL;
-	/*     if(SDL_WM_ToggleFullScreen(GLwin) == 0)         SDLerror("SDL_WM_ToggleFullScreen"); */
 
 
 	/*  set some opengl-attributes */



From lazhur at mail.berlios.de  Fri Sep 26 21:25:16 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 26 Sep 2008 21:25:16 +0200
Subject: [S3d-svn] r1007 - in trunk: Documentation cmake/modules
Message-ID: <200809261925.m8QJPGad009159@sheep.berlios.de>

Author: lazhur
Date: 2008-09-26 21:25:15 +0200 (Fri, 26 Sep 2008)
New Revision: 1007

Modified:
   trunk/Documentation/CMakeLists.txt
   trunk/Documentation/s3d.docbook
   trunk/cmake/modules/FindDocbook.cmake
Log:
Change docbook compiler to xmlto

We are using a xml based version of docbook and not the (original) sgml
version. (Open)Jade will fail on most distributions when it tries to compile
the xml docbook. The correct way to build them is to use xsl to transform the
document into the target file.
The usage of raw xsltproc depends too much on the environment and will
definitely fail on some distributions. The easiest way to get the same
functionality as before is to use xmlto - a bash script which will be offered
by the distributions and should always know where the correct xsl files can
be found.

Modified: trunk/Documentation/CMakeLists.txt
===================================================================
--- trunk/Documentation/CMakeLists.txt	2008-09-25 22:22:32 UTC (rev 1006)
+++ trunk/Documentation/CMakeLists.txt	2008-09-26 19:25:15 UTC (rev 1007)
@@ -8,7 +8,7 @@
 	add_custom_command(
 		OUTPUT  ${Documentation_BINARY_DIR}/doc_output/index.html
 		COMMAND ${DOCBOOK2HTML_COMPILER}
-		ARGS    ${Documentation_SOURCE_DIR}/s3d.docbook -o ${Documentation_BINARY_DIR}/doc_output
+		ARGS    ${DOCBOOK2HTML_ARGS} ${Documentation_SOURCE_DIR}/s3d.docbook -o ${Documentation_BINARY_DIR}/doc_output
 		DEPENDS ${Documentation_SOURCE_DIR}/s3d.docbook
 			${Documentation_SOURCE_DIR}/bookinfo.docbook
 			${Documentation_SOURCE_DIR}/server/server.docbook
@@ -31,7 +31,7 @@
 	set(DOC_DIR "${CMAKE_INSTALL_PREFIX}/share/doc/s3d")
 	install(CODE "file(GLOB DOCS ${Documentation_BINARY_DIR}/doc_output/*)\n foreach(file \${DOCS}) \n file(INSTALL DESTINATION ${DOC_DIR} TYPE FILE FILES \"\${file}\") \n endforeach (file \"\${DOCS}\")")
 else (DOCBOOK2HTML_COMPILER)
-	PkgStatus_Later("docbook2html (pkg name: docbook-utils)")
+	PkgStatus_Later("xmlto (pkg name: xmlto)")
 
 	# print late status
 	Collected_PkgStatus("documentation")

Modified: trunk/Documentation/s3d.docbook
===================================================================
--- trunk/Documentation/s3d.docbook	2008-09-25 22:22:32 UTC (rev 1006)
+++ trunk/Documentation/s3d.docbook	2008-09-26 19:25:15 UTC (rev 1007)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8" ?>
-<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
-  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
+<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
 [
   <!ENTITY bookinfo SYSTEM "bookinfo.docbook">
   <!ENTITY server SYSTEM "server/server.docbook">

Modified: trunk/cmake/modules/FindDocbook.cmake
===================================================================
--- trunk/cmake/modules/FindDocbook.cmake	2008-09-25 22:22:32 UTC (rev 1006)
+++ trunk/cmake/modules/FindDocbook.cmake	2008-09-26 19:25:15 UTC (rev 1007)
@@ -2,83 +2,32 @@
 # This module finds if Docbook is installed and determines where the
 # executables are. This code sets the following variables:
 #
-#  DOCBOOK2DVI_COMPILER: path to the DVI convert
 #  DOCBOOK2HTML_COMPILER: path to the HTML convert
-#  DOCBOOK2MAN_COMPILER: path to the MAN convert
-#  DOCBOOK2PDF_COMPILER: path to the PDF convert
-#  DOCBOOK2PS_COMPILER: path to the PS convert
-#  DOCBOOK2RTF_COMPILER: path to the RTF convert
-#  DOCBOOK2TEX_COMPILER: path to the TEX convert
-#  DOCBOOK2TEXI_COMPILER: path to the TEXI convert
-#  DOCBOOK2TXT_COMPILER: path to the TXT convert
 #
 
-set(DOCBOOK_BINARY_PATH ${DOCBOOK_BINARY_PATH}
-	CACHE PATH "Path to the Docbook binary directory."
-)
-
-find_program(DOCBOOK2DVI_COMPILER
-	NAMES docbook2dvi
-	PATHS ${DOCBOOK_BINARY_PATH}
-		/usr/bin
-)
-
 find_program(DOCBOOK2HTML_COMPILER
-	NAMES docbook2html
+	NAMES xmlto
 	PATHS ${DOCBOOK_BINARY_PATH}
 		/usr/bin
 )
+set(DOCBOOK2HTML_ARGS "xhtml")
 
-find_program(DOCBOOK2MAN_COMPILER
-	NAMES docbook2man
-	PATHS ${DOCBOOK_BINARY_PATH}
-		/usr/bin
-)
-
 find_program(DOCBOOK2PDF_COMPILER
-	NAMES docbook2pdf
+	NAMES xmlto
 	PATHS ${DOCBOOK_BINARY_PATH}
 		/usr/bin
 )
+set(DOCBOOK2PDF_ARGS "pdf")
 
 find_program(DOCBOOK2PS_COMPILER
-	NAMES docbook2ps
+	NAMES xmlto
 	PATHS ${DOCBOOK_BINARY_PATH}
 		/usr/bin
 )
+set(DOCBOOK2PS_ARGS "ps")
 
-find_program(DOCBOOK2RTF_COMPILER
-	NAMES docbook2rtf
-	PATHS ${DOCBOOK_BINARY_PATH}
-		/usr/bin
-)
-
-find_program(DOCBOOK2TEX_COMPILER
-	NAMES docbook2tex
-	PATHS ${DOCBOOK_BINARY_PATH}
-		/usr/bin
-)
-
-find_program(DOCBOOK2TEXI_COMPILER
-	NAMES docbook2texi
-	PATHS ${DOCBOOK_BINARY_PATH}
-		/usr/bin
-)
-
-find_program(DOCBOOK2TXT_COMPILER
-	NAMES docbook2txt
-	PATHS ${DOCBOOK_BINARY_PATH}
-		/usr/bin
-)
-
 mark_as_advanced(
-	DOCBOOK2DVI_COMPILER
 	DOCBOOK2HTML_COMPILER
-	DOCBOOK2MAN_COMPILER
 	DOCBOOK2PDF_COMPILER
 	DOCBOOK2PS_COMPILER
-	DOCBOOK2RTF_COMPILER
-	DOCBOOK2TEX_COMPILER
-	DOCBOOK2TEXI_COMPILER
-	DOCBOOK2TXT_COMPILER
 )



From lazhur at mail.berlios.de  Fri Sep 26 23:07:04 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Fri, 26 Sep 2008 23:07:04 +0200
Subject: [S3d-svn] r1008 - in trunk/Documentation: . libs3d libs3dw
Message-ID: <200809262107.m8QL74WV018256@sheep.berlios.de>

Author: lazhur
Date: 2008-09-26 23:07:03 +0200 (Fri, 26 Sep 2008)
New Revision: 1008

Modified:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/libs3dw/functions.docbook
Log:
Mark xyz(void) functions correct as void in docbook

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-26 19:25:15 UTC (rev 1007)
+++ trunk/Documentation/extractdefinitions.py	2008-09-26 21:07:03 UTC (rev 1008)
@@ -442,7 +442,7 @@
 		for func in functionlist:
 			sgml = docbook_functions.generate_sgml(func, synopsis)
 			link_refids(sgml, refidlist)
-			cleanml = filter_xmldirectclosed(sgml.toxml()+'\n')
+			cleanml = sgml.toxml()+'\n'
 			func_file.write(cleanml)
 		func_file.close()
 
@@ -476,8 +476,11 @@
 
 		# add parameter to function definition
 		param_num = len(function['param'])
-		for i in range(0, param_num):
-			function['param'][i].dom_append(funcprototype)
+		if param_num == 1 and function['param'][0].is_void():
+			void = create_append(funcprototype, 'void')
+		else:
+			for i in range(0, param_num):
+				function['param'][i].dom_append(funcprototype)
 
 		# add help to function
 		function['help'].dom_append(sect2)
@@ -497,7 +500,7 @@
 		for struct in structlist:
 			sgml = docbook_structs.generate_sgml(struct)
 			link_refids(sgml, refidlist)
-			cleanml = filter_xmldirectclosed(sgml.toxml()+'\n')
+			cleanml = sgml.toxml()+'\n'
 			struct_file.write(cleanml)
 		struct_file.close()
 
@@ -546,7 +549,7 @@
 		for typedef in typedeflist:
 			sgml = docbook_typedefs.generate_sgml(typedef)
 			link_refids(sgml, refidlist)
-			cleanml = filter_xmldirectclosed(sgml.toxml()+'\n')
+			cleanml = sgml.toxml()+'\n'
 			typedef_file.write(cleanml)
 		typedef_file.close()
 

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-26 19:25:15 UTC (rev 1007)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-26 21:07:03 UTC (rev 1008)
@@ -1,4 +1,4 @@
-<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in <link linkend="s3d_init">s3d_init</link>())         </para></sect2>
+<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><void/></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in <link linkend="s3d_init">s3d_init</link>())         </para></sect2>
 <sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in server initialization. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
  {
          if (!<link linkend="s3d_init">s3d_init</link>(&amp;argc, &amp;argv, &quot;Hello world&quot;))
@@ -9,7 +9,7 @@
          return(0);
  }
 </programlisting></sect2>
-<sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Closes the connection and clears the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2>
+<sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><void/></funcprototype></funcsynopsis><para>Closes the connection and clears the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2>
 <sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
  {
          usleep(1000); // sleep 1 ms in every cycle
@@ -82,7 +82,7 @@
 <sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_normals">s3d_pep_polygon_normals</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
 <sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
 <sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parameter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>This will load an 32bit rgba image supplied in data at position xpos,ypos of the texture tex. The image has the width w and height h. This can be used to update only parts of the texture. It's no problem to supply big textures, as the image will be sent to server in fragments. Of course, you will have created the texture with <link linkend="s3d_p!
 ush_texture">s3d_push_texture</link>, have an material assigned to the texture with <link linkend="s3d_pep_material_texture">s3d_pep_material_texture</link>() and have your polygons set sane polygon texture coords using <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord</link>().         </para></sect2>
-<sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+<sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><void/></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
         </para></warning></sect2>
 <sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2>
 <sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already existing object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2>
@@ -125,7 +125,7 @@
 <sect2 id="s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
 <sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
 <sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2>
-<sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_pop_event</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
+<sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_pop_event</function></funcdef><void/></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
 <sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurrence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
 <sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).         </para></sect2>
 <sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init</link>()
@@ -146,6 +146,6 @@
  <link linkend="s3d_get_callback">s3d_get_callback</link>(S3D_EVENT_KEY)(e);
  // will call the key-handling function with argument e.
 </programlisting></sect2>
-<sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2>
+<sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><void/></funcprototype></funcsynopsis><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2>
 <sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.         </para></sect2>
-<sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>
+<sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><void/></funcprototype></funcsynopsis><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>

Modified: trunk/Documentation/libs3dw/functions.docbook
===================================================================
--- trunk/Documentation/libs3dw/functions.docbook	2008-09-26 19:25:15 UTC (rev 1007)
+++ trunk/Documentation/libs3dw/functions.docbook	2008-09-26 21:07:03 UTC (rev 1008)
@@ -6,7 +6,7 @@
 <sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced input-box to the specified text.         </para></sect2>
 <sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2>
 <sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface *<function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget *<function>s3dw_getroot</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s3dw_getroot">s3dw_getroot</link>();
+<sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget *<function>s3dw_getroot</function></funcdef><void/></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s3dw_getroot">s3dw_getroot</link>();
  // move widget center to (0,5,0). upon creation, it's centered at (0,0,0),
  // so this might move it up
  root-&gt;x=0;
@@ -55,7 +55,7 @@
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_KEY,key);
 </programlisting></sect2>
 <sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2>
-<sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
+<sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><void/></funcprototype></funcsynopsis><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
  static struct timespec t={0.33*1000*1000}; // 33 mili seconds
  void mainloop()
  {



From lazhur at mail.berlios.de  Sat Sep 27 13:44:15 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Sat, 27 Sep 2008 13:44:15 +0200
Subject: [S3d-svn] r1009 - in trunk: Documentation Documentation/libs3d
	Documentation/manpages Documentation/manpages/man1
	Documentation/manpages/man3 Documentation/manpages/man9 libs3d
Message-ID: <200809271144.m8RBiFYw015360@sheep.berlios.de>

Author: lazhur
Date: 2008-09-27 13:44:08 +0200 (Sat, 27 Sep 2008)
New Revision: 1009

Modified:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3d/structs.docbook
   trunk/Documentation/manpages/build-manpages.sh
   trunk/Documentation/manpages/man1/dot_mcp.1
   trunk/Documentation/manpages/man1/dot_mcp.sgml
   trunk/Documentation/manpages/man1/kism3d.1
   trunk/Documentation/manpages/man1/kism3d.sgml
   trunk/Documentation/manpages/man1/meshs3d.1
   trunk/Documentation/manpages/man1/meshs3d.sgml
   trunk/Documentation/manpages/man1/s3d.1
   trunk/Documentation/manpages/man1/s3d.sgml
   trunk/Documentation/manpages/man1/s3d_x11gate.1
   trunk/Documentation/manpages/man1/s3d_x11gate.sgml
   trunk/Documentation/manpages/man1/s3dfm.1
   trunk/Documentation/manpages/man1/s3dfm.sgml
   trunk/Documentation/manpages/man1/s3dosm.1
   trunk/Documentation/manpages/man1/s3dosm.sgml
   trunk/Documentation/manpages/man1/s3dvt.1
   trunk/Documentation/manpages/man1/s3dvt.sgml
   trunk/Documentation/manpages/man3/s3d_angle_to_cam.3
   trunk/Documentation/manpages/man3/s3d_clear_callback.3
   trunk/Documentation/manpages/man3/s3d_clone.3
   trunk/Documentation/manpages/man3/s3d_clone_target.3
   trunk/Documentation/manpages/man3/s3d_del_object.3
   trunk/Documentation/manpages/man3/s3d_delete_event.3
   trunk/Documentation/manpages/man3/s3d_draw_string.3
   trunk/Documentation/manpages/man3/s3d_find_event.3
   trunk/Documentation/manpages/man3/s3d_flags_off.3
   trunk/Documentation/manpages/man3/s3d_flags_on.3
   trunk/Documentation/manpages/man3/s3d_get_callback.3
   trunk/Documentation/manpages/man3/s3d_ignore_callback.3
   trunk/Documentation/manpages/man3/s3d_import_model_file.3
   trunk/Documentation/manpages/man3/s3d_init.3
   trunk/Documentation/manpages/man3/s3d_link.3
   trunk/Documentation/manpages/man3/s3d_load_line_normals.3
   trunk/Documentation/manpages/man3/s3d_load_materials_a.3
   trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3
   trunk/Documentation/manpages/man3/s3d_load_texture.3
   trunk/Documentation/manpages/man3/s3d_mainloop.3
   trunk/Documentation/manpages/man3/s3d_mcp_focus.3
   trunk/Documentation/manpages/man3/s3d_net_check.3
   trunk/Documentation/manpages/man3/s3d_new_object.3
   trunk/Documentation/manpages/man3/s3d_open_file.3
   trunk/Documentation/manpages/man3/s3d_pep_line.3
   trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_lines.3
   trunk/Documentation/manpages/man3/s3d_pep_material.3
   trunk/Documentation/manpages/man3/s3d_pep_material_a.3
   trunk/Documentation/manpages/man3/s3d_pep_material_texture.3
   trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3
   trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3
   trunk/Documentation/manpages/man3/s3d_pep_vertex.3
   trunk/Documentation/manpages/man3/s3d_pep_vertices.3
   trunk/Documentation/manpages/man3/s3d_pop_event.3
   trunk/Documentation/manpages/man3/s3d_pop_line.3
   trunk/Documentation/manpages/man3/s3d_pop_material.3
   trunk/Documentation/manpages/man3/s3d_pop_polygon.3
   trunk/Documentation/manpages/man3/s3d_pop_texture.3
   trunk/Documentation/manpages/man3/s3d_pop_vertex.3
   trunk/Documentation/manpages/man3/s3d_process_stack.3
   trunk/Documentation/manpages/man3/s3d_push_event.3
   trunk/Documentation/manpages/man3/s3d_push_line.3
   trunk/Documentation/manpages/man3/s3d_push_lines.3
   trunk/Documentation/manpages/man3/s3d_push_material.3
   trunk/Documentation/manpages/man3/s3d_push_material_a.3
   trunk/Documentation/manpages/man3/s3d_push_materials_a.3
   trunk/Documentation/manpages/man3/s3d_push_polygon.3
   trunk/Documentation/manpages/man3/s3d_push_polygons.3
   trunk/Documentation/manpages/man3/s3d_push_texture.3
   trunk/Documentation/manpages/man3/s3d_push_textures.3
   trunk/Documentation/manpages/man3/s3d_push_vertex.3
   trunk/Documentation/manpages/man3/s3d_push_vertices.3
   trunk/Documentation/manpages/man3/s3d_quit.3
   trunk/Documentation/manpages/man3/s3d_rotate.3
   trunk/Documentation/manpages/man3/s3d_scale.3
   trunk/Documentation/manpages/man3/s3d_select_font.3
   trunk/Documentation/manpages/man3/s3d_set_callback.3
   trunk/Documentation/manpages/man3/s3d_strlen.3
   trunk/Documentation/manpages/man3/s3d_translate.3
   trunk/Documentation/manpages/man3/s3d_unlink.3
   trunk/Documentation/manpages/man3/s3d_usage.3
   trunk/Documentation/manpages/man3/s3d_vector_angle.3
   trunk/Documentation/manpages/man3/s3d_vector_cross_product.3
   trunk/Documentation/manpages/man3/s3d_vector_dot_product.3
   trunk/Documentation/manpages/man3/s3d_vector_length.3
   trunk/Documentation/manpages/man3/s3d_vector_subtract.3
   trunk/Documentation/manpages/man3/s3dw_ani_mate.3
   trunk/Documentation/manpages/man3/s3dw_button_new.3
   trunk/Documentation/manpages/man3/s3dw_delete.3
   trunk/Documentation/manpages/man3/s3dw_focus.3
   trunk/Documentation/manpages/man3/s3dw_getroot.3
   trunk/Documentation/manpages/man3/s3dw_handle_click.3
   trunk/Documentation/manpages/man3/s3dw_handle_key.3
   trunk/Documentation/manpages/man3/s3dw_input_change_text.3
   trunk/Documentation/manpages/man3/s3dw_input_gettext.3
   trunk/Documentation/manpages/man3/s3dw_input_new.3
   trunk/Documentation/manpages/man3/s3dw_label_change_text.3
   trunk/Documentation/manpages/man3/s3dw_label_new.3
   trunk/Documentation/manpages/man3/s3dw_moveit.3
   trunk/Documentation/manpages/man3/s3dw_object_info.3
   trunk/Documentation/manpages/man3/s3dw_show.3
   trunk/Documentation/manpages/man3/s3dw_surface_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3
   trunk/Documentation/manpages/man3/s3dw_textbox_new.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3
   trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3
   trunk/Documentation/manpages/man9/mcp_object.9
   trunk/Documentation/manpages/man9/s3d_but_info.9
   trunk/Documentation/manpages/man9/s3d_evt.9
   trunk/Documentation/manpages/man9/s3d_key_event.9
   trunk/Documentation/manpages/man9/s3d_obj_info.9
   trunk/Documentation/manpages/man9/s3dw_button.9
   trunk/Documentation/manpages/man9/s3dw_input.9
   trunk/Documentation/manpages/man9/s3dw_label.9
   trunk/Documentation/manpages/man9/s3dw_scrollbar.9
   trunk/Documentation/manpages/man9/s3dw_style.9
   trunk/Documentation/manpages/man9/s3dw_surface.9
   trunk/Documentation/manpages/man9/s3dw_textbox.9
   trunk/Documentation/manpages/man9/s3dw_widget.9
   trunk/Documentation/xml.doxygen
   trunk/libs3d/s3d.h
Log:
Convert man pages to xml docbook

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/extractdefinitions.py	2008-09-27 11:44:08 UTC (rev 1009)
@@ -68,10 +68,6 @@
 		new_str = new_str[1:]
 	return new_str
 
-def filter_xmldirectclosed(xml):
-	p = re.compile('<([^<>]+)\s*/>')
-	return p.sub(r'<\1>', xml)
-
 """
 Generate text from all childNodes
 """
@@ -593,7 +589,7 @@
 	refnamediv = create_append(refentry, 'refnamediv')
 
 	refname = create_append(refnamediv, 'refname')
-	create_append_text(refname, ref_name)
+	create_append_text(refname, cleanup_stringbegin(ref_name))
 	refpurpose = create_append(refnamediv, 'refpurpose')
 	create_append_text(refpurpose, ref_namediv)
 
@@ -612,10 +608,10 @@
 	def generate(synopsis, functionlist):
 		for func in functionlist:
 			func_file = open('./manpages/man3/'+cleanup_stringbegin(func['name'])+'.sgml', "w")
-			func_file.write('<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">\n')
+			func_file.write('<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"\n'+
+					'"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">\n')
 			sgml = manpage_functions.generate_sgml(func, synopsis)
-			cleanml = filter_xmldirectclosed(sgml.toxml())
-			func_file.write(cleanml)
+			sgml.writexml(func_file)
 			func_file.close()
 
 	"""
@@ -665,10 +661,10 @@
 	def generate(synopsis, structlist):
 		for func in structlist:
 			func_file = open('./manpages/man9/'+cleanup_stringbegin(func['name'])+'.sgml', "w")
-			func_file.write('<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">\n')
+			func_file.write('<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"\n'+
+					'"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">\n')
 			sgml = manpage_structs.generate_sgml(func, synopsis)
-			cleanml = filter_xmldirectclosed(sgml.toxml())
-			func_file.write(cleanml)
+			sgml.writexml(func_file)
 			func_file.close()
 
 	"""
@@ -677,7 +673,7 @@
 	def generate_sgml(struct, synopsis):
 		sgml = xml.dom.minidom.Document()
 
-		(refentry, funcsynopsis) = manpage_header(sgml, struct['name'], struct['id'], '9', 'struct ' + struct['name'], "", "#include <"+synopsis+">")
+		(refentry, funcsynopsis) = manpage_header(sgml, struct['name'], struct['id'], '9', struct['name'], "", "#include <"+synopsis+">")
 
 		# add definition of struct
 		refsect1 = create_append(refentry, 'refsect1')

Modified: trunk/Documentation/libs3d/structs.docbook
===================================================================
--- trunk/Documentation/libs3d/structs.docbook	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/libs3d/structs.docbook	2008-09-27 11:44:08 UTC (rev 1009)
@@ -34,4 +34,4 @@
 	uint16_t unicode;
 	uint16_t modifier;
 	uint16_t state;
-}</programlisting></sect2>
+}</programlisting><para>Can be used on the buffer of an event of type S3D_EVENT_KEY*.     </para></sect2>

Modified: trunk/Documentation/manpages/build-manpages.sh
===================================================================
--- trunk/Documentation/manpages/build-manpages.sh	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/build-manpages.sh	2008-09-27 11:44:08 UTC (rev 1009)
@@ -3,8 +3,13 @@
 for i in 1 3 9; do
 	for man in man${i}/*.sgml; do
 		if [ -e ${man}  ] ; then
-			docbook-to-man ${man} >${man%.sgml}.${i};
-			sed -i 's/^\(\.\\" created by instant \/ docbook-to-man\).*$/\1/' ${man%.sgml}.${i}
+			xmlto man ${man} -o `dirname ${man}`
+			sed -i 's/^\(\.\\"\s* Generator: DocBook XSL Stylesheets\).*$/\1/' ${man%.sgml}.${i}
+			sed -i 's/^\(\.\\"\)\s*Date.*$/\1/' ${man%.sgml}.${i}
+			sed -i 's/^\(\.TH "[^"]*" "[^"]*" "\)[^"]*\(".*\)$/\1\2/' ${man%.sgml}.${i}
+
+			# remove trailing spaces
+			sed -i 's/^\(.*\)\s\s*$/\1/' ${man%.sgml}.${i}
 		fi
 	done
 done

Modified: trunk/Documentation/manpages/man1/dot_mcp.1
===================================================================
--- trunk/Documentation/manpages/man1/dot_mcp.1	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/dot_mcp.1	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,25 +1,47 @@
-.TH "dot_mcp" "1" 
-.SH "NAME" 
-dot_mcp \(em  mcp for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBdot_mcp\fR [\-\-s3d-url \fIurl\fR]  
-.SH "OPTIONS" 
-.PP 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBdot_mcp\fR is below. 
- 
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "DESCRIPTION" 
-.PP 
-\fBdot_mcp(1)\fR is a mcp (which is the window manager in s3d-terms) for s3d. 
- 
-.PP 
- 
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man
+.\"     Title: dot_mcp
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "DOT_MCP" "1" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+dot_mcp \- mcp for s3d
+.SH "SYNOPSIS"
+.HP 8
+\fBdot_mcp\fR [\-\-s3d\-url\ \fIurl\fR]
+.SH "OPTIONS"
+.PP
+This program follows the usual
+GNU
+command line syntax\&. A summary of the options supported by
+\fBdot_mcp\fR
+is below\&.
+.PP
+\fB\-\-s3d\-url \fR\fB\fIurl\fR\fR
+.RS 4
+skip S3D environment and connect to this url
+.RE
+.SH "DESCRIPTION"
+.PP
+
+\fBdot_mcp(1)\fR
+is a mcp (which is the window manager in s3d\-terms) for s3d\&.
+.PP
+.SH "SEE ALSO"
+.PP
+\fBs3d\fR(1)\&.
+.PP
+
+\fI s3d project page on berlios \fR\&[1]
+.SH "NOTES"
+.IP " 1." 4
+s3d project page on berlios
+.RS 4
+\%http://s3d.berlios.de/
+.RE

Modified: trunk/Documentation/manpages/man1/dot_mcp.sgml
===================================================================
--- trunk/Documentation/manpages/man1/dot_mcp.sgml	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/dot_mcp.sgml	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,4 +1,6 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
+[
   <!ENTITY gnu         "<acronym>GNU</acronym>">
 
   <!ENTITY program     "dot_mcp">

Modified: trunk/Documentation/manpages/man1/kism3d.1
===================================================================
--- trunk/Documentation/manpages/man1/kism3d.1	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/kism3d.1	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,26 +1,49 @@
-.TH "kism3d" "1" 
-.SH "NAME" 
-kism3d \(em  802.11 visualizer for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBkism3d\fR [\-\-s3d-url \fIurl\fR] \fIHOST\fR:\fIPORT\fR  
-.SH "DESCRIPTION" 
-.PP 
-\fBkism3d(1)\fR is a 3D 802.11 visualizer for kismet. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
- 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBkism3d\fR is below. 
- 
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1), \fBkismet\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man
+.\"     Title: kism3d
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "KISM3D" "1" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+kism3d \- 802.11 visualizer for s3d
+.SH "SYNOPSIS"
+.HP 7
+\fBkism3d\fR [\-\-s3d\-url\ \fIurl\fR] \fIHOST\fR:\fIPORT\fR
+.SH "DESCRIPTION"
+.PP
+
+\fBkism3d(1)\fR
+is a 3D 802\&.11 visualizer for kismet\&.
+.PP
+.SH "OPTIONS"
+.PP
+This program follows the usual
+GNU
+command line syntax\&. A summary of the options supported by
+\fBkism3d\fR
+is below\&.
+.PP
+\fB\-\-s3d\-url \fR\fB\fIurl\fR\fR
+.RS 4
+skip S3D environment and connect to this url
+.RE
+.SH "SEE ALSO"
+.PP
+
+\fBs3d\fR(1),
+\fBkismet\fR(1)\&.
+.PP
+
+\fI s3d project page on berlios \fR\&[1]
+.SH "NOTES"
+.IP " 1." 4
+s3d project page on berlios
+.RS 4
+\%http://s3d.berlios.de/
+.RE

Modified: trunk/Documentation/manpages/man1/kism3d.sgml
===================================================================
--- trunk/Documentation/manpages/man1/kism3d.sgml	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/kism3d.sgml	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,4 +1,6 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
+[
   <!ENTITY gnu         "<acronym>GNU</acronym>">
 
   <!ENTITY program     "kism3d">

Modified: trunk/Documentation/manpages/man1/meshs3d.1
===================================================================
--- trunk/Documentation/manpages/man1/meshs3d.1	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/meshs3d.1	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,32 +1,66 @@
-.TH "meshs3d" "1" 
-.SH "NAME" 
-meshs3d \(em  olsr/batman topology visualizer for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBmeshs3d\fR [\-d]  [\-H \fInode\fR]  [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBmeshs3d(1)\fR is a 3D topology visualizer for olsr/batman and compatible data. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
- 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBmeshs3d\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB-d\fP" 10 
-Enable debug mode  
-.IP "\fB-H \fInode\fR\fP" 10 
-connect to olsr node. By default meshs3d uses localhost 
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1), \fBolsrd\fR(8), \fBbatmand\fR (8). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man
+.\"     Title: meshs3d
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "MESHS3D" "1" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+meshs3d \- olsr/batman topology visualizer for s3d
+.SH "SYNOPSIS"
+.HP 8
+\fBmeshs3d\fR [\-d] [\-H\ \fInode\fR] [\-h|\-\-help] [\-\-s3d\-url\ \fIurl\fR]
+.SH "DESCRIPTION"
+.PP
+
+\fBmeshs3d(1)\fR
+is a 3D topology visualizer for olsr/batman and compatible data\&.
+.PP
+.SH "OPTIONS"
+.PP
+This program follows the usual
+GNU
+command line syntax\&. A summary of the options supported by
+\fBmeshs3d\fR
+is below\&.
+.PP
+\fB\-h\fR, \fB\-\-help\fR
+.RS 4
+Show summary of options and exit\&.
+.RE
+.PP
+\fB\-d\fR
+.RS 4
+Enable debug mode
+.RE
+.PP
+\fB\-H \fR\fB\fInode\fR\fR
+.RS 4
+connect to olsr node\&. By default meshs3d uses localhost
+.RE
+.PP
+\fB\-\-s3d\-url \fR\fB\fIurl\fR\fR
+.RS 4
+skip S3D environment and connect to this url
+.RE
+.SH "SEE ALSO"
+.PP
+
+\fBs3d\fR(1),
+\fBolsrd\fR(8),
+\fBbatmand\fR
+(8)\&.
+.PP
+
+\fI s3d project page on berlios \fR\&[1]
+.SH "NOTES"
+.IP " 1." 4
+s3d project page on berlios
+.RS 4
+\%http://s3d.berlios.de/
+.RE

Modified: trunk/Documentation/manpages/man1/meshs3d.sgml
===================================================================
--- trunk/Documentation/manpages/man1/meshs3d.sgml	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/meshs3d.sgml	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,4 +1,6 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
+[
   <!ENTITY gnu         "<acronym>GNU</acronym>">
 
   <!ENTITY program     "meshs3d">

Modified: trunk/Documentation/manpages/man1/s3d.1
===================================================================
--- trunk/Documentation/manpages/man1/s3d.1	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3d.1	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,34 +1,62 @@
-.TH "s3d" "1" 
-.SH "NAME" 
-s3d \(em  network display server  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3d\fR [\-s|\-\-use-sdl]  [\-r|\-\-rc \fIrc-script\fR]  [\-n|\-\-no-rc]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3d(1)\fR is a network display server which can be used as 3d desktop environment. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
- 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3d\fR is below. 
- 
-.IP "\fB-s\fP, \fB\-\-use-sdl\fP" 10 
-Tells s3d to use SDL as graphics framework system.  
-.IP "\fB-r \fIrc-script\fR\fP, \fB\-\-rc \fIrc-script\fR\fP" 10 
-Use the specified file as rc-script. By default s3d uses ~/.s3drc as 
-per-user rc-script and /etc/s3drc as system-wide rc-script 
-.IP "\fB-n\fP, \fB\-\-no-rc\fP" 10 
-Don't use rc-scripts even if the exist in the apropriate locations.  
-.SH "SEE ALSO" 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.SH "AUTHOR" 
-.PP 
-This manual page was written by Timo Schneider timo.schneider at s2004.tu-chemnitz.de  
-for the \fBDebian\fP project (but may be used by others). 
- 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D" "1" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d \- network display server
+.SH "SYNOPSIS"
+.HP 4
+\fBs3d\fR [\-s|\-\-use\-sdl] [\-r|\-\-rc\ \fIrc\-script\fR] [\-n|\-\-no\-rc]
+.SH "DESCRIPTION"
+.PP
+
+\fBs3d(1)\fR
+is a network display server which can be used as 3d desktop environment\&.
+.PP
+.SH "OPTIONS"
+.PP
+This program follows the usual
+GNU
+command line syntax\&. A summary of the options supported by
+\fBs3d\fR
+is below\&.
+.PP
+\fB\-s\fR, \fB\-\-use\-sdl\fR
+.RS 4
+Tells s3d to use SDL as graphics framework system\&.
+.RE
+.PP
+\fB\-r \fR\fB\fIrc\-script\fR\fR, \fB\-\-rc \fR\fB\fIrc\-script\fR\fR
+.RS 4
+Use the specified file as rc\-script\&. By default s3d uses ~/\&.s3drc as per\-user rc\-script and /etc/s3drc as system\-wide rc\-script
+.RE
+.PP
+\fB\-n\fR, \fB\-\-no\-rc\fR
+.RS 4
+Don\'t use rc\-scripts even if the exist in the apropriate locations\&.
+.RE
+.SH "SEE ALSO"
+.PP
+
+\fI s3d project page on berlios \fR\&[1]
+.SH "AUTHOR"
+.PP
+This manual page was written by Timo Schneider
+<timo\&.schneider at s2004\&.tu\-chemnitz\&.de>
+for the
+Debian(TM)
+project (but may be used by others)\&.
+.SH "NOTES"
+.IP " 1." 4
+s3d project page on berlios
+.RS 4
+\%http://s3d.berlios.de/
+.RE

Modified: trunk/Documentation/manpages/man1/s3d.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3d.sgml	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3d.sgml	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,4 +1,6 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
+[
   <!ENTITY gnu         "<acronym>GNU</acronym>">
   <!ENTITY debian      "<productname>Debian</productname>">
 

Modified: trunk/Documentation/manpages/man1/s3d_x11gate.1
===================================================================
--- trunk/Documentation/manpages/man1/s3d_x11gate.1	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3d_x11gate.1	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,27 +1,53 @@
-.TH "s3d_x11gate" "1" 
-.SH "NAME" 
-s3d_x11gate \(em  3d gateway for x11 desktops  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3d_x11gate\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3d_x11gate(1)\fR is a 3D gateway for x11 desktops. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3d_x11gate\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_x11gate
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_X11GATE" "1" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_x11gate \- 3d gateway for x11 desktops
+.SH "SYNOPSIS"
+.HP 12
+\fBs3d_x11gate\fR [\-h|\-\-help] [\-\-s3d\-url\ \fIurl\fR]
+.SH "DESCRIPTION"
+.PP
+
+\fBs3d_x11gate(1)\fR
+is a 3D gateway for x11 desktops\&.
+.PP
+.SH "OPTIONS"
+.PP
+This program follows the usual
+GNU
+command line syntax\&. A summary of the options supported by
+\fBs3d_x11gate\fR
+is below\&.
+.PP
+\fB\-h\fR, \fB\-\-help\fR
+.RS 4
+Show summary of options and exit\&.
+.RE
+.PP
+\fB\-\-s3d\-url \fR\fB\fIurl\fR\fR
+.RS 4
+skip S3D environment and connect to this url
+.RE
+.SH "SEE ALSO"
+.PP
+
+\fBs3d\fR(1)\&.
+.PP
+
+\fI s3d project page on berlios \fR\&[1]
+.SH "NOTES"
+.IP " 1." 4
+s3d project page on berlios
+.RS 4
+\%http://s3d.berlios.de/
+.RE

Modified: trunk/Documentation/manpages/man1/s3d_x11gate.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3d_x11gate.sgml	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3d_x11gate.sgml	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,4 +1,6 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
+[
   <!ENTITY gnu         "<acronym>GNU</acronym>">
 
   <!ENTITY program     "s3d_x11gate">

Modified: trunk/Documentation/manpages/man1/s3dfm.1
===================================================================
--- trunk/Documentation/manpages/man1/s3dfm.1	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3dfm.1	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,28 +1,53 @@
-.TH "s3dfm" "1" 
-.SH "NAME" 
-s3dfm \(em  s3d file manager  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3dfm\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3dfm(1)\fR is a 3D file manager. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
- 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3dfm\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man
+.\"     Title: s3dfm
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DFM" "1" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dfm \- s3d file manager
+.SH "SYNOPSIS"
+.HP 6
+\fBs3dfm\fR [\-h|\-\-help] [\-\-s3d\-url\ \fIurl\fR]
+.SH "DESCRIPTION"
+.PP
+
+\fBs3dfm(1)\fR
+is a 3D file manager\&.
+.PP
+.SH "OPTIONS"
+.PP
+This program follows the usual
+GNU
+command line syntax\&. A summary of the options supported by
+\fBs3dfm\fR
+is below\&.
+.PP
+\fB\-h\fR, \fB\-\-help\fR
+.RS 4
+Show summary of options and exit\&.
+.RE
+.PP
+\fB\-\-s3d\-url \fR\fB\fIurl\fR\fR
+.RS 4
+skip S3D environment and connect to this url
+.RE
+.SH "SEE ALSO"
+.PP
+
+\fBs3d\fR(1)\&.
+.PP
+
+\fI s3d project page on berlios \fR\&[1]
+.SH "NOTES"
+.IP " 1." 4
+s3d project page on berlios
+.RS 4
+\%http://s3d.berlios.de/
+.RE

Modified: trunk/Documentation/manpages/man1/s3dfm.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3dfm.sgml	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3dfm.sgml	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,4 +1,6 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
+[
   <!ENTITY gnu         "<acronym>GNU</acronym>">
 
   <!ENTITY program     "s3dfm">

Modified: trunk/Documentation/manpages/man1/s3dosm.1
===================================================================
--- trunk/Documentation/manpages/man1/s3dosm.1	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3dosm.1	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,45 +1,70 @@
-.TH "s3dosm" "1" 
-.SH "NAME" 
-s3dosm \(em  gps card application for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3dosm\fR [\-o|\-\-osm \fIMINLAT\fR,\fIMINLON\fR,\fIMAXLAT\fR,\fIMAXLON\fR]  [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  [\fIfiles\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3dosm(1)\fR is a 3D gps card application for openstreetmap/kismet xml card data. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3dosm\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB-o\fP, \fB\-\-osm\fP \fIMINLAT\fR,\fIMINLON\fR,\fIMAXLAT\fR,\fIMAXLON\fR 				" 10 
-Load a map with the given bounding box from the openstreetmap server.  
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "EXAMPLES" 
-.PP 
- 
-.PP 
-.nf 
-$  
-.ft B 
-s3osm \-\-osm \fI12.90142,50.82475,12.93352,50.84592\fR 
-.ft  
-$  
-.ft B 
-s3osm \fIosmdata\fR.xml 
-.ft 
-.fi 
- 
- 
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man
+.\"     Title: s3dosm
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DOSM" "1" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dosm \- gps card application for s3d
+.SH "SYNOPSIS"
+.HP 7
+\fBs3dosm\fR [\-o|\-\-osm\ \fIMINLAT\fR,\fIMINLON\fR,\fIMAXLAT\fR,\fIMAXLON\fR] [\-h|\-\-help] [\-\-s3d\-url\ \fIurl\fR] [\fIfiles\fR]
+.SH "DESCRIPTION"
+.PP
+
+\fBs3dosm(1)\fR
+is a 3D gps card application for openstreetmap/kismet xml card data\&.
+.PP
+.SH "OPTIONS"
+.PP
+This program follows the usual
+GNU
+command line syntax\&. A summary of the options supported by
+\fBs3dosm\fR
+is below\&.
+.PP
+\fB\-h\fR, \fB\-\-help\fR
+.RS 4
+Show summary of options and exit\&.
+.RE
+.PP
+\fB\-o\fR, \fB\-\-osm\fR \fIMINLAT\fR,\fIMINLON\fR,\fIMAXLAT\fR,\fIMAXLON\fR
+.RS 4
+Load a map with the given bounding box from the openstreetmap server\&.
+.RE
+.PP
+\fB\-\-s3d\-url \fR\fB\fIurl\fR\fR
+.RS 4
+skip S3D environment and connect to this url
+.RE
+.SH "EXAMPLES"
+.PP
+
+.sp
+.RS 4
+.nf
+$ \fBs3osm \-\-osm \fR\fB\fI12\&.90142,50\&.82475,12\&.93352,50\&.84592\fR\fR
+
+$ \fBs3osm \fR\fB\fIosmdata\fR\fR\fB\&.xml\fR
+.fi
+.RE
+.sp
+.SH "SEE ALSO"
+.PP
+
+\fBs3d\fR(1)\&.
+.PP
+
+\fI s3d project page on berlios \fR\&[1]
+.SH "NOTES"
+.IP " 1." 4
+s3d project page on berlios
+.RS 4
+\%http://s3d.berlios.de/
+.RE

Modified: trunk/Documentation/manpages/man1/s3dosm.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3dosm.sgml	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3dosm.sgml	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,4 +1,6 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
+[
   <!ENTITY gnu         "<acronym>GNU</acronym>">
 
   <!ENTITY program     "s3dosm">

Modified: trunk/Documentation/manpages/man1/s3dvt.1
===================================================================
--- trunk/Documentation/manpages/man1/s3dvt.1	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3dvt.1	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,27 +1,53 @@
-.TH "s3dvt" "1" 
-.SH "NAME" 
-s3dvt \(em  3d terminal emulator for s3d  
-.SH "SYNOPSIS" 
-.PP 
-\fBs3dvt\fR [\-h|\-\-help]  [\-\-s3d-url \fIurl\fR]  
-.SH "DESCRIPTION" 
-.PP 
-\fBs3dvt(1)\fR is a terminal emulator. 
- 
-.PP 
- 
-.SH "OPTIONS" 
-.PP 
-This program follows the usual GNU command line syntax. A summary of 
-the options supported by \fBs3dvt\fR is below. 
- 
-.IP "\fB-h\fP, \fB\-\-help\fP 				" 10 
-Show summary of options and exit.  
-.IP "\fB\-\-s3d-url \fIurl\fR\fP" 10 
-skip S3D environment and connect to this url  
-.SH "SEE ALSO" 
-.PP 
-\fBs3d\fR(1). 
-.PP 
-\fI s3d project page on berlios  (link to URL http://s3d.berlios.de/) \fR  
-.\" created by instant / docbook-to-man
+.\"     Title: s3dvt
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DVT" "1" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dvt \- 3d terminal emulator for s3d
+.SH "SYNOPSIS"
+.HP 6
+\fBs3dvt\fR [\-h|\-\-help] [\-\-s3d\-url\ \fIurl\fR]
+.SH "DESCRIPTION"
+.PP
+
+\fBs3dvt(1)\fR
+is a terminal emulator\&.
+.PP
+.SH "OPTIONS"
+.PP
+This program follows the usual
+GNU
+command line syntax\&. A summary of the options supported by
+\fBs3dvt\fR
+is below\&.
+.PP
+\fB\-h\fR, \fB\-\-help\fR
+.RS 4
+Show summary of options and exit\&.
+.RE
+.PP
+\fB\-\-s3d\-url \fR\fB\fIurl\fR\fR
+.RS 4
+skip S3D environment and connect to this url
+.RE
+.SH "SEE ALSO"
+.PP
+
+\fBs3d\fR(1)\&.
+.PP
+
+\fI s3d project page on berlios \fR\&[1]
+.SH "NOTES"
+.IP " 1." 4
+s3d project page on berlios
+.RS 4
+\%http://s3d.berlios.de/
+.RE

Modified: trunk/Documentation/manpages/man1/s3dvt.sgml
===================================================================
--- trunk/Documentation/manpages/man1/s3dvt.sgml	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man1/s3dvt.sgml	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,4 +1,6 @@
-<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
+<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
+"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
+[
   <!ENTITY gnu         "<acronym>GNU</acronym>">
 
   <!ENTITY program     "s3dvt">

Modified: trunk/Documentation/manpages/man3/s3d_angle_to_cam.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_angle_to_cam.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_angle_to_cam.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_angle_to_cam" "3" 
-.SH "NAME" 
-s3d_angle_to_cam \(em calculate angle between vector and cam 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBfloat \fBs3d_angle_to_cam\fP\fR( 
-\fB	const float \fBobj_pos\fR[]\fR, 
-\fB	const float \fBcam_pos\fR[]\fR, 
-\fB	float *\fBangle_rad\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_angle_to_cam
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_ANGLE_TO_CAM" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_angle_to_cam \- calculate angle between vector and cam
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 23
+.BI "float s3d_angle_to_cam(const\ float\ " "obj_pos" "[], const\ float\ " "cam_pos" "[], float\ *" "angle_rad" ");"
+.SH "DESCRIPTION"
+.PP
+Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y\-axis so that it faces the camera\&. This might become handy if you have some text floating in space and want it to face the camera\&. http://en\&.wikipedia\&.org/wiki/Vector_(spatial)

Modified: trunk/Documentation/manpages/man3/s3d_clear_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clear_callback.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_clear_callback.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_clear_callback" "3" 
-.SH "NAME" 
-s3d_clear_callback \(em clears a callback 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBvoid \fBs3d_clear_callback\fP\fR( 
-\fB	uint8_t \fBevent\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Clears the callback which is associated with the event.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_clear_callback
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_CLEAR_CALLBACK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_clear_callback \- clears a callback
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 24
+.BI "void s3d_clear_callback(uint8_t\ " "event" ");"
+.SH "DESCRIPTION"
+.PP
+Clears the callback which is associated with the event\&.

Modified: trunk/Documentation/manpages/man3/s3d_clone.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_clone.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_clone" "3" 
-.SH "NAME" 
-s3d_clone \(em clone object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_clone\fP\fR( 
-\fB	int \fBoid\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Clones an already existing object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_clone
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_CLONE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_clone \- clone object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 14
+.BI "int s3d_clone(int\ " "oid" ");"
+.SH "DESCRIPTION"
+.PP
+Clones an already existing object\&. They get just look the same as the parent\-object and will change when the parent\-object changes\&. Cloning especially makes sense if you want to use the same object a lot of times\&. Move and transform is independent from the parent\&. The function returns the childs object id\&.

Modified: trunk/Documentation/manpages/man3/s3d_clone_target.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_clone_target.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_clone_target.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_clone_target" "3" 
-.SH "NAME" 
-s3d_clone_target \(em changes the target of a clone-object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_clone_target\fP\fR( 
-\fB	int \fBoid\fR\fR, 
-\fB	int \fBtoid\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_clone_target
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_CLONE_TARGET" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_clone_target \- changes the target of a clone-object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3d_clone_target(int\ " "oid" ", int\ " "toid" ");"
+.SH "DESCRIPTION"
+.PP
+Changes the clone target of oid to another object (toid)\&. This assumes you\'ve got oid from s3d_clone before\&.

Modified: trunk/Documentation/manpages/man3/s3d_del_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_del_object.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_del_object.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_del_object" "3" 
-.SH "NAME" 
-s3d_del_object \(em delete an object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_del_object\fP\fR( 
-\fB	int \fBoid\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Deletes the object referenced by oid.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_del_object
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_DEL_OBJECT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_del_object \- delete an object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 19
+.BI "int s3d_del_object(int\ " "oid" ");"
+.SH "DESCRIPTION"
+.PP
+Deletes the object referenced by oid\&.

Modified: trunk/Documentation/manpages/man3/s3d_delete_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_delete_event.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_delete_event" "3" 
-.SH "NAME" 
-s3d_delete_event \(em delete event from stack 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_delete_event\fP\fR( 
-\fB	const struct s3d_evt *\fBdevt\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event).          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_delete_event
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_DELETE_EVENT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_delete_event \- delete event from stack
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3d_delete_event(const\ struct\ s3d_evt\ *" "devt" ");"
+.SH "DESCRIPTION"
+.PP
+Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event)\&.

Modified: trunk/Documentation/manpages/man3/s3d_draw_string.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_draw_string.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_draw_string.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,26 +1,37 @@
-.TH "s3d_draw_string" "3" 
-.SH "NAME" 
-s3d_draw_string \(em draw a simple string 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_draw_string\fP\fR( 
-\fB	const char *\fBstr\fR\fR, 
-\fB	float *\fBxlen\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this). 
-.PP 
-.nf 
-char str="hello world!"; 
-float len; 
-s3d_select_font("vera"); 
-s3d_draw_string(str, len); 
- 
-// not interested in the length? do that: s3d_draw_string(str, NULL); 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_draw_string
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_DRAW_STRING" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_draw_string \- draw a simple string
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 20
+.BI "int s3d_draw_string(const\ char\ *" "str" ", float\ *" "xlen" ");"
+.SH "DESCRIPTION"
+.PP
+Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this)\&.
+.sp
+.RS 4
+.nf
+ char str="hello world!";
+ float len;
+ s3d_select_font("vera");
+ s3d_draw_string(str, len);
+
+ // not interested in the length? do that: s3d_draw_string(str, NULL);
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_find_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_find_event.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_find_event" "3" 
-.SH "NAME" 
-s3d_find_event \(em find eevnt on stack 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBstruct s3d_evt *\fBs3d_find_event\fP\fR( 
-\fB	uint8_t \fBevent\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Finds the latest occurrence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_find_event
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_FIND_EVENT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_find_event \- find eevnt on stack
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 31
+.BI "struct s3d_evt *s3d_find_event(uint8_t\ " "event" ");"
+.SH "DESCRIPTION"
+.PP
+Finds the latest occurrence of an event, giving the event type as argument\&. Returns a pointer to struct s3d_evt\&.

Modified: trunk/Documentation/manpages/man3/s3d_flags_off.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_flags_off.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_flags_off" "3" 
-.SH "NAME" 
-s3d_flags_off \(em disable flags of object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_flags_off\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBflags\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Turn some flags off for object.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_flags_off
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_FLAGS_OFF" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_flags_off \- disable flags of object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 18
+.BI "int s3d_flags_off(int\ " "object" ", uint32_t\ " "flags" ");"
+.SH "DESCRIPTION"
+.PP
+Turn some flags off for object\&.

Modified: trunk/Documentation/manpages/man3/s3d_flags_on.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_flags_on.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,23 +1,35 @@
-.TH "s3d_flags_on" "3" 
-.SH "NAME" 
-s3d_flags_on \(em enable flags of object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_flags_on\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBflags\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Turn some flags on for object. 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content)  
- 
-.RE 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_flags_on
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_FLAGS_ON" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_flags_on \- enable flags of object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 17
+.BI "int s3d_flags_on(int\ " "object" ", uint32_t\ " "flags" ");"
+.SH "DESCRIPTION"
+.PP
+Turn some flags on for object\&.
+.sp
+.it 1 an-trap
+.nr an-no-space-flag 1
+.nr an-break-flag 1
+.br
+Warning
+.PP
+If you don\'t toggle OF_VISIBLE on, you won\'t see your object\&. usually you want this\&. (at least after you *push()d all your content)
+

Modified: trunk/Documentation/manpages/man3/s3d_get_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_get_callback.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_get_callback.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,23 +1,35 @@
-.TH "s3d_get_callback" "3" 
-.SH "NAME" 
-s3d_get_callback \(em get callback of event 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBs3d_cb \fBs3d_get_callback\fP\fR( 
-\fB	uint8_t \fBevent\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Returns the Callback-function of the event. 
-.PP 
-.nf 
-struct s3d_evt e; 
-... 
-s3d_get_callback(S3D_EVENT_KEY)(e); 
-// will call the key-handling function with argument e. 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_get_callback
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_GET_CALLBACK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_get_callback \- get callback of event
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 24
+.BI "s3d_cb s3d_get_callback(uint8_t\ " "event" ");"
+.SH "DESCRIPTION"
+.PP
+Returns the Callback\-function of the event\&.
+.sp
+.RS 4
+.nf
+ struct s3d_evt e;
+ \&.\&.\&.
+ s3d_get_callback(S3D_EVENT_KEY)(e);
+ // will call the key\-handling function with argument e\&.
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_ignore_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_ignore_callback.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_ignore_callback.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_ignore_callback" "3" 
-.SH "NAME" 
-s3d_ignore_callback \(em ignores an event 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBvoid \fBs3d_ignore_callback\fP\fR( 
-\fB	uint8_t \fBevent\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_ignore_callback
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_IGNORE_CALLBACK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_ignore_callback \- ignores an event
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 25
+.BI "void s3d_ignore_callback(uint8_t\ " "event" ");"
+.SH "DESCRIPTION"
+.PP
+Sets the callback on ignore, that means it won\'t be queued up for later use\&. An incoming event of this type will simply be skipped\&.

Modified: trunk/Documentation/manpages/man3/s3d_import_model_file.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_import_model_file.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_import_model_file.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,22 +1,35 @@
-.TH "s3d_import_model_file" "3" 
-.SH "NAME" 
-s3d_import_model_file \(em read model from file 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_import_model_file\fP\fR( 
-\fB	const char *\fBfname\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :) 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-Of course, you won't forget to toggle it visible, won't you?  
- 
-.RE 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_import_model_file
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_IMPORT_MODEL_FIL" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_import_model_file \- read model from file
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 26
+.BI "int s3d_import_model_file(const\ char\ *" "fname" ");"
+.SH "DESCRIPTION"
+.PP
+Imports an 3d object file and returns the object number\&. Quite a number of formats are supported, like 3D Studio (\&.3ds, \&.prj), Lightwave (\&.lw, \&.lwb, \&.lwo), Quake Models (\&.md3), or simply everything libg3d supports\&. :)
+.sp
+.it 1 an-trap
+.nr an-no-space-flag 1
+.nr an-break-flag 1
+.br
+Warning
+.PP
+Of course, you won\'t forget to toggle it visible, won\'t you?
+

Modified: trunk/Documentation/manpages/man3/s3d_init.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_init.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_init.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,30 +1,40 @@
-.TH "s3d_init" "3" 
-.SH "NAME" 
-s3d_init \(em initialize s3d library 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_init\fP\fR( 
-\fB	int *\fBargc\fR\fR, 
-\fB	char ***\fBargv\fR\fR, 
-\fB	const char *\fBname\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-This will initialize the s3d-library and the connection to the Server. It will return 0 on success in server initialization. name specifies the your programs name. 
-.PP 
-.nf 
-int main(char argc, char **argv) 
-{ 
-if (!s3d_init(&argc, &argv, "Hello world")) 
-{ 
-... 
-s3d_quit(); 
-} 
-return(0); 
-} 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_init
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_INIT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_init \- initialize s3d library
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 13
+.BI "int s3d_init(int\ *" "argc" ", char\ ***" "argv" ", const\ char\ *" "name" ");"
+.SH "DESCRIPTION"
+.PP
+This will initialize the s3d\-library and the connection to the Server\&. It will return 0 on success in server initialization\&. name specifies the your programs name\&.
+.sp
+.RS 4
+.nf
+ int main(char argc, char **argv)
+ {
+         if (!s3d_init(&argc, &argv, "Hello world"))
+         {
+                 \&.\&.\&.
+                 s3d_quit();
+         }
+         return(0);
+ }
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_link.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_link.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_link.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_link" "3" 
-.SH "NAME" 
-s3d_link \(em link object to another one 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_link\fP\fR( 
-\fB	int \fBoid_from\fR\fR, 
-\fB	int \fBoid_to\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will "keep on the table" if you move the table around in space. It will also rotate with the table etc.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_link
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_LINK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_link \- link object to another one
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 13
+.BI "int s3d_link(int\ " "oid_from" ", int\ " "oid_to" ");"
+.SH "DESCRIPTION"
+.PP
+A linked object will move along with it\'s link parent\&. For example if you have a book on a table, you can link the book to the table so the book will "keep on the table" if you move the table around in space\&. It will also rotate with the table etc\&.

Modified: trunk/Documentation/manpages/man3/s3d_load_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_line_normals.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_load_line_normals.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,26 @@
-.TH "s3d_load_line_normals" "3" 
-.SH "NAME" 
-s3d_load_line_normals \(em add normals to line 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_load_line_normals\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBnbuf\fR\fR, 
-\fB	uint32_t \fBstart\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_load_line_normals
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_LOAD_LINE_NORMAL" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_load_line_normals \- add normals to line
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 26
+.BI "int s3d_load_line_normals(int\ " "object" ", const\ float\ *" "nbuf" ", uint32_t\ " "start" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Just as s3d_pep_line_normals(), with the difference you won\'t alter the latest n lines but n lines starting with index start\&.

Modified: trunk/Documentation/manpages/man3/s3d_load_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_load_materials_a.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,26 @@
-.TH "s3d_load_materials_a" "3" 
-.SH "NAME" 
-s3d_load_materials_a \(em add materials with alpha to polygons 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_load_materials_a\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBmbuf\fR\fR, 
-\fB	uint32_t \fBstart\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Loads n materials starting from index position start into the material stack. See s3d_push_materials_a for more informations about the values in mbuf.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_load_materials_a
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_LOAD_MATERIALS_A" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_load_materials_a \- add materials with alpha to polygons
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 25
+.BI "int s3d_load_materials_a(int\ " "object" ", const\ float\ *" "mbuf" ", uint32_t\ " "start" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Loads n materials starting from index position start into the material stack\&. See s3d_push_materials_a for more informations about the values in mbuf\&.

Modified: trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_load_polygon_normals.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,26 @@
-.TH "s3d_load_polygon_normals" "3" 
-.SH "NAME" 
-s3d_load_polygon_normals \(em add normals to polygon 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_load_polygon_normals\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBnbuf\fR\fR, 
-\fB	uint32_t \fBstart\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_load_polygon_normals
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_LOAD_POLYGON_NOR" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_load_polygon_normals \- add normals to polygon
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 29
+.BI "int s3d_load_polygon_normals(int\ " "object" ", const\ float\ *" "nbuf" ", uint32_t\ " "start" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Just as s3d_pep_polygon_normals(), with the difference you won\'t alter the latest n polygons but n polygons starting with index start\&.

Modified: trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_load_polygon_tex_coords.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,26 @@
-.TH "s3d_load_polygon_tex_coords" "3" 
-.SH "NAME" 
-s3d_load_polygon_tex_coords \(em add texture coordinates to polygons 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_load_polygon_tex_coords\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBtbuf\fR\fR, 
-\fB	uint32_t \fBstart\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_load_polygon_tex_coords
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_LOAD_POLYGON_TEX" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_load_polygon_tex_coords \- add texture coordinates to polygons
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 32
+.BI "int s3d_load_polygon_tex_coords(int\ " "object" ", const\ float\ *" "tbuf" ", uint32_t\ " "start" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Just as s3d_pep_polygon_tex_coords(), with the difference you won\'t alter the latest n polygons but n polygons starting with index start\&.

Modified: trunk/Documentation/manpages/man3/s3d_load_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_load_texture.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,21 +1,26 @@
-.TH "s3d_load_texture" "3" 
-.SH "NAME" 
-s3d_load_texture \(em load texture from memory 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_load_texture\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBtex\fR\fR, 
-\fB	uint16_t \fBxpos\fR\fR, 
-\fB	uint16_t \fBypos\fR\fR, 
-\fB	uint16_t \fBw\fR\fR, 
-\fB	uint16_t \fBh\fR\fR, 
-\fB	const uint8_t *\fBdata\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-This will load an 32bit rgba image supplied in data at position xpos,ypos of the texture tex. The image has the width w and height h. This can be used to update only parts of the texture. It's no problem to supply big textures, as the image will be sent to server in fragments. Of course, you will have created the texture with s3d_push_texture, have an material assigned to the texture with s3d_pep_material_texture() and have your polygons set sane polygon texture coords using s3d_pep_polygon_tex_coord().          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_load_texture
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_LOAD_TEXTURE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_load_texture \- load texture from memory
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3d_load_texture(int\ " "object" ", uint32_t\ " "tex" ", uint16_t\ " "xpos" ", uint16_t\ " "ypos" ", uint16_t\ " "w" ", uint16_t\ " "h" ", const\ uint8_t\ *" "data" ");"
+.SH "DESCRIPTION"
+.PP
+This will load an 32bit rgba image supplied in data at position xpos,ypos of the texture tex\&. The image has the width w and height h\&. This can be used to update only parts of the texture\&. It\'s no problem to supply big textures, as the image will be sent to server in fragments\&. Of course, you will have created the texture with s3d_push_texture, have an material assigned to the texture with s3d_pep_material_texture() and have your polygons set sane polygon texture coords using s3d_pep_polygon_tex_coord()\&.

Modified: trunk/Documentation/manpages/man3/s3d_mainloop.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_mainloop.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,26 +1,38 @@
-.TH "s3d_mainloop" "3" 
-.SH "NAME" 
-s3d_mainloop \(em set mainloop of program 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_mainloop\fP\fR( 
-\fB	void(*)(void) \fBf\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time. 
-.PP 
-.nf 
-void mainloop(void) 
-{ 
-usleep(1000); // sleep 1 ms in every cycle 
-} 
-... 
- 
-s3d_mainloop(mainloop()); 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_mainloop
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_MAINLOOP" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_mainloop \- set mainloop of program
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 17
+.BI "int s3d_mainloop(void(*)(void)\ " "f" ");"
+.SH "DESCRIPTION"
+.PP
+Takes a function as argument\&. It will loop this function until a quit\-event is received\&. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu\-time\&.
+.sp
+.RS 4
+.nf
+ void mainloop(void)
+ {
+         usleep(1000); // sleep 1 ms in every cycle
+ }
+ \&.\&.\&.
+
+ s3d_mainloop(mainloop());
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_mcp_focus.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_mcp_focus.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_mcp_focus.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_mcp_focus" "3" 
-.SH "NAME" 
-s3d_mcp_focus \(em focus mcp object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_mcp_focus\fP\fR( 
-\fB	int \fBobject\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_mcp_focus
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_MCP_FOCUS" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_mcp_focus \- focus mcp object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 18
+.BI "int s3d_mcp_focus(int\ " "object" ");"
+.SH "DESCRIPTION"
+.PP
+This is an mcp\-only function\&. It gives focus (for receiving key\-strokes etc\&.) to an app referenced by it\'s mcp\-object\-id\&.

Modified: trunk/Documentation/manpages/man3/s3d_net_check.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_net_check.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,14 +1,26 @@
-.TH "s3d_net_check" "3" 
-.SH "NAME" 
-s3d_net_check \(em get events from server 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_net_check\fP\fR(\fBvoid\fR) 
-.fi 
-.SH "Description" 
-.PP 
-This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_net_check
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_NET_CHECK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_net_check \- get events from server
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 18
+.BI "int s3d_net_check(void);"
+.SH "DESCRIPTION"
+.PP
+This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own\&. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out\&.

Modified: trunk/Documentation/manpages/man3/s3d_new_object.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_new_object.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,21 +1,35 @@
-.TH "s3d_new_object" "3" 
-.SH "NAME" 
-s3d_new_object \(em create new object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_new_object\fP\fR(\fBvoid\fR) 
-.fi 
-.SH "Description" 
-.PP 
-Creates a new object, returning the object id. 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-Of course, you won't forget to toggle it visible, won't you?  
- 
-.RE 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_new_object
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_NEW_OBJECT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_new_object \- create new object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 19
+.BI "int s3d_new_object(void);"
+.SH "DESCRIPTION"
+.PP
+Creates a new object, returning the object id\&.
+.sp
+.it 1 an-trap
+.nr an-no-space-flag 1
+.nr an-break-flag 1
+.br
+Warning
+.PP
+Of course, you won\'t forget to toggle it visible, won\'t you?
+

Modified: trunk/Documentation/manpages/man3/s3d_open_file.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_open_file.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_open_file.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_open_file" "3" 
-.SH "NAME" 
-s3d_open_file \(em copy file into memory 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_open_file\fP\fR( 
-\fB	const char *\fBfname\fR\fR, 
-\fB	char **\fBpointer\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_open_file
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_OPEN_FILE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_open_file \- copy file into memory
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 18
+.BI "int s3d_open_file(const\ char\ *" "fname" ", char\ **" "pointer" ");"
+.SH "DESCRIPTION"
+.PP
+This opens the file fname, setting *pointer to it\'s memory position\&. the function will return the size of buffer\&. you can free() the pointer when you\'re finished\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_line.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,26 @@
-.TH "s3d_pep_line" "3" 
-.SH "NAME" 
-s3d_pep_line \(em rewrite line 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_line\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	int \fBv1\fR\fR, 
-\fB	int \fBv2\fR\fR, 
-\fB	int \fBmaterial\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Alter the latest pushed line, overwriting with the supplied values.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_line
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_LINE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_line \- rewrite line
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 17
+.BI "int s3d_pep_line(int\ " "object" ", int\ " "v1" ", int\ " "v2" ", int\ " "material" ");"
+.SH "DESCRIPTION"
+.PP
+Alter the latest pushed line, overwriting with the supplied values\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_line_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_line_normals.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,19 +1,28 @@
-.TH "s3d_pep_line_normals" "3" 
-.SH "NAME" 
-s3d_pep_line_normals \(em add normals to lines 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_line_normals\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBnbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models. 
-.PP 
-nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 vertices for each line so that makes 6 float values per line in total.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_line_normals
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_LINE_NORMALS" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_line_normals \- add normals to lines
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 25
+.BI "int s3d_pep_line_normals(int\ " "object" ", const\ float\ *" "nbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Adds normal information to lines, giving each vertex of a line a normal information\&. This makes lines somewhat nicer, you\'ll need that especially when you\'re going to build wireframe models\&.
+.PP
+nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 vertices for each line so that makes 6 float values per line in total\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_lines.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_lines.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_pep_lines" "3" 
-.SH "NAME" 
-s3d_pep_lines \(em rewrite lines 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_lines\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const uint32_t *\fBlbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_lines
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_LINES" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_lines \- rewrite lines
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 18
+.BI "int s3d_pep_lines(int\ " "object" ", const\ uint32_t\ *" "lbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Alter the latest n pushed lines\&. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_material.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,24 +1,26 @@
-.TH "s3d_pep_material" "3" 
-.SH "NAME" 
-s3d_pep_material \(em rewrite material 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_material\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBamb_r\fR\fR, 
-\fB	float \fBamb_g\fR\fR, 
-\fB	float \fBamb_b\fR\fR, 
-\fB	float \fBspec_r\fR\fR, 
-\fB	float \fBspec_g\fR\fR, 
-\fB	float \fBspec_b\fR\fR, 
-\fB	float \fBdiff_r\fR\fR, 
-\fB	float \fBdiff_g\fR\fR, 
-\fB	float \fBdiff_b\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Overwriting the latest pushed material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_material
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_MATERIAL" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_material \- rewrite material
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3d_pep_material(int\ " "object" ", float\ " "amb_r" ", float\ " "amb_g" ", float\ " "amb_b" ", float\ " "spec_r" ", float\ " "spec_g" ", float\ " "spec_b" ", float\ " "diff_r" ", float\ " "diff_g" ", float\ " "diff_b" ");"
+.SH "DESCRIPTION"
+.PP
+Overwriting the latest pushed material, overwriting the current value with the specified one\&. See s3d_pep_materials_a if you want to pep more materials\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_a.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,27 +1,26 @@
-.TH "s3d_pep_material_a" "3" 
-.SH "NAME" 
-s3d_pep_material_a \(em rewrite material with alpha 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_material_a\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBamb_r\fR\fR, 
-\fB	float \fBamb_g\fR\fR, 
-\fB	float \fBamb_b\fR\fR, 
-\fB	float \fBamb_a\fR\fR, 
-\fB	float \fBspec_r\fR\fR, 
-\fB	float \fBspec_g\fR\fR, 
-\fB	float \fBspec_b\fR\fR, 
-\fB	float \fBspec_a\fR\fR, 
-\fB	float \fBdiff_r\fR\fR, 
-\fB	float \fBdiff_g\fR\fR, 
-\fB	float \fBdiff_b\fR\fR, 
-\fB	float \fBdiff_a\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Overwriting the latest pushed material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_material_a
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_MATERIAL_A" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_material_a \- rewrite material with alpha
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 23
+.BI "int s3d_pep_material_a(int\ " "object" ", float\ " "amb_r" ", float\ " "amb_g" ", float\ " "amb_b" ", float\ " "amb_a" ", float\ " "spec_r" ", float\ " "spec_g" ", float\ " "spec_b" ", float\ " "spec_a" ", float\ " "diff_r" ", float\ " "diff_g" ", float\ " "diff_b" ", float\ " "diff_a" ");"
+.SH "DESCRIPTION"
+.PP
+Overwriting the latest pushed material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_material_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_material_texture.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_material_texture.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_pep_material_texture" "3" 
-.SH "NAME" 
-s3d_pep_material_texture \(em add texture to material 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_material_texture\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBtex\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_material_texture
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_MATERIAL_TEX" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_material_texture \- add texture to material
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 29
+.BI "int s3d_pep_material_texture(int\ " "object" ", uint32_t\ " "tex" ");"
+.SH "DESCRIPTION"
+.PP
+Assign the latest material a texture referenced by the index tex\&. Of course, you will have pushed this texture with s3d_push_texture()

Modified: trunk/Documentation/manpages/man3/s3d_pep_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_materials_a.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_pep_materials_a" "3" 
-.SH "NAME" 
-s3d_pep_materials_a \(em rewrite materials with alpha 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_materials_a\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBmbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Alters the last n pushed materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_materials_a
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_MATERIALS_A" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_materials_a \- rewrite materials with alpha
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 24
+.BI "int s3d_pep_materials_a(int\ " "object" ", const\ float\ *" "mbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Alters the last n pushed materials\&. See s3d_push_materials_a() for more information how mbuf should look like\&. Use s3d_pep_material_a() if you only want to alter the latest material\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_normals.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,19 +1,28 @@
-.TH "s3d_pep_polygon_normals" "3" 
-.SH "NAME" 
-s3d_pep_polygon_normals \(em add normals to polygon 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_polygon_normals\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBnbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects. 
-.PP 
-nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 vertices for each Polygon so that makes 9 float values per Polygon in total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_polygon_normals
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_POLYGON_NORM" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_polygon_normals \- add normals to polygon
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 28
+.BI "int s3d_pep_polygon_normals(int\ " "object" ", const\ float\ *" "nbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Adds normal information to polygons, giving each vertex of a polygon a normal information\&. With this, you can achieve smoothed edge effects\&.
+.PP
+nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 vertices for each Polygon so that makes 9 float values per Polygon in total\&. Don\'t worry if you don\'t use this, it\'s kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coord.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,21 +1,26 @@
-.TH "s3d_pep_polygon_tex_coord" "3" 
-.SH "NAME" 
-s3d_pep_polygon_tex_coord \(em add texture coordinates to polygon 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_polygon_tex_coord\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBx1\fR\fR, 
-\fB	float \fBy1\fR\fR, 
-\fB	float \fBx2\fR\fR, 
-\fB	float \fBy2\fR\fR, 
-\fB	float \fBx3\fR\fR, 
-\fB	float \fBy3\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_polygon_tex_coord
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_POLYGON_TEX_" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_polygon_tex_coord \- add texture coordinates to polygon
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 30
+.BI "int s3d_pep_polygon_tex_coord(int\ " "object" ", float\ " "x1" ", float\ " "y1" ", float\ " "x2" ", float\ " "y2" ", float\ " "x3" ", float\ " "y3" ");"
+.SH "DESCRIPTION"
+.PP
+Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively\&. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon\&. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()

Modified: trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_polygon_tex_coords.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_pep_polygon_tex_coords" "3" 
-.SH "NAME" 
-s3d_pep_polygon_tex_coords \(em add texture coordinates to polygons 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_polygon_tex_coords\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBtbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_polygon_tex_coords
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_POLYGON_TEX_" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_polygon_tex_coords \- add texture coordinates to polygons
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 31
+.BI "int s3d_pep_polygon_tex_coords(int\ " "object" ", const\ float\ *" "tbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Pimp the latest n polygons with texture coordinates\&. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()

Modified: trunk/Documentation/manpages/man3/s3d_pep_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_vertex.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_vertex.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,26 @@
-.TH "s3d_pep_vertex" "3" 
-.SH "NAME" 
-s3d_pep_vertex \(em rewrite vertex 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_vertex\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBx\fR\fR, 
-\fB	float \fBy\fR\fR, 
-\fB	float \fBz\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Alter the latest pushed vertex, overwriting with the supplied values.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_vertex
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_VERTEX" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_vertex \- rewrite vertex
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 19
+.BI "int s3d_pep_vertex(int\ " "object" ", float\ " "x" ", float\ " "y" ", float\ " "z" ");"
+.SH "DESCRIPTION"
+.PP
+Alter the latest pushed vertex, overwriting with the supplied values\&.

Modified: trunk/Documentation/manpages/man3/s3d_pep_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pep_vertices.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pep_vertices.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_pep_vertices" "3" 
-.SH "NAME" 
-s3d_pep_vertices \(em rewrite lines 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pep_vertices\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBvbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pep_vertices
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PEP_VERTICES" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pep_vertices \- rewrite lines
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3d_pep_vertices(int\ " "object" ", const\ float\ *" "vbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Alter the latest n pushed vertex\&. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices\&.

Modified: trunk/Documentation/manpages/man3/s3d_pop_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pop_event.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,14 +1,26 @@
-.TH "s3d_pop_event" "3" 
-.SH "NAME" 
-s3d_pop_event \(em pop event from stack 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBstruct s3d_evt *\fBs3d_pop_event\fP\fR(\fBvoid\fR) 
-.fi 
-.SH "Description" 
-.PP 
-Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pop_event
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_POP_EVENT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pop_event \- pop event from stack
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 30
+.BI "struct s3d_evt *s3d_pop_event(void);"
+.SH "DESCRIPTION"
+.PP
+Pops the latest event from the stack\&. Don\'t forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt\&.

Modified: trunk/Documentation/manpages/man3/s3d_pop_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_line.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pop_line.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_pop_line" "3" 
-.SH "NAME" 
-s3d_pop_line \(em remove lines 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pop_line\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Deletes the latest n lines from the line stack of the object.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pop_line
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_POP_LINE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pop_line \- remove lines
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 17
+.BI "int s3d_pop_line(int\ " "object" ", uint32_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Deletes the latest n lines from the line stack of the object\&.

Modified: trunk/Documentation/manpages/man3/s3d_pop_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_material.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pop_material.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_pop_material" "3" 
-.SH "NAME" 
-s3d_pop_material \(em remove materials 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pop_material\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Deletes the latest n material from the material stack of the object.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pop_material
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_POP_MATERIAL" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pop_material \- remove materials
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3d_pop_material(int\ " "object" ", uint32_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Deletes the latest n material from the material stack of the object\&.

Modified: trunk/Documentation/manpages/man3/s3d_pop_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_polygon.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pop_polygon.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_pop_polygon" "3" 
-.SH "NAME" 
-s3d_pop_polygon \(em remove polygons 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pop_polygon\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Deletes the latest n polygon from the polygon stack of the object.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pop_polygon
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_POP_POLYGON" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pop_polygon \- remove polygons
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 20
+.BI "int s3d_pop_polygon(int\ " "object" ", uint32_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Deletes the latest n polygon from the polygon stack of the object\&.

Modified: trunk/Documentation/manpages/man3/s3d_pop_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_texture.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pop_texture.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_pop_texture" "3" 
-.SH "NAME" 
-s3d_pop_texture \(em remove textures 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pop_texture\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Deletes the latest n textures from the texture stack of the object.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pop_texture
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_POP_TEXTURE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pop_texture \- remove textures
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 20
+.BI "int s3d_pop_texture(int\ " "object" ", uint32_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Deletes the latest n textures from the texture stack of the object\&.

Modified: trunk/Documentation/manpages/man3/s3d_pop_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_pop_vertex.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_pop_vertex.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_pop_vertex" "3" 
-.SH "NAME" 
-s3d_pop_vertex \(em remove vertices 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_pop_vertex\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Deletes the latest n vertices from the vertex stack of the object.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_pop_vertex
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_POP_VERTEX" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_pop_vertex \- remove vertices
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 19
+.BI "int s3d_pop_vertex(int\ " "object" ", uint32_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Deletes the latest n vertices from the vertex stack of the object\&.

Modified: trunk/Documentation/manpages/man3/s3d_process_stack.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_process_stack.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,30 @@
-.TH "s3d_process_stack" "3" 
-.SH "NAME" 
-s3d_process_stack \(em process all events on stack 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBvoid \fBs3d_process_stack\fP\fR(\fBvoid\fR) 
-.fi 
-.SH "Description" 
-.PP 
-This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack. 
-.PP 
-Deprecated 
-.PP 
-This is probably obsolete          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_process_stack
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PROCESS_STACK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_process_stack \- process all events on stack
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 23
+.BI "void s3d_process_stack(void);"
+.SH "DESCRIPTION"
+.PP
+This function goes through all function of the event\-stack and will call functions\&. this is useful when you define a new function but still have a lot of events of this type on the stack\&.
+.PP
+Deprecated
+.PP
+This is probably obsolete

Modified: trunk/Documentation/manpages/man3/s3d_push_event.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_event.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_event.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_push_event" "3" 
-.SH "NAME" 
-s3d_push_event \(em push event onto stack 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBvoid \fBs3d_push_event\fP\fR( 
-\fB	struct s3d_evt *\fBnewevt\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Pushes an event onto the event-stack. Usually you don't need to do this manually.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_event
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_EVENT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_event \- push event onto stack
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 20
+.BI "void s3d_push_event(struct\ s3d_evt\ *" "newevt" ");"
+.SH "DESCRIPTION"
+.PP
+Pushes an event onto the event\-stack\&. Usually you don\'t need to do this manually\&.

Modified: trunk/Documentation/manpages/man3/s3d_push_line.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_line.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,26 @@
-.TH "s3d_push_line" "3" 
-.SH "NAME" 
-s3d_push_line \(em push line 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_line\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBv1\fR\fR, 
-\fB	uint32_t \fBv2\fR\fR, 
-\fB	uint32_t \fBmaterial\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Push one line on the line stack of the object. It takes 2 vertex-index-no, and one material material-index-no. as argument. If you have a lot of lines to push, use s3d_push_lines()          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_line
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_LINE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_line \- push line
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 18
+.BI "int s3d_push_line(int\ " "object" ", uint32_t\ " "v1" ", uint32_t\ " "v2" ", uint32_t\ " "material" ");"
+.SH "DESCRIPTION"
+.PP
+Push one line on the line stack of the object\&. It takes 2 vertex\-index\-no, and one material material\-index\-no\&. as argument\&. If you have a lot of lines to push, use s3d_push_lines()

Modified: trunk/Documentation/manpages/man3/s3d_push_lines.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_lines.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_push_lines" "3" 
-.SH "NAME" 
-s3d_push_lines \(em push many lines 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_lines\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const uint32_t *\fBlbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Pushing n lines on the line stack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_lines
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_LINES" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_lines \- push many lines
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 19
+.BI "int s3d_push_lines(int\ " "object" ", const\ uint32_t\ *" "lbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Pushing n lines on the line stack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line()\&.

Modified: trunk/Documentation/manpages/man3/s3d_push_material.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_material.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,24 +1,26 @@
-.TH "s3d_push_material" "3" 
-.SH "NAME" 
-s3d_push_material \(em push material 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_material\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBamb_r\fR\fR, 
-\fB	float \fBamb_g\fR\fR, 
-\fB	float \fBamb_b\fR\fR, 
-\fB	float \fBspec_r\fR\fR, 
-\fB	float \fBspec_g\fR\fR, 
-\fB	float \fBspec_b\fR\fR, 
-\fB	float \fBdiff_r\fR\fR, 
-\fB	float \fBdiff_g\fR\fR, 
-\fB	float \fBdiff_b\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. The material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. The diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_material
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_MATERIAL" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_material \- push material
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 22
+.BI "int s3d_push_material(int\ " "object" ", float\ " "amb_r" ", float\ " "amb_g" ", float\ " "amb_b" ", float\ " "spec_r" ", float\ " "spec_g" ", float\ " "spec_b" ", float\ " "diff_r" ", float\ " "diff_g" ", float\ " "diff_b" ");"
+.SH "DESCRIPTION"
+.PP
+Pushes a material for an object\&. you will have to count them yourself too, as polygons will ask for the material index number\&. The material properties are given in rgb (red/green/blue) color codes, in float\&. 0\&.0 is the minimum, 1\&.0 is the maximum a color value can be\&. The specular color is the color which is directly reflected from the light source\&. The diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object\&.

Modified: trunk/Documentation/manpages/man3/s3d_push_material_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_material_a.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_material_a.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,27 +1,26 @@
-.TH "s3d_push_material_a" "3" 
-.SH "NAME" 
-s3d_push_material_a \(em push material with alpha 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_material_a\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBamb_r\fR\fR, 
-\fB	float \fBamb_g\fR\fR, 
-\fB	float \fBamb_b\fR\fR, 
-\fB	float \fBamb_a\fR\fR, 
-\fB	float \fBspec_r\fR\fR, 
-\fB	float \fBspec_g\fR\fR, 
-\fB	float \fBspec_b\fR\fR, 
-\fB	float \fBspec_a\fR\fR, 
-\fB	float \fBdiff_r\fR\fR, 
-\fB	float \fBdiff_g\fR\fR, 
-\fB	float \fBdiff_b\fR\fR, 
-\fB	float \fBdiff_a\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_material_a
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_MATERIAL_A" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_material_a \- push material with alpha
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 24
+.BI "int s3d_push_material_a(int\ " "object" ", float\ " "amb_r" ", float\ " "amb_g" ", float\ " "amb_b" ", float\ " "amb_a" ", float\ " "spec_r" ", float\ " "spec_g" ", float\ " "spec_b" ", float\ " "spec_a" ", float\ " "diff_r" ", float\ " "diff_g" ", float\ " "diff_b" ", float\ " "diff_a" ");"
+.SH "DESCRIPTION"
+.PP
+Same as s3d_push_material, but color has alpha value added\&. Use s3d_push_materials_a() if you have a lot of materials to push\&.

Modified: trunk/Documentation/manpages/man3/s3d_push_materials_a.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_materials_a.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,39 +1,49 @@
-.TH "s3d_push_materials_a" "3" 
-.SH "NAME" 
-s3d_push_materials_a \(em push many materials 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_materials_a\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBmbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Pushes a buffer of materials. Those materials are in the format float[n*12], with 
-.PP 
-mbuf[n*12 + 0-3] \- ambience 
-.PP 
-mbuf[n*12 + 4-7] \- specular 
-.PP 
-mbuf[n *12 + 8-11] \- diffusion values 
-.PP 
-of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy s3d_push_material_a() function. 
-.PP 
-.nf 
-// each line has r,g,b,a value 
-float bla[24]= 
-{1, 0, 0, 1, 
-1, 0, 0, 1, 
-1, 0, 0, 1, 
-0, 1, 1, 1, 
-0, 1, 1, 1, 
-0, 1, 1, 1}; 
- 
-s3d_push_materials_a(object, bla, 2); // push a red and a cyan material 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_materials_a
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_MATERIALS_A" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_materials_a \- push many materials
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 25
+.BI "int s3d_push_materials_a(int\ " "object" ", const\ float\ *" "mbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Pushes a buffer of materials\&. Those materials are in the format float[n*12], with
+.PP
+mbuf[n*12 + 0\-3] \- ambience
+.PP
+mbuf[n*12 + 4\-7] \- specular
+.PP
+mbuf[n *12 + 8\-11] \- diffusion values
+.PP
+of each entry\&. n is the number of materials pushed\&. The values are in the order r,g,b,a\&. If you only want to push one material, use the more easy s3d_push_material_a() function\&.
+.sp
+.RS 4
+.nf
+ // each line has r,g,b,a value
+ float bla[24]=
+         {1, 0, 0, 1,
+          1, 0, 0, 1,
+          1, 0, 0, 1,
+          0, 1, 1, 1,
+          0, 1, 1, 1,
+          0, 1, 1, 1};
+
+ s3d_push_materials_a(object, bla, 2); // push a red and a cyan material
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_push_polygon.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_polygon.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,30 +1,38 @@
-.TH "s3d_push_polygon" "3" 
-.SH "NAME" 
-s3d_push_polygon \(em push polygon 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_polygon\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint32_t \fBv1\fR\fR, 
-\fB	uint32_t \fBv2\fR\fR, 
-\fB	uint32_t \fBv3\fR\fR, 
-\fB	uint32_t \fBmaterial\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Push one polygon on the polygon stack of the object. It takes 3 vertex-index numbers and one material material-index-no. as argument. 
-.PP 
-.nf 
-int oid = s3d_new_object();   // create a new object 
-s3d_push_vertex(oid, 0.0, 0.0, 0.0); 
-s3d_push_vertex(oid, 0.0, 1.0, 0.0); 
-s3d_push_vertex(oid, 1.0, 0.0, 0.0); 
-s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0); 
-s3d_push_polygon(oid, 0, 1, 2, 0); 
-// this will create a red polygon 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_polygon
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_POLYGON" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_polygon \- push polygon
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3d_push_polygon(int\ " "object" ", uint32_t\ " "v1" ", uint32_t\ " "v2" ", uint32_t\ " "v3" ", uint32_t\ " "material" ");"
+.SH "DESCRIPTION"
+.PP
+Push one polygon on the polygon stack of the object\&. It takes 3 vertex\-index numbers and one material material\-index\-no\&. as argument\&.
+.sp
+.RS 4
+.nf
+ int oid = s3d_new_object();   // create a new object
+ s3d_push_vertex(oid, 0\&.0, 0\&.0, 0\&.0);
+ s3d_push_vertex(oid, 0\&.0, 1\&.0, 0\&.0);
+ s3d_push_vertex(oid, 1\&.0, 0\&.0, 0\&.0);
+ s3d_push_material(oid, 0\&.3, 0\&.0, 0\&.0, 1\&.0, 1\&.0, 1\&.0, 1\&.0, 0\&.0, 0\&.0);
+ s3d_push_polygon(oid, 0, 1, 2, 0);
+ // this will create a red polygon
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_push_polygons.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_polygons.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,29 +1,39 @@
-.TH "s3d_push_polygons" "3" 
-.SH "NAME" 
-s3d_push_polygons \(em push many polygons 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_polygons\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const uint32_t *\fBpbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index. 
-.PP 
-.nf 
-uint32_t pbuf[] = { 0, 1, 2, 0}; 
-int oid = s3d_new_object();   // create a new object 
-s3d_push_vertex(oid, 0.0, 0.0, 0.0); 
-s3d_push_vertex(oid, 0.0, 1.0, 0.0); 
-s3d_push_vertex(oid, 1.0, 0.0, 0.0); 
-s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0); 
-s3d_push_polygons(oid, pbuf, 1); 
-// push one polygon with the pbuf data 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_polygons
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_POLYGONS" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_polygons \- push many polygons
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 22
+.BI "int s3d_push_polygons(int\ " "object" ", const\ uint32_t\ *" "pbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+As for vertices, you can push arrays of polygons to have greater performance\&. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index\&.
+.sp
+.RS 4
+.nf
+ uint32_t pbuf[] = { 0, 1, 2, 0};
+ int oid = s3d_new_object();   // create a new object
+ s3d_push_vertex(oid, 0\&.0, 0\&.0, 0\&.0);
+ s3d_push_vertex(oid, 0\&.0, 1\&.0, 0\&.0);
+ s3d_push_vertex(oid, 1\&.0, 0\&.0, 0\&.0);
+ s3d_push_material(oid, 0\&.3, 0\&.0, 0\&.0, 1\&.0, 1\&.0, 1\&.0, 1\&.0, 0\&.0, 0\&.0);
+ s3d_push_polygons(oid, pbuf, 1);
+ // push one polygon with the pbuf data
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_push_texture.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_texture.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_push_texture" "3" 
-.SH "NAME" 
-s3d_push_texture \(em push texture 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_texture\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	uint16_t \fBw\fR\fR, 
-\fB	uint16_t \fBh\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Adds a new texture with height w and height h on the texture stack.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_texture
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_TEXTURE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_texture \- push texture
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3d_push_texture(int\ " "object" ", uint16_t\ " "w" ", uint16_t\ " "h" ");"
+.SH "DESCRIPTION"
+.PP
+Adds a new texture with height w and height h on the texture stack\&.

Modified: trunk/Documentation/manpages/man3/s3d_push_textures.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_textures.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_textures.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_push_textures" "3" 
-.SH "NAME" 
-s3d_push_textures \(em push many textures 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_textures\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const uint16_t *\fBtbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_textures
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_TEXTURES" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_textures \- push many textures
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 22
+.BI "int s3d_push_textures(int\ " "object" ", const\ uint16_t\ *" "tbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+As for vertices, you can push arrays of textures on the texture stack to have greater performance\&. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture\&.

Modified: trunk/Documentation/manpages/man3/s3d_push_vertex.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_vertex.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,18 +1,26 @@
-.TH "s3d_push_vertex" "3" 
-.SH "NAME" 
-s3d_push_vertex \(em push vertex 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_vertex\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBx\fR\fR, 
-\fB	float \fBy\fR\fR, 
-\fB	float \fBz\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Pushes a vertex onto the vertex stack. Make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_vertex
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_VERTEX" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_vertex \- push vertex
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 20
+.BI "int s3d_push_vertex(int\ " "object" ", float\ " "x" ", float\ " "y" ", float\ " "z" ");"
+.SH "DESCRIPTION"
+.PP
+Pushes a vertex onto the vertex stack\&. Make sure that you count how many vertices you\'ve pushed because you\'ll need that for referencing when you push your polygons\&.

Modified: trunk/Documentation/manpages/man3/s3d_push_vertices.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_push_vertices.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,25 +1,35 @@
-.TH "s3d_push_vertices" "3" 
-.SH "NAME" 
-s3d_push_vertices \(em push many vertices 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_push_vertices\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	const float *\fBvbuf\fR\fR, 
-\fB	uint16_t \fBn\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case).  
-.PP 
-.nf 
-float vertices[] = { 0.0, 0.0, 0.0, 
-1.0, 2.0, 3.0, 
-3.0, 2.0, 1.0}; 
-s3d_push_vertices(object, vertices, 3); // pushing 3 vertices 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_push_vertices
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_PUSH_VERTICES" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_push_vertices \- push many vertices
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 22
+.BI "int s3d_push_vertices(int\ " "object" ", const\ float\ *" "vbuf" ", uint16_t\ " "n" ");"
+.SH "DESCRIPTION"
+.PP
+Push some vertices from an array\&. that\'s much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that\'s probably the usual case)\&.
+.sp
+.RS 4
+.nf
+ float vertices[] = { 0\&.0, 0\&.0, 0\&.0,
+                      1\&.0, 2\&.0, 3\&.0,
+                      3\&.0, 2\&.0, 1\&.0};
+ s3d_push_vertices(object, vertices, 3); // pushing 3 vertices
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_quit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_quit.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,14 +1,26 @@
-.TH "s3d_quit" "3" 
-.SH "NAME" 
-s3d_quit \(em shutdown s3d library 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_quit\fP\fR(\fBvoid\fR) 
-.fi 
-.SH "Description" 
-.PP 
-Closes the connection and clears the event-stack. It can also be used to leave the s3d_mainloop().          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_quit
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_QUIT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_quit \- shutdown s3d library
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 13
+.BI "int s3d_quit(void);"
+.SH "DESCRIPTION"
+.PP
+Closes the connection and clears the event\-stack\&. It can also be used to leave the s3d_mainloop()\&.

Modified: trunk/Documentation/manpages/man3/s3d_rotate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_rotate.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,33 +1,45 @@
-.TH "s3d_rotate" "3" 
-.SH "NAME" 
-s3d_rotate \(em rotate object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_rotate\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBx\fR\fR, 
-\fB	float \fBy\fR\fR, 
-\fB	float \fBz\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees. 
-.PP 
-You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes it any clearer ;) 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-Rotate is absolute, not relative! 
-.RE 
-.PP 
-.nf 
-s3d_rotate(object, 90,  0, 0); 
-s3d_rotate(object, 180, 0, 0); 
-// object will be rotated 180 degrees around the x-axis, not 270 degress! 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_rotate
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_ROTATE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_rotate \- rotate object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 15
+.BI "int s3d_rotate(int\ " "object" ", float\ " "x" ", float\ " "y" ", float\ " "z" ");"
+.SH "DESCRIPTION"
+.PP
+Rotate an object around the x, y and z\-axis respectively\&. x,y,z may have values between [0,360] degrees\&.
+.PP
+You will usually only rotate around one axis, leaving the unused fields on 0, I guess\&. If you want to rotate around more than one axis, please note: The order of the rotation applies is y\-axis, x\-axis, and then z\-axis\&. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis\&. (I wonder if that makes it any clearer ;)
+.sp
+.it 1 an-trap
+.nr an-no-space-flag 1
+.nr an-break-flag 1
+.br
+Warning
+.PP
+Rotate is absolute, not relative!
+
+.sp
+.RS 4
+.nf
+ s3d_rotate(object, 90,  0, 0);
+ s3d_rotate(object, 180, 0, 0);
+ // object will be rotated 180 degrees around the x\-axis, not 270 degress!
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_scale.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_scale.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_scale.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,23 +1,35 @@
-.TH "s3d_scale" "3" 
-.SH "NAME" 
-s3d_scale \(em scale object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_scale\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBs\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Scales the object. about factor s. s=1 will be the original size, \-1 will mirror it. 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative!  
- 
-.RE 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_scale
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_SCALE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_scale \- scale object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 14
+.BI "int s3d_scale(int\ " "object" ", float\ " "s" ");"
+.SH "DESCRIPTION"
+.PP
+Scales the object\&. about factor s\&. s=1 will be the original size, \-1 will mirror it\&.
+.sp
+.it 1 an-trap
+.nr an-no-space-flag 1
+.nr an-break-flag 1
+.br
+Warning
+.PP
+s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative!
+

Modified: trunk/Documentation/manpages/man3/s3d_select_font.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_select_font.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_select_font.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,26 +1,41 @@
-.TH "s3d_select_font" "3" 
-.SH "NAME" 
-s3d_select_font \(em select font 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_select_font\fP\fR( 
-\fB	const char *\fBmask\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-This selects a font for the s3d_draw_string() function. 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-Of course, you won't forget to toggle it visible, won't you? 
-.RE 
-.PP 
-.nf 
-s3d_select_font("vera"); // will use the vera font face 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_select_font
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_SELECT_FONT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_select_font \- select font
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 20
+.BI "int s3d_select_font(const\ char\ *" "mask" ");"
+.SH "DESCRIPTION"
+.PP
+This selects a font for the s3d_draw_string() function\&.
+.sp
+.it 1 an-trap
+.nr an-no-space-flag 1
+.nr an-break-flag 1
+.br
+Warning
+.PP
+Of course, you won\'t forget to toggle it visible, won\'t you?
+
+.sp
+.RS 4
+.nf
+ s3d_select_font("vera"); // will use the vera font face
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_set_callback.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_set_callback.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,35 +1,49 @@
-.TH "s3d_set_callback" "3" 
-.SH "NAME" 
-s3d_set_callback \(em sets a callback 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBvoid \fBs3d_set_callback\fP\fR( 
-\fB	uint8_t \fBevent\fR\fR, 
-\fB	s3d_cb \fBfunc\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop. 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-Defining callbacks will only work after calling s3d_init() 
-.RE 
-.PP 
-.nf 
-#include <inttypes.h> 
- 
-void obj_click(struct s3d_evt event) 
-{ 
-printf("object id %"PRIu32" got clicked", *((uint32_t *)event->buf)); 
-} 
-... 
-s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click); 
-// this will tell you when a object got clicked 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_set_callback
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_SET_CALLBACK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_set_callback \- sets a callback
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 22
+.BI "void s3d_set_callback(uint8_t\ " "event" ", s3d_cb\ " "func" ");"
+.SH "DESCRIPTION"
+.PP
+Sets a callback for a certain event\&. this is very useful for event\-oriented applications\&. event callbacks will not interrupt each other or the mainloop\&.
+.sp
+.it 1 an-trap
+.nr an-no-space-flag 1
+.nr an-break-flag 1
+.br
+Warning
+.PP
+Defining callbacks will only work after calling s3d_init()
+
+.sp
+.RS 4
+.nf
+ #include <inttypes\&.h>
+
+ void obj_click(struct s3d_evt event)
+ {
+         printf("object id %"PRIu32" got clicked", *((uint32_t *)event\->buf));
+ }
+ \&.\&.\&.
+ s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click);
+ // this will tell you when a object got clicked
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_strlen.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_strlen.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_strlen.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_strlen" "3" 
-.SH "NAME" 
-s3d_strlen \(em get rendered string size 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBfloat \fBs3d_strlen\fP\fR( 
-\fB	const char *\fBstr\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_strlen
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_STRLEN" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_strlen \- get rendered string size
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 17
+.BI "float s3d_strlen(const\ char\ *" "str" ");"
+.SH "DESCRIPTION"
+.PP
+Returns the length of the string if it were rendered with the currently selected font\&. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text\&.

Modified: trunk/Documentation/manpages/man3/s3d_translate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_translate.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_translate.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,31 +1,43 @@
-.TH "s3d_translate" "3" 
-.SH "NAME" 
-s3d_translate \(em move object to absolute position 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_translate\fP\fR( 
-\fB	int \fBobject\fR\fR, 
-\fB	float \fBx\fR\fR, 
-\fB	float \fBy\fR\fR, 
-\fB	float \fBz\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0. 
-.PP 
-.RS 
-\fBWarning:   
-.PP 
-Translation is absolute, not relative! 
-.RE 
-.PP 
-.nf 
-s3d_translate(object, 2, 0, 0); 
-s3d_translate(object, 4, 0, 0); 
-// object will end up at 4,0,0 and not 6,0,0!! 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_translate
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_TRANSLATE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_translate \- move object to absolute position
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 18
+.BI "int s3d_translate(int\ " "object" ", float\ " "x" ", float\ " "y" ", float\ " "z" ");"
+.SH "DESCRIPTION"
+.PP
+Move the object to some position in space\&. when you create an object, it\'s always located at 0\&.0 , 0\&.0, 0\&.0\&.
+.sp
+.it 1 an-trap
+.nr an-no-space-flag 1
+.nr an-break-flag 1
+.br
+Warning
+.PP
+Translation is absolute, not relative!
+
+.sp
+.RS 4
+.nf
+ s3d_translate(object, 2, 0, 0);
+ s3d_translate(object, 4, 0, 0);
+ // object will end up at 4,0,0 and not 6,0,0!!
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3d_unlink.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_unlink.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_unlink.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_unlink" "3" 
-.SH "NAME" 
-s3d_unlink \(em removes link from another object 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBint \fBs3d_unlink\fP\fR( 
-\fB	int \fBoid\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Remove the link of object oid to its target.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_unlink
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_UNLINK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_unlink \- removes link from another object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 15
+.BI "int s3d_unlink(int\ " "oid" ");"
+.SH "DESCRIPTION"
+.PP
+Remove the link of object oid to its target\&.

Modified: trunk/Documentation/manpages/man3/s3d_usage.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_usage.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,14 +1,26 @@
-.TH "s3d_usage" "3" 
-.SH "NAME" 
-s3d_usage \(em print s3d parameter 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBvoid \fBs3d_usage\fP\fR(\fBvoid\fR) 
-.fi 
-.SH "Description" 
-.PP 
-Prints the possible parameter for the client library (which can be passed in s3d_init())          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_usage
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_USAGE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_usage \- print s3d parameter
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 15
+.BI "void s3d_usage(void);"
+.SH "DESCRIPTION"
+.PP
+Prints the possible parameter for the client library (which can be passed in s3d_init())

Modified: trunk/Documentation/manpages/man3/s3d_vector_angle.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_angle.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_vector_angle.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_vector_angle" "3" 
-.SH "NAME" 
-s3d_vector_angle \(em calculate angle between two vectors 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBfloat \fBs3d_vector_angle\fP\fR( 
-\fB	const float \fBvector1\fR[]\fR, 
-\fB	const float \fBvector2\fR[]\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_vector_angle
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_VECTOR_ANGLE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_vector_angle \- calculate angle between two vectors
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 23
+.BI "float s3d_vector_angle(const\ float\ " "vector1" "[], const\ float\ " "vector2" "[]);"
+.SH "DESCRIPTION"
+.PP
+Calculates and returns the angle between vector1 and vector2\&. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI\&. All vectors should have the format float[3]\&. More info on wikipedia\&. http://en\&.wikipedia\&.org/wiki/Vector_(spatial)

Modified: trunk/Documentation/manpages/man3/s3d_vector_cross_product.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_cross_product.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_vector_cross_product.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_vector_cross_product" "3" 
-.SH "NAME" 
-s3d_vector_cross_product \(em calculate cross product of two vectors 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBvoid \fBs3d_vector_cross_product\fP\fR( 
-\fB	const float \fBvector1\fR[]\fR, 
-\fB	const float \fBvector2\fR[]\fR, 
-\fB	float \fBresult_vector\fR[]\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_vector_cross_product
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_VECTOR_CROSS_PRO" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_vector_cross_product \- calculate cross product of two vectors
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 30
+.BI "void s3d_vector_cross_product(const\ float\ " "vector1" "[], const\ float\ " "vector2" "[], float\ " "result_vector" "[]);"
+.SH "DESCRIPTION"
+.PP
+Calculates and returns the cross product of vector1 and vector2\&. All vectors should have the format float[3]\&. More info on wikipedia\&. http://en\&.wikipedia\&.org/wiki/Vector_(spatial)

Modified: trunk/Documentation/manpages/man3/s3d_vector_dot_product.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_dot_product.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_vector_dot_product.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3d_vector_dot_product" "3" 
-.SH "NAME" 
-s3d_vector_dot_product \(em calculate dot product of two vectors 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBfloat \fBs3d_vector_dot_product\fP\fR( 
-\fB	const float \fBvector1\fR[]\fR, 
-\fB	const float \fBvector2\fR[]\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_vector_dot_product
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_VECTOR_DOT_PRODU" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_vector_dot_product \- calculate dot product of two vectors
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 29
+.BI "float s3d_vector_dot_product(const\ float\ " "vector1" "[], const\ float\ " "vector2" "[]);"
+.SH "DESCRIPTION"
+.PP
+Calculates and returns the dot product of vector1 and vector2\&. All vectors should have the format float[3]\&. More info on wikipedia\&. http://en\&.wikipedia\&.org/wiki/Vector_(spatial)

Modified: trunk/Documentation/manpages/man3/s3d_vector_length.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_length.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_vector_length.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3d_vector_length" "3" 
-.SH "NAME" 
-s3d_vector_length \(em calculate length of vector 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBfloat \fBs3d_vector_length\fP\fR( 
-\fB	const float \fBvector\fR[]\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_vector_length
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_VECTOR_LENGTH" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_vector_length \- calculate length of vector
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 24
+.BI "float s3d_vector_length(const\ float\ " "vector" "[]);"
+.SH "DESCRIPTION"
+.PP
+Calculates and returns the length of the given vector (which should be of the type float[3])\&. More info on wikipedia http://en\&.wikipedia\&.org/wiki/Vector_(spatial)

Modified: trunk/Documentation/manpages/man3/s3d_vector_subtract.3
===================================================================
--- trunk/Documentation/manpages/man3/s3d_vector_subtract.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3d_vector_subtract.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3d_vector_subtract" "3" 
-.SH "NAME" 
-s3d_vector_subtract \(em substract two vectors 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.sp 1 
-\fBvoid \fBs3d_vector_subtract\fP\fR( 
-\fB	const float \fBvector1\fR[]\fR, 
-\fB	const float \fBvector2\fR[]\fR, 
-\fB	float \fBresult_vector\fR[]\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_vector_subtract
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_VECTOR_SUBTRACT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_vector_subtract \- substract two vectors
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.HP 25
+.BI "void s3d_vector_subtract(const\ float\ " "vector1" "[], const\ float\ " "vector2" "[], float\ " "result_vector" "[]);"
+.SH "DESCRIPTION"
+.PP
+Subtracts vector1 from vector2, writing result into result_vector\&. All vectors should have the format float[3]\&. More info on wikipedia\&. http://en\&.wikipedia\&.org/wiki/Vector_(spatial)

Modified: trunk/Documentation/manpages/man3/s3dw_ani_mate.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_ani_mate.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,29 +1,42 @@
-.TH "s3dw_ani_mate" "3" 
-.SH "NAME" 
-s3dw_ani_mate \(em doing the whole animation thing 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_ani_mate\fP\fR(\fBvoid\fR) 
-.fi 
-.SH "Description" 
-.PP 
-Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;) 
-.PP 
-.nf 
-#include <time.h>   // nanosleep() 
-static struct timespec t={0.33*1000*1000}; // 33 mili seconds 
-void mainloop() 
-{ 
-// keep this in your mainloop. this will do smooth animations for you ... 
-s3dw_ani_mate(); 
-nanosleep(&t,NULL); 
-} 
- 
-.... 
-s3d_mainloop(mainloop); 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_ani_mate
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_ANI_MATE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_ani_mate \- doing the whole animation thing
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 19
+.BI "void s3dw_ani_mate(void);"
+.SH "DESCRIPTION"
+.PP
+Just call this in your mainloop if you want some nice window sliding animations\&. it\'s somewhat bloating, but you don\'t want to miss it ;)
+.sp
+.RS 4
+.nf
+ #include <time\&.h>   // nanosleep()
+ static struct timespec t={0\&.33*1000*1000}; // 33 mili seconds
+ void mainloop()
+ {
+         // keep this in your mainloop\&. this will do smooth animations for you \&.\&.\&.
+         s3dw_ani_mate();
+         nanosleep(&t,NULL);
+ }
+
+ \&.\&.\&.\&.
+ s3d_mainloop(mainloop);
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3dw_button_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_button_new.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,20 +1,28 @@
-.TH "s3dw_button_new" "3" 
-.SH "NAME" 
-s3dw_button_new \(em create a new button in the surface 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBs3dw_button *\fBs3dw_button_new\fP\fR( 
-\fB	const s3dw_surface *\fBsurface\fR\fR, 
-\fB	const char *\fBtext\fR\fR, 
-\fB	float \fBposx\fR\fR, 
-\fB	float \fBposy\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Creates a new button on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. 
-.PP 
-See s3dw_button for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_button_new
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_BUTTON_NEW" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_button_new \- create a new button in the surface
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 29
+.BI "s3dw_button *s3dw_button_new(const\ s3dw_surface\ *" "surface" ", const\ char\ *" "text" ", float\ " "posx" ", float\ " "posy" ");"
+.SH "DESCRIPTION"
+.PP
+Creates a new button on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface\&.
+.PP
+See s3dw_button for information about callbacks which may be defined\&.

Modified: trunk/Documentation/manpages/man3/s3dw_delete.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_delete.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_delete.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_delete" "3" 
-.SH "NAME" 
-s3dw_delete \(em delete widget 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_delete\fP\fR( 
-\fB	s3dw_widget *\fBwidget\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Deletes any widget. Should be casted with S3DWIDGET().          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_delete
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_DELETE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_delete \- delete widget
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 17
+.BI "void s3dw_delete(s3dw_widget\ *" "widget" ");"
+.SH "DESCRIPTION"
+.PP
+Deletes any widget\&. Should be casted with S3DWIDGET()\&.

Modified: trunk/Documentation/manpages/man3/s3dw_focus.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_focus.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_focus.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_focus" "3" 
-.SH "NAME" 
-s3dw_focus \(em give widget focus 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_focus\fP\fR( 
-\fB	s3dw_widget *\fBfocus\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_focus
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_FOCUS" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_focus \- give widget focus
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 16
+.BI "void s3dw_focus(s3dw_widget\ *" "focus" ");"
+.SH "DESCRIPTION"
+.PP
+Gives focus to the widget, relative to its parent\&. That means you can focus a surface, and each surface can focus one of its element, e\&.g\&. an input field\&. Should be casted with S3DWIDGET()\&.

Modified: trunk/Documentation/manpages/man3/s3dw_getroot.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_getroot.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,25 +1,38 @@
-.TH "s3dw_getroot" "3" 
-.SH "NAME" 
-s3dw_getroot \(em get the root 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBs3dw_widget *\fBs3dw_getroot\fP\fR(\fBvoid\fR) 
-.fi 
-.SH "Description" 
-.PP 
-Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use s3dw_moveit() 
-.PP 
-.nf 
-s3dw_widget *root = s3dw_getroot(); 
-// move widget center to (0,5,0). upon creation, it's centered at (0,0,0), 
-// so this might move it up 
-root->x=0; 
-root->y=5; 
-root->z=0; 
-s3dw_moveit(root); 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_getroot
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_GETROOT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_getroot \- get the root
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 26
+.BI "s3dw_widget *s3dw_getroot(void);"
+.SH "DESCRIPTION"
+.PP
+Returns the root\-widget, which holds all the surfaces\&. E\&.g\&. if you want to move all widgets at once, adjust the root\-widgets x,y,z and use s3dw_moveit()
+.sp
+.RS 4
+.nf
+ s3dw_widget *root = s3dw_getroot();
+ // move widget center to (0,5,0)\&. upon creation, it\'s centered at (0,0,0),
+ // so this might move it up
+ root\->x=0;
+ root\->y=5;
+ root\->z=0;
+ s3dw_moveit(root);
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3dw_handle_click.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_handle_click.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_handle_click.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,33 +1,45 @@
-.TH "s3dw_handle_click" "3" 
-.SH "NAME" 
-s3dw_handle_click \(em handle click on widget 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBint \fBs3dw_handle_click\fP\fR( 
-\fB	const struct s3d_evt *\fBevent\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler. 
-.PP 
-.nf 
-// way 1: 
-s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dw_handle_click); 
- 
-// way 2: 
-... 
-void click(struct s3d_evt *evt) 
-{ 
-s3dw_handle_click(evt); 
-.... 
-// your own clickhandler code 
-... 
-} 
-.... 
-s3d_set_callback(S3D_EVENT_OBJ_CLICK,click); 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_handle_click
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_HANDLE_CLICK" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_handle_click \- handle click on widget
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 22
+.BI "int s3dw_handle_click(const\ struct\ s3d_evt\ *" "event" ");"
+.SH "DESCRIPTION"
+.PP
+If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler\-function or specify it itself as the clickhandler\&.
+.sp
+.RS 4
+.nf
+ // way 1:
+ s3d_set_callback(S3D_EVENT_OBJ_CLICK,s3dw_handle_click);
+
+ // way 2:
+ \&.\&.\&.
+ void click(struct s3d_evt *evt)
+ {
+         s3dw_handle_click(evt);
+         \&.\&.\&.\&.
+         // your own clickhandler code
+         \&.\&.\&.
+ }
+ \&.\&.\&.\&.
+ s3d_set_callback(S3D_EVENT_OBJ_CLICK,click);
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3dw_handle_key.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_handle_key.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_handle_key.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,33 +1,45 @@
-.TH "s3dw_handle_key" "3" 
-.SH "NAME" 
-s3dw_handle_key \(em handle key input on widget 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBint \fBs3dw_handle_key\fP\fR( 
-\fB	const struct s3d_evt *\fBevent\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;) 
-.PP 
-.nf 
-// way 1: 
-s3d_set_callback(S3D_EVENT_KEY,s3dw_handle_key); 
- 
-// way 2: 
-... 
-void key(struct s3d_evt *evt) 
-{ 
-s3dw_handle_key(evt); 
-.... 
-// your own keyhandler code 
-... 
-} 
-.... 
-s3d_set_callback(S3D_EVENT_KEY,key); 
-.fi 
-.PP 
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_handle_key
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_HANDLE_KEY" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_handle_key \- handle key input on widget
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 20
+.BI "int s3dw_handle_key(const\ struct\ s3d_evt\ *" "event" ");"
+.SH "DESCRIPTION"
+.PP
+This is somehow useful to call in your keyhandler functions if you want to have input\-boxes work\&. ;)
+.sp
+.RS 4
+.nf
+ // way 1:
+ s3d_set_callback(S3D_EVENT_KEY,s3dw_handle_key);
+
+ // way 2:
+ \&.\&.\&.
+ void key(struct s3d_evt *evt)
+ {
+         s3dw_handle_key(evt);
+         \&.\&.\&.\&.
+         // your own keyhandler code
+         \&.\&.\&.
+ }
+ \&.\&.\&.\&.
+ s3d_set_callback(S3D_EVENT_KEY,key);
+.fi
+.RE

Modified: trunk/Documentation/manpages/man3/s3dw_input_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_change_text.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_input_change_text.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3dw_input_change_text" "3" 
-.SH "NAME" 
-s3dw_input_change_text \(em changes the text of the input 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_input_change_text\fP\fR( 
-\fB	s3dw_input *\fBinput\fR\fR, 
-\fB	const char *\fBtext\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Change the text in the referenced input-box to the specified text.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_input_change_text
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_INPUT_CHANGE_TE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_input_change_text \- changes the text of the input
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 28
+.BI "void s3dw_input_change_text(s3dw_input\ *" "input" ", const\ char\ *" "text" ");"
+.SH "DESCRIPTION"
+.PP
+Change the text in the referenced input\-box to the specified text\&.

Modified: trunk/Documentation/manpages/man3/s3dw_input_gettext.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_input_gettext.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_input_gettext" "3" 
-.SH "NAME" 
-s3dw_input_gettext \(em get text of input 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBchar *\fBs3dw_input_gettext\fP\fR( 
-\fB	s3dw_input *\fBinput\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Returns the text which is currently entered in the referenced input-box.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_input_gettext
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_INPUT_GETTEXT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_input_gettext \- get text of input
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 25
+.BI "char *s3dw_input_gettext(s3dw_input\ *" "input" ");"
+.SH "DESCRIPTION"
+.PP
+Returns the text which is currently entered in the referenced input\-box\&.

Modified: trunk/Documentation/manpages/man3/s3dw_input_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_input_new.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,20 +1,28 @@
-.TH "s3dw_input_new" "3" 
-.SH "NAME" 
-s3dw_input_new \(em create a new input in the surface 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBs3dw_input *\fBs3dw_input_new\fP\fR( 
-\fB	const s3dw_surface *\fBsurface\fR\fR, 
-\fB	float \fBwidth\fR\fR, 
-\fB	float \fBposx\fR\fR, 
-\fB	float \fBposy\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Creates a new input-box on the surface with a input width of "width", the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with s3dw_input_change_text, and received with s3dw_input_gettext 
-.PP 
-See s3dw_input for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_input_new
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_INPUT_NEW" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_input_new \- create a new input in the surface
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 27
+.BI "s3dw_input *s3dw_input_new(const\ s3dw_surface\ *" "surface" ", float\ " "width" ", float\ " "posx" ", float\ " "posy" ");"
+.SH "DESCRIPTION"
+.PP
+Creates a new input\-box on the surface with a input width of "width", the upper left corner at (posx,posy) on the surface\&. The input\-box is empty on creation and can be change with s3dw_input_change_text, and received with s3dw_input_gettext
+.PP
+See s3dw_input for information about callbacks which may be defined\&.

Modified: trunk/Documentation/manpages/man3/s3dw_label_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_change_text.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_label_change_text.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3dw_label_change_text" "3" 
-.SH "NAME" 
-s3dw_label_change_text \(em change label text 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_label_change_text\fP\fR( 
-\fB	s3dw_label *\fBlabel\fR\fR, 
-\fB	const char *\fBtext\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Change the text in the referenced label to the specified text.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_label_change_text
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_LABEL_CHANGE_TE" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_label_change_text \- change label text
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 28
+.BI "void s3dw_label_change_text(s3dw_label\ *" "label" ", const\ char\ *" "text" ");"
+.SH "DESCRIPTION"
+.PP
+Change the text in the referenced label to the specified text\&.

Modified: trunk/Documentation/manpages/man3/s3dw_label_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_label_new.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,20 +1,28 @@
-.TH "s3dw_label_new" "3" 
-.SH "NAME" 
-s3dw_label_new \(em create a new label in the surface 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBs3dw_label *\fBs3dw_label_new\fP\fR( 
-\fB	const s3dw_surface *\fBsurface\fR\fR, 
-\fB	const char *\fBtext\fR\fR, 
-\fB	float \fBposx\fR\fR, 
-\fB	float \fBposy\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Creates a new label on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. 
-.PP 
-See s3dw_label for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_label_new
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_LABEL_NEW" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_label_new \- create a new label in the surface
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 27
+.BI "s3dw_label *s3dw_label_new(const\ s3dw_surface\ *" "surface" ", const\ char\ *" "text" ", float\ " "posx" ", float\ " "posy" ");"
+.SH "DESCRIPTION"
+.PP
+Creates a new label on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface\&.
+.PP
+See s3dw_label for information about callbacks which may be defined\&.

Modified: trunk/Documentation/manpages/man3/s3dw_moveit.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_moveit.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_moveit.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_moveit" "3" 
-.SH "NAME" 
-s3dw_moveit \(em apply widgets moving function 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_moveit\fP\fR( 
-\fB	s3dw_widget *\fBwidget\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Moves/translates the widget as you specified in it's private s3dw_widget structure. Should be casted with S3DWIDGET().          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_moveit
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_MOVEIT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_moveit \- apply widgets moving function
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 17
+.BI "void s3dw_moveit(s3dw_widget\ *" "widget" ");"
+.SH "DESCRIPTION"
+.PP
+Moves/translates the widget as you specified in it\'s private s3dw_widget structure\&. Should be casted with S3DWIDGET()\&.

Modified: trunk/Documentation/manpages/man3/s3dw_object_info.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_object_info.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_object_info.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_object_info" "3" 
-.SH "NAME" 
-s3dw_object_info \(em handle object info events 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBint \fBs3dw_object_info\fP\fR( 
-\fB	struct s3d_evt *\fBevent\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_object_info
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_OBJECT_INFO" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_object_info \- handle object info events
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 21
+.BI "int s3dw_object_info(struct\ s3d_evt\ *" "event" ");"
+.SH "DESCRIPTION"
+.PP
+This can be used to let s3dw handle S3D_EVENT_OBJ_INFO\-events\&. With this, s3dw can consider the camera position and makes things like following the camera possible\&.

Modified: trunk/Documentation/manpages/man3/s3dw_show.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_show.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_show.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_show" "3" 
-.SH "NAME" 
-s3dw_show \(em make widget visible 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_show\fP\fR( 
-\fB	s3dw_widget *\fBwidget\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Switches a widget visible. Should be casted with S3DWIDGET().          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_show
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_SHOW" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_show \- make widget visible
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 15
+.BI "void s3dw_show(s3dw_widget\ *" "widget" ");"
+.SH "DESCRIPTION"
+.PP
+Switches a widget visible\&. Should be casted with S3DWIDGET()\&.

Modified: trunk/Documentation/manpages/man3/s3dw_surface_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_surface_new.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,19 +1,28 @@
-.TH "s3dw_surface_new" "3" 
-.SH "NAME" 
-s3dw_surface_new \(em create a new surface 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBs3dw_surface *\fBs3dw_surface_new\fP\fR( 
-\fB	const char *\fBtitle\fR\fR, 
-\fB	float \fBwidth\fR\fR, 
-\fB	float \fBheight\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Creates a new surface (a new window) with title "title" and dimension "width" x "height". 
-.PP 
-See s3dw_surface for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_surface_new
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_SURFACE_NEW" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_surface_new \- create a new surface
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 31
+.BI "s3dw_surface *s3dw_surface_new(const\ char\ *" "title" ", float\ " "width" ", float\ " "height" ");"
+.SH "DESCRIPTION"
+.PP
+Creates a new surface (a new window) with title "title" and dimension "width" x "height"\&.
+.PP
+See s3dw_surface for information about callbacks which may be defined\&.

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_change_text.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,16 +1,26 @@
-.TH "s3dw_textbox_change_text" "3" 
-.SH "NAME" 
-s3dw_textbox_change_text \(em change text 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_textbox_change_text\fP\fR( 
-\fB	s3dw_textbox *\fBtextbox\fR\fR, 
-\fB	const char *\fBtext\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Change the text in the referenced textbox to the specified text.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_textbox_change_text
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_TEXTBOX_CHANGE_" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_textbox_change_text \- change text
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 30
+.BI "void s3dw_textbox_change_text(s3dw_textbox\ *" "textbox" ", const\ char\ *" "text" ");"
+.SH "DESCRIPTION"
+.PP
+Change the text in the referenced textbox to the specified text\&.

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_new.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_new.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,22 +1,28 @@
-.TH "s3dw_textbox_new" "3" 
-.SH "NAME" 
-s3dw_textbox_new \(em create a new textbox in the surface 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBs3dw_textbox *\fBs3dw_textbox_new\fP\fR( 
-\fB	const s3dw_surface *\fBsurface\fR\fR, 
-\fB	const char *\fBtext\fR\fR, 
-\fB	float \fBposx\fR\fR, 
-\fB	float \fBposy\fR\fR, 
-\fB	float \fBwidth\fR\fR, 
-\fB	float \fBheight\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Creates a new textbox on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield. 
-.PP 
-See s3dw_textbox for information about callbacks which may be defined.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_textbox_new
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_TEXTBOX_NEW" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_textbox_new \- create a new textbox in the surface
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 31
+.BI "s3dw_textbox *s3dw_textbox_new(const\ s3dw_surface\ *" "surface" ", const\ char\ *" "text" ", float\ " "posx" ", float\ " "posy" ", float\ " "width" ", float\ " "height" ");"
+.SH "DESCRIPTION"
+.PP
+Creates a new textbox on the surface, with "text" written on it and the upper left corner at (posx,posy) on the surface\&. Width and height define the size of the textbox including scrollbars which are rendered around the textfield\&.
+.PP
+See s3dw_textbox for information about callbacks which may be defined\&.

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrolldown.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_textbox_scrolldown" "3" 
-.SH "NAME" 
-s3dw_textbox_scrolldown \(em scroll text down 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_textbox_scrolldown\fP\fR( 
-\fB	s3dw_textbox *\fBtextbox\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Scrolls the text in the textbox down by one line, if possible.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_textbox_scrolldown
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_TEXTBOX_SCROLLD" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_textbox_scrolldown \- scroll text down
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 29
+.BI "void s3dw_textbox_scrolldown(s3dw_textbox\ *" "textbox" ");"
+.SH "DESCRIPTION"
+.PP
+Scrolls the text in the textbox down by one line, if possible\&.

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollleft.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_textbox_scrollleft" "3" 
-.SH "NAME" 
-s3dw_textbox_scrollleft \(em scroll text left 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_textbox_scrollleft\fP\fR( 
-\fB	s3dw_textbox *\fBtextbox\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Scrolls the text in the textbox to the left by one character, if possible.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_textbox_scrollleft
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_TEXTBOX_SCROLLL" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_textbox_scrollleft \- scroll text left
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 29
+.BI "void s3dw_textbox_scrollleft(s3dw_textbox\ *" "textbox" ");"
+.SH "DESCRIPTION"
+.PP
+Scrolls the text in the textbox to the left by one character, if possible\&.

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollright.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_textbox_scrollright" "3" 
-.SH "NAME" 
-s3dw_textbox_scrollright \(em scroll text right 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_textbox_scrollright\fP\fR( 
-\fB	s3dw_textbox *\fBtextbox\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Scrolls the text in the textbox to the right by one character, if possible.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_textbox_scrollright
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_TEXTBOX_SCROLLR" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_textbox_scrollright \- scroll text right
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 30
+.BI "void s3dw_textbox_scrollright(s3dw_textbox\ *" "textbox" ");"
+.SH "DESCRIPTION"
+.PP
+Scrolls the text in the textbox to the right by one character, if possible\&.

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollto.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,17 +1,26 @@
-.TH "s3dw_textbox_scrollto" "3" 
-.SH "NAME" 
-s3dw_textbox_scrollto \(em scroll text to position 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_textbox_scrollto\fP\fR( 
-\fB	s3dw_textbox *\fBtextbox\fR\fR, 
-\fB	int \fBx\fR\fR, 
-\fB	int \fBy\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_textbox_scrollto
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_TEXTBOX_SCROLLT" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_textbox_scrollto \- scroll text to position
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 27
+.BI "void s3dw_textbox_scrollto(s3dw_textbox\ *" "textbox" ", int\ " "x" ", int\ " "y" ");"
+.SH "DESCRIPTION"
+.PP
+Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox\&.

Modified: trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3
===================================================================
--- trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man3/s3dw_textbox_scrollup.3	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,15 +1,26 @@
-.TH "s3dw_textbox_scrollup" "3" 
-.SH "NAME" 
-s3dw_textbox_scrollup \(em scroll text up 
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.sp 1 
-\fBvoid \fBs3dw_textbox_scrollup\fP\fR( 
-\fB	s3dw_textbox *\fBtextbox\fR\fR); 
-.fi 
-.SH "Description" 
-.PP 
-Scrolls the text in the textbox up by one line, if possible.          
-.\" created by instant / docbook-to-man
+.\"     Title: s3dw_textbox_scrollup
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3DW_TEXTBOX_SCROLLU" "3" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_textbox_scrollup \- scroll text up
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.HP 27
+.BI "void s3dw_textbox_scrollup(s3dw_textbox\ *" "textbox" ");"
+.SH "DESCRIPTION"
+.PP
+Scrolls the text in the textbox up by one line, if possible\&.

Modified: trunk/Documentation/manpages/man9/mcp_object.9
===================================================================
--- trunk/Documentation/manpages/man9/mcp_object.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/mcp_object.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,27 +1,40 @@
-.TH "mcp_object" "9" 
-.SH "NAME" 
-struct mcp_object \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct mcp_object { 
-uint32_t object; 
-float trans_x; 
-float trans_y; 
-float trans_z; 
-float r; 
-char name; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-Deprecated 
-.PP 
-don't use, to be removed soon (use struct s3d_but_info). ;)      
-.\" created by instant / docbook-to-man
+.\"     Title: mcp_object
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "MCP_OBJECT" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+mcp_object
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct mcp_object {
+	uint32_t object;
+	float trans_x;
+	float trans_y;
+	float trans_z;
+	float r;
+	char name;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+Deprecated
+.PP
+don\'t use, to be removed soon (use struct s3d_but_info)\&. ;)

Modified: trunk/Documentation/manpages/man9/s3d_but_info.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_but_info.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3d_but_info.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,21 +1,34 @@
-.TH "s3d_but_info" "9" 
-.SH "NAME" 
-struct s3d_but_info \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct s3d_but_info { 
-uint8_t button; 
-uint8_t state; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-Can be used on the buffer of an event of type S3D_EVENT_MBUTTON.      
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_but_info
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_BUT_INFO" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_but_info
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct s3d_but_info {
+	uint8_t button;
+	uint8_t state;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+Can be used on the buffer of an event of type S3D_EVENT_MBUTTON\&.

Modified: trunk/Documentation/manpages/man9/s3d_evt.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_evt.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3d_evt.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,31 +1,56 @@
-.TH "s3d_evt" "9" 
-.SH "NAME" 
-struct s3d_evt \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct s3d_evt { 
-uint8_t event; 
-int length; 
-char *buf; 
-struct s3d_evt *next; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-This is the event information holder.      
-.IP "event" 10 
-gives the event type          
-.IP "length" 10 
-gives the length of the buffer *buf          
-.IP "buf" 10 
-is the pointer to the multiple purpose buffer, which will have more specific information about the object          
-.IP "next" 10 
-can be safely ignored ;)          
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_evt
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_EVT" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_evt
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct s3d_evt {
+	uint8_t event;
+	int length;
+	char *buf;
+	struct s3d_evt *next;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+This is the event information holder\&.
+.PP
+event
+.RS 4
+gives the event type
+.RE
+.PP
+length
+.RS 4
+gives the length of the buffer *buf
+.RE
+.PP
+buf
+.RS 4
+is the pointer to the multiple purpose buffer, which will have more specific information about the object
+.RE
+.PP
+next
+.RS 4
+can be safely ignored ;)
+.RE

Modified: trunk/Documentation/manpages/man9/s3d_key_event.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_key_event.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3d_key_event.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,21 +1,36 @@
-.TH "s3d_key_event" "9" 
-.SH "NAME" 
-struct s3d_key_event \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct s3d_key_event { 
-uint16_t keysym; 
-uint16_t unicode; 
-uint16_t modifier; 
-uint16_t state; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_key_event
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_KEY_EVENT" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_key_event
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct s3d_key_event {
+	uint16_t keysym;
+	uint16_t unicode;
+	uint16_t modifier;
+	uint16_t state;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+Can be used on the buffer of an event of type S3D_EVENT_KEY*\&.

Modified: trunk/Documentation/manpages/man9/s3d_obj_info.9
===================================================================
--- trunk/Documentation/manpages/man9/s3d_obj_info.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3d_obj_info.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,32 +1,45 @@
-.TH "s3d_obj_info" "9" 
-.SH "NAME" 
-struct s3d_obj_info \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3d.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct s3d_obj_info { 
-uint32_t object; 
-uint32_t flags; 
-float trans_x; 
-float trans_y; 
-float trans_z; 
-float rot_x; 
-float rot_y; 
-float rot_z; 
-float scale; 
-float r; 
-char name; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here. r is the radius of the convex sphere an object, which will also be interesting for the mcp. 
-.PP 
-Special objects like camera, pointer will have the "sys_" prefix in the name and will be named "pointer0", "pointer1" ... or "cam0", "cam1" ... For cam object, scale will contain the aspect ratio.      
-.\" created by instant / docbook-to-man
+.\"     Title: s3d_obj_info
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "S3D_OBJ_INFO" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3d_obj_info
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3d\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct s3d_obj_info {
+	uint32_t object;
+	uint32_t flags;
+	float trans_x;
+	float trans_y;
+	float trans_z;
+	float rot_x;
+	float rot_y;
+	float rot_z;
+	float scale;
+	float r;
+	char name;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+Can be used on the buffer of an event of type S3D_EVENT_OBJ_INFO\&. name will usually contain nothing for usual objects, but mcp objects will contain the applications names here\&. r is the radius of the convex sphere an object, which will also be interesting for the mcp\&.
+.PP
+Special objects like camera, pointer will have the "sys_" prefix in the name and will be named "pointer0", "pointer1" \&.\&.\&. or "cam0", "cam1" \&.\&.\&. For cam object, scale will contain the aspect ratio\&.

Modified: trunk/Documentation/manpages/man9/s3dw_button.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_button.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3dw_button.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,23 +1,36 @@
-.TH "_s3dw_button" "9" 
-.SH "NAME" 
-struct _s3dw_button \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct _s3dw_button { 
-s3dw_widget widget; 
-char *text; 
-uint32_t oid_text; 
-s3dw_callback onclick; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-The buttons is just a button as you would expect it in a 2D widget library. It only reacts on clicks.      
-.\" created by instant / docbook-to-man
+.\"     Title: _s3dw_button
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "_S3DW_BUTTON" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_button
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct _s3dw_button {
+	s3dw_widget widget;
+	char *text;
+	uint32_t oid_text;
+	s3dw_callback onclick;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+The buttons is just a button as you would expect it in a 2D widget library\&. It only reacts on clicks\&.

Modified: trunk/Documentation/manpages/man9/s3dw_input.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_input.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3dw_input.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,24 +1,37 @@
-.TH "_s3dw_input" "9" 
-.SH "NAME" 
-struct _s3dw_input \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct _s3dw_input { 
-s3dw_widget widget; 
-char *text; 
-uint32_t oid_text; 
-s3dw_callback onclick; 
-s3dw_callback onedit; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-The inputs is an input-field where a user may type things. onclick reacts on click in the field, onedit notifies you when someone writes in the field.      
-.\" created by instant / docbook-to-man
+.\"     Title: _s3dw_input
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "_S3DW_INPUT" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_input
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct _s3dw_input {
+	s3dw_widget widget;
+	char *text;
+	uint32_t oid_text;
+	s3dw_callback onclick;
+	s3dw_callback onedit;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+The inputs is an input\-field where a user may type things\&. onclick reacts on click in the field, onedit notifies you when someone writes in the field\&.

Modified: trunk/Documentation/manpages/man9/s3dw_label.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_label.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3dw_label.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,22 +1,35 @@
-.TH "_s3dw_label" "9" 
-.SH "NAME" 
-struct _s3dw_label \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct _s3dw_label { 
-s3dw_widget widget; 
-char *text; 
-s3dw_callback onclick; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-The labels is an label-field where a user may type things. onclick reacts on click in the field.      
-.\" created by instant / docbook-to-man
+.\"     Title: _s3dw_label
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "_S3DW_LABEL" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_label
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct _s3dw_label {
+	s3dw_widget widget;
+	char *text;
+	s3dw_callback onclick;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+The labels is an label\-field where a user may type things\&. onclick reacts on click in the field\&.

Modified: trunk/Documentation/manpages/man9/s3dw_scrollbar.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_scrollbar.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3dw_scrollbar.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,28 +1,41 @@
-.TH "_s3dw_scrollbar" "9" 
-.SH "NAME" 
-struct _s3dw_scrollbar \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct _s3dw_scrollbar { 
-s3dw_widget widget; 
-float pos; 
-float max; 
-int type; 
-int loid; 
-int roid; 
-int baroid; 
-s3dw_callback lonclick; 
-s3dw_callback ronclick; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-The Scrollbar should be placed around scrollable content. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon.      
-.\" created by instant / docbook-to-man
+.\"     Title: _s3dw_scrollbar
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "_S3DW_SCROLLBAR" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_scrollbar
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct _s3dw_scrollbar {
+	s3dw_widget widget;
+	float pos;
+	float max;
+	int type;
+	int loid;
+	int roid;
+	int baroid;
+	s3dw_callback lonclick;
+	s3dw_callback ronclick;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+The Scrollbar should be placed around scrollable content\&. Currently only the left and right icons are clickable (lonclick and ronclick callbacks), in vertical mode lonclick is the callback for the up icon, ronclick the callback for the down icon\&.

Modified: trunk/Documentation/manpages/man9/s3dw_style.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_style.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3dw_style.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,43 +1,80 @@
-.TH "_s3dw_style" "9" 
-.SH "NAME" 
-struct _s3dw_style \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct _s3dw_style { 
-char *name; 
-char *fontface; 
-float surface_mat; 
-float input_mat; 
-float inputback_mat; 
-float text_mat; 
-float title_mat; 
-float title_text_mat; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-With s3dw_style you can change the colors/materials of your widgets. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0.0 and 1.0) for ambience, specular and diffuse color.      
-.IP "name" 10 
-name of the style ... kind of redundant          
-.IP "fontface" 10 
-font face for all used fonts          
-.IP "surface_mat" 10 
-material for the surface background          
-.IP "input_mat" 10 
-material for button boxes and other widgets          
-.IP "inputback_mat" 10 
-material for input field background          
-.IP "text_mat" 10 
-material for the text on buttons and inputs          
-.IP "title_mat" 10 
-material for the title bar          
-.IP "title_text_mat" 10 
-material for the text on the title bar          
-.\" created by instant / docbook-to-man
+.\"     Title: _s3dw_style
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "_S3DW_STYLE" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_style
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct _s3dw_style {
+	char *name;
+	char *fontface;
+	float surface_mat;
+	float input_mat;
+	float inputback_mat;
+	float text_mat;
+	float title_mat;
+	float title_text_mat;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+With s3dw_style you can change the colors/materials of your widgets\&. materials are in the same as in s3d_push_materials_a, that means red,green,blue and alpha float values (between 0\&.0 and 1\&.0) for ambience, specular and diffuse color\&.
+.PP
+name
+.RS 4
+name of the style \&.\&.\&. kind of redundant
+.RE
+.PP
+fontface
+.RS 4
+font face for all used fonts
+.RE
+.PP
+surface_mat
+.RS 4
+material for the surface background
+.RE
+.PP
+input_mat
+.RS 4
+material for button boxes and other widgets
+.RE
+.PP
+inputback_mat
+.RS 4
+material for input field background
+.RE
+.PP
+text_mat
+.RS 4
+material for the text on buttons and inputs
+.RE
+.PP
+title_mat
+.RS 4
+material for the title bar
+.RE
+.PP
+title_text_mat
+.RS 4
+material for the text on the title bar
+.RE

Modified: trunk/Documentation/manpages/man9/s3dw_surface.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_surface.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3dw_surface.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,23 +1,36 @@
-.TH "_s3dw_surface" "9" 
-.SH "NAME" 
-struct _s3dw_surface \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct _s3dw_surface { 
-s3dw_widget widget; 
-uint32_t oid_title; 
-uint32_t oid_tbar; 
-char *title; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-A surface is the window of this widget library, holding all of our elements like buttons, input fields etc ...      
-.\" created by instant / docbook-to-man
+.\"     Title: _s3dw_surface
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "_S3DW_SURFACE" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_surface
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct _s3dw_surface {
+	s3dw_widget widget;
+	uint32_t oid_title;
+	uint32_t oid_tbar;
+	char *title;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+A surface is the window of this widget library, holding all of our elements like buttons, input fields etc \&.\&.\&.

Modified: trunk/Documentation/manpages/man9/s3dw_textbox.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_textbox.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3dw_textbox.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,28 +1,41 @@
-.TH "_s3dw_textbox" "9" 
-.SH "NAME" 
-struct _s3dw_textbox \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct _s3dw_textbox { 
-s3dw_widget widget; 
-s3dw_scrollbar *scroll_vertical; 
-s3dw_scrollbar *scroll_horizontal; 
-char *text; 
-int n_lineoids; 
-int *p_lineoids; 
-int window_x; 
-int window_y; 
-s3dw_callback onclick; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-A textbox shows some text with scrollbars to scroll around. It can currently only react to a click event.      
-.\" created by instant / docbook-to-man
+.\"     Title: _s3dw_textbox
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "_S3DW_TEXTBOX" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_textbox
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct _s3dw_textbox {
+	s3dw_widget widget;
+	s3dw_scrollbar *scroll_vertical;
+	s3dw_scrollbar *scroll_horizontal;
+	char *text;
+	int n_lineoids;
+	int *p_lineoids;
+	int window_x;
+	int window_y;
+	s3dw_callback onclick;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+A textbox shows some text with scrollbars to scroll around\&. It can currently only react to a click event\&.

Modified: trunk/Documentation/manpages/man9/s3dw_widget.9
===================================================================
--- trunk/Documentation/manpages/man9/s3dw_widget.9	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/manpages/man9/s3dw_widget.9	2008-09-27 11:44:08 UTC (rev 1009)
@@ -1,46 +1,59 @@
-.TH "_s3dw_widget" "9" 
-.SH "NAME" 
-struct _s3dw_widget \(em  
-.SH "SYNOPSIS" 
-.PP 
-.nf 
-#include <s3dw.h> 
-.fi 
-.SH "Structure Members" 
-.PP 
-.nf 
-struct _s3dw_widget { 
-int type; 
-s3dw_widget *parent; 
-s3dw_style *style; 
-int nobj; 
-s3dw_widget **pobj; 
-int focus; 
-int flags; 
-float ax; 
-float ay; 
-float az; 
-float as; 
-float arx; 
-float ary; 
-float arz; 
-float width; 
-float height; 
-uint32_t oid; 
-void *ptr; 
-float x; 
-float y; 
-float z; 
-float s; 
-float rx; 
-float ry; 
-float rz; 
-} 
-.fi 
-.PP 
-.SH "Description" 
-.PP 
-This is the most basic widget type, it contains all the "general" widget information. If you want to move a widget, you'd change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets "general" information. For typecast, you may use S3DWIDGET(). 
-.PP 
-The pointer ptr allows linking to user-specific data structures. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted.      
-.\" created by instant / docbook-to-man
+.\"     Title: _s3dw_widget
+.\"    Author:
+.\" Generator: DocBook XSL Stylesheets
+.\"
+.\"    Manual:
+.\"    Source:
+.\"
+.TH "_S3DW_WIDGET" "9" "" "" ""
+.\" disable hyphenation
+.nh
+.\" disable justification (adjust text to left margin only)
+.ad l
+.SH "NAME"
+s3dw_widget
+.SH "SYNOPSIS"
+.sp
+.ft B
+.nf
+#include <s3dw\&.h>
+.fi
+.ft
+.SH "STRUCTURE MEMBERS"
+.sp
+.RS 4
+.nf
+struct _s3dw_widget {
+	int type;
+	s3dw_widget *parent;
+	s3dw_style *style;
+	int nobj;
+	s3dw_widget **pobj;
+	int focus;
+	int flags;
+	float ax;
+	float ay;
+	float az;
+	float as;
+	float arx;
+	float ary;
+	float arz;
+	float width;
+	float height;
+	uint32_t oid;
+	void *ptr;
+	float x;
+	float y;
+	float z;
+	float s;
+	float rx;
+	float ry;
+	float rz;
+}
+.fi
+.RE
+.SH "DESCRIPTION"
+.PP
+This is the most basic widget type, it contains all the "general" widget information\&. If you want to move a widget, you\'d change x,y,z,s and rx,ry,rz and call s3dw_moveit to turn your action reality\&. Every other widget has this type as first entry, so a simple typecast to s3dw_widget will give you the widgets "general" information\&. For typecast, you may use S3DWIDGET()\&.
+.PP
+The pointer ptr allows linking to user\-specific data structures\&. That comes in handy if the widget is called back by an event, and the program must now find out on which data the user reacted\&.

Modified: trunk/Documentation/xml.doxygen
===================================================================
--- trunk/Documentation/xml.doxygen	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/Documentation/xml.doxygen	2008-09-27 11:44:08 UTC (rev 1009)
@@ -134,3 +134,5 @@
 # Configuration::additions related to the search engine   
 #---------------------------------------------------------------------------
 SEARCHENGINE           = NO
+GENERATE_HTML          = NO
+GENERATE_LATEX         = NO

Modified: trunk/libs3d/s3d.h
===================================================================
--- trunk/libs3d/s3d.h	2008-09-26 21:07:03 UTC (rev 1008)
+++ trunk/libs3d/s3d.h	2008-09-27 11:44:08 UTC (rev 1009)
@@ -110,6 +110,9 @@
 	uint8_t button; /* 0 = left, 1 = middle, 2 = right */
 	uint8_t state;  /* 0 = down, 1 = up, 2 = moving */
 };
+/**
+ * Can be used on the buffer of an event of type S3D_EVENT_KEY*.
+ */
 struct s3d_key_event {
 	uint16_t keysym;  /* the symbol, use this with s3d_keysym.h */
 	uint16_t unicode;  /* the unicode or "actually typed" character */



From lazhur at mail.berlios.de  Sat Sep 27 13:44:39 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Sat, 27 Sep 2008 13:44:39 +0200
Subject: [S3d-svn] r1010 - in trunk/Documentation: . libs3d libs3dw
Message-ID: <200809271144.m8RBid7v015425@sheep.berlios.de>

Author: lazhur
Date: 2008-09-27 13:44:37 +0200 (Sat, 27 Sep 2008)
New Revision: 1010

Modified:
   trunk/Documentation/extractdefinitions.py
   trunk/Documentation/libs3d/functions.docbook
   trunk/Documentation/libs3dw/functions.docbook
Log:
Use ANSI style functions declaration instead of K&R in documentation

Modified: trunk/Documentation/extractdefinitions.py
===================================================================
--- trunk/Documentation/extractdefinitions.py	2008-09-27 11:44:08 UTC (rev 1009)
+++ trunk/Documentation/extractdefinitions.py	2008-09-27 11:44:37 UTC (rev 1010)
@@ -304,6 +304,19 @@
 	return t
 
 """
+Create new processing instruction with tag name node_type and add it to father
+"""
+def create_append_pi(father, node_type, instruction):
+	if father.ownerDocument:
+		t = father.ownerDocument.createProcessingInstruction(node_type, instruction)
+	else:
+		# no father -> so it must be a document
+		t = father.createProcessingInstruction(node_type, instruction)
+
+	father.appendChild(t)
+	return t
+
+"""
 Create new text node with text and add it to father
 """
 def create_append_text(father, text):
@@ -461,6 +474,8 @@
 		# prototype
 		funcprototype = create_append(funcsynopsis, 'funcprototype')
 
+		dbhtml = create_append_pi(funcsynopsis, 'dbhtml', "funcsynopsis-style='ansi'")
+
 		funcdef = create_append(funcprototype, 'funcdef')
 		create_append_text(funcdef, function['return'])
 		if function['return'][-1:] != "*":
@@ -625,6 +640,8 @@
 		# prototype
 		funcprototype = create_append(funcsynopsis, 'funcprototype')
 
+		dbhtml = create_append_pi(funcsynopsis, 'dbhtml', "funcsynopsis-style='ansi'")
+
 		funcdef = create_append(funcprototype, 'funcdef')
 		create_append_text(funcdef, function['return'])
 		if function['return'][-1:] != "*":

Modified: trunk/Documentation/libs3d/functions.docbook
===================================================================
--- trunk/Documentation/libs3d/functions.docbook	2008-09-27 11:44:08 UTC (rev 1009)
+++ trunk/Documentation/libs3d/functions.docbook	2008-09-27 11:44:37 UTC (rev 1010)
@@ -1,5 +1,5 @@
-<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><void/></funcprototype></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in <link linkend="s3d_init">s3d_init</link>())         </para></sect2>
-<sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in server initialization. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
+<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><void/></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Prints the possible parameter for the client library (which can be passed in <link linkend="s3d_init">s3d_init</link>())         </para></sect2>
+<sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter></paramdef><paramdef>char ***<parameter>argv</parameter></paramdef><paramdef>const char *<parameter>name</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in server initialization. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
  {
          if (!<link linkend="s3d_init">s3d_init</link>(&amp;argc, &amp;argv, &quot;Hello world&quot;))
          {
@@ -9,8 +9,8 @@
          return(0);
  }
 </programlisting></sect2>
-<sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><void/></funcprototype></funcsynopsis><para>Closes the connection and clears the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2>
-<sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
+<sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><void/></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Closes the connection and clears the event-stack. It can also be used to leave the <link linkend="s3d_mainloop">s3d_mainloop</link>().         </para></sect2>
+<sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Takes a function as argument. It will loop this function until a quit-event is received. You can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
  {
          usleep(1000); // sleep 1 ms in every cycle
  }
@@ -18,16 +18,16 @@
 
  <link linkend="s3d_mainloop">s3d_mainloop</link>(mainloop());
 </programlisting></sect2>
-<sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a vertex onto the vertex stack. Make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2>
-<sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Push some vertices from an array. that's much better for performing than using <link linkend="s3d_push_vertex">s3d_push_vertex</link>() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
+<sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Pushes a vertex onto the vertex stack. Make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2>
+<sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Push some vertices from an array. that's much better for performing than using <link linkend="s3d_push_vertex">s3d_push_vertex</link>() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
                       1.0, 2.0, 3.0,
                       3.0, 2.0, 1.0};
  <link linkend="s3d_push_vertices">s3d_push_vertices</link>(object, vertices, 3); // pushing 3 vertices
 </programlisting></sect2>
-<sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. The material properties are given in rgb (red/green/blue) !
 color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. The diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2>
-<sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the latest pushed material, overwriting the current value with the specified one. See <link linkend="s3d_pep_materials_a">s3d_pep_materials_a</link> if you want to pep more mat!
 erials.         </para></sect2>
-<sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Same as <lin!
 k linkend="s3d_push_material">s3d_push_material</link>, but color has alpha value added. Use <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() if you have a lot of materials to push.         </para></sect2>
-<sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes a buffer of materials. Those materials are in the format float[n*12], with
+<sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. The material propertie!
 s are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. The specular color is the color which is directly reflected from the light source. The diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2>
+<sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Overwriting the latest pushed material, overwriting the current value with the specified one. See <link linkend="s3d_pep_materials_a">s3d_pep_materials_!
 a</link> if you want to pep more materials.         </para></sect2>
+<sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi!
 '?></funcsynopsis><para>Same as <link linkend="s3d_push_material">s3d_push_material</link>, but color has alpha value added. Use <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() if you have a lot of materials to push.         </para></sect2>
+<sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Pushes a buffer of materials. Those materials are in the format float[n*12], with
 </para><para>mbuf[n*12 + 0-3] - ambience</para><para>mbuf[n*12 + 4-7] - specular</para><para>mbuf[n *12 + 8-11] - diffusion values
 </para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy <link linkend="s3d_push_material_a">s3d_push_material_a</link>() function.</para><programlisting> // each line has r,g,b,a value
  float bla[24]=
@@ -40,10 +40,10 @@
 
  <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>(object, bla, 2); // push a red and a cyan material
 </programlisting></sect2>
-<sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>Overwriting the!
  latest pushed material, overwriting the current value with the specified one, with alpha value in contrast to <link linkend="s3d_pep_material">s3d_pep_material</link> See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> if you want to pep more materials.         </para></sect2>
-<sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alters the last n pushed materials. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() for more information how mbuf should look like. Use <link linkend="s3d_pep_material_a">s3d_pep_material_a</link>() if you only want to alter the latest material.         </para></sect2>
-<sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Loads n materials starting from index position start into the material stack. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> for more informations about the values in mbuf.         </para></sect2>
-<sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one polygon on the polygon stack of the object. It takes 3 vertex-index numbers and one material material-index-no. as argument.</para><programlisting> int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
+<sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>amb_r</parameter></paramdef><paramdef>float <parameter>amb_g</parameter></paramdef><paramdef>float <parameter>amb_b</parameter></paramdef><paramdef>float <parameter>amb_a</parameter></paramdef><paramdef>float <parameter>spec_r</parameter></paramdef><paramdef>float <parameter>spec_g</parameter></paramdef><paramdef>float <parameter>spec_b</parameter></paramdef><paramdef>float <parameter>spec_a</parameter></paramdef><paramdef>float <parameter>diff_r</parameter></paramdef><paramdef>float <parameter>diff_g</parameter></paramdef><paramdef>float <parameter>diff_b</parameter></paramdef><paramdef>float <parameter>diff_a</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?>!
 </funcsynopsis><para>Overwriting the latest pushed material, overwriting the current value with the specified one, with alpha value in contrast to <link linkend="s3d_pep_material">s3d_pep_material</link> See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> if you want to pep more materials.         </para></sect2>
+<sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Alters the last n pushed materials. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link>() for more information how mbuf should look like. Use <link linkend="s3d_pep_material_a">s3d_pep_material_a</link>() if you only want to alter the latest material.         </para></sect2>
+<sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>mbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Loads n materials starting from index position start into the material stack. See <link linkend="s3d_push_materials_a">s3d_push_materials_a</link> for more informations about the values in mbuf.         </para></sect2>
+<sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>v3</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Push one polygon on the polygon stack of the object. It takes 3 vertex-index numbers and one material material-index-no. as argument.</para><programlisting> int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 1.0, 0.0, 0.0);
@@ -51,7 +51,7 @@
  <link linkend="s3d_push_polygon">s3d_push_polygon</link>(oid, 0, 1, 2, 0);
  // this will create a red polygon
 </programlisting></sect2>
-<sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>pbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
+<sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>pbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>As for vertices, you can push arrays of polygons to have greater performance. The pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
  int oid = <link linkend="s3d_new_object">s3d_new_object</link>();   // create a new object
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 0.0, 0.0);
  <link linkend="s3d_push_vertex">s3d_push_vertex</link>(oid, 0.0, 1.0, 0.0);
@@ -60,75 +60,75 @@
  <link linkend="s3d_push_polygons">s3d_push_polygons</link>(oid, pbuf, 1);
  // push one polygon with the pbuf data
 </programlisting></sect2>
-<sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Push one line on the line stack of the object. It takes 2 vertex-index-no, and one material material-index-no. as argument. If you have a lot of lines to push, use <link linkend="s3d_push_lines">s3d_push_lines</link>()         </para></sect2>
-<sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pushing n lines on the line stack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in <link linkend="s3d_push_line">s3d_push_line</link>().         </para></sect2>
-<sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>Adds a new texture with height w and height h on the texture stack.         </para></sect2>
-<sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2>
-<sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2>
-<sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2>
-<sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2>
-<sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2>
-<sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2>
-<sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 vertices for each line so that makes 6 float values per line in total.         </para></sect2>
-<sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 vertices for each Polygon so that makes 9 float values per Polygon in total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.        !
  </para></sect2>
-<sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coor!
 ds</link>()         </para></sect2>
-<sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord</link>()         </para></sect2>
-<sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with <link linkend="s3d_push_texture">s3d_push_texture</link>()         </para></sect2>
-<sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2>
-<sect2 id="s3d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2>
-<sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest pushed line, overwriting with the supplied values.         </para></sect2>
-<sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2>
-<sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_line_normals">s3d_pep_line_normals</link>(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2>
-<sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_normals">s3d_pep_polygon_normals</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
-<sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
-<sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parameter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>This will load an 32bit rgba image supplied in data at position xpos,ypos of the texture tex. The image has the width w and height h. This can be used to update only parts of the texture. It's no problem to supply big textures, as the image will be sent to server in fragments. Of course, you will have created the texture with <link linkend="s3d_p!
 ush_texture">s3d_push_texture</link>, have an material assigned to the texture with <link linkend="s3d_pep_material_texture">s3d_pep_material_texture</link>() and have your polygons set sane polygon texture coords using <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord</link>().         </para></sect2>
-<sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><void/></funcprototype></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+<sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>v1</parameter></paramdef><paramdef>uint32_t <parameter>v2</parameter></paramdef><paramdef>uint32_t <parameter>material</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Push one line on the line stack of the object. It takes 2 vertex-index-no, and one material material-index-no. as argument. If you have a lot of lines to push, use <link linkend="s3d_push_lines">s3d_push_lines</link>()         </para></sect2>
+<sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Pushing n lines on the line stack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in <link linkend="s3d_push_line">s3d_push_line</link>().         </para></sect2>
+<sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Adds a new texture with height w and height h on the texture stack.         </para></sect2>
+<sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint16_t *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2>
+<sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2>
+<sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2>
+<sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Deletes the latest n material from the material stack of the object.         </para></sect2>
+<sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2>
+<sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Deletes the latest n lines from the line stack of the object.         </para></sect2>
+<sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 vertices for each line so that makes 6 float values per line in total.         </para></sect2>
+<sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 vertices for each Polygon so that makes 9 float values per Polygon in total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by !
 the 3 points of the polygon.         </para></sect2>
+<sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x1</parameter></paramdef><paramdef>float <parameter>y1</parameter></paramdef><paramdef>float <parameter>x2</parameter></paramdef><paramdef>float <parameter>y2</parameter></paramdef><paramdef>float <parameter>x3</parameter></paramdef><paramdef>float <parameter>y3</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use <link linkend="s3d_pep_polygon_!
 tex_coords">s3d_pep_polygon_tex_coords</link>()         </para></sect2>
+<sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord</link>()         </para></sect2>
+<sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with <link linkend="s3d_push_texture">s3d_push_texture</link>()         </para></sect2>
+<sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2>
+<sect2 id="s3d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>vbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2>
+<sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>int <parameter>v1</parameter></paramdef><paramdef>int <parameter>v2</parameter></paramdef><paramdef>int <parameter>material</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Alter the latest pushed line, overwriting with the supplied values.         </para></sect2>
+<sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const uint32_t *<parameter>lbuf</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2>
+<sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Just as <link linkend="s3d_pep_line_normals">s3d_pep_line_normals</link>(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2>
+<sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>nbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_normals">s3d_pep_polygon_normals</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
+<sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>const float *<parameter>tbuf</parameter></paramdef><paramdef>uint32_t <parameter>start</parameter></paramdef><paramdef>uint16_t <parameter>n</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Just as <link linkend="s3d_pep_polygon_tex_coords">s3d_pep_polygon_tex_coords</link>(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2>
+<sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>tex</parameter></paramdef><paramdef>uint16_t <parameter>xpos</parameter></paramdef><paramdef>uint16_t <parameter>ypos</parameter></paramdef><paramdef>uint16_t <parameter>w</parameter></paramdef><paramdef>uint16_t <parameter>h</parameter></paramdef><paramdef>const uint8_t *<parameter>data</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This will load an 32bit rgba image supplied in data at position xpos,ypos of the texture tex. The image has the width w and height h. This can be used to update only parts of the texture. It's no problem to supply big textures, as the image will be sent to server in fragments. Of course, you will have created t!
 he texture with <link linkend="s3d_push_texture">s3d_push_texture</link>, have an material assigned to the texture with <link linkend="s3d_pep_material_texture">s3d_pep_material_texture</link>() and have your polygons set sane polygon texture coords using <link linkend="s3d_pep_polygon_tex_coord">s3d_pep_polygon_tex_coord</link>().         </para></sect2>
+<sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><void/></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
         </para></warning></sect2>
-<sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2>
-<sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Clones an already existing object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2>
-<sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from <link linkend="s3d_clone">s3d_clone</link> before.         </para></sect2>
-<sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&quot; if you move the table around in space. It will also rotate with the table etc.         </para></sect2>
-<sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2>
-<sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
+<sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Deletes the object referenced by oid.         </para></sect2>
+<sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Clones an already existing object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2>
+<sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef><paramdef>int <parameter>toid</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from <link linkend="s3d_clone">s3d_clone</link> before.         </para></sect2>
+<sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter></paramdef><paramdef>int <parameter>oid_to</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&quot; if you move the table around in space. It will also rotate with the table etc.         </para></sect2>
+<sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Remove the link of object oid to its target.         </para></sect2>
+<sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
         </para></warning></sect2>
-<sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>Turn some flags off for object.         </para></sect2>
-<sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.</para><warning><para>Translation is absolute, not relative!
+<sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>uint32_t <parameter>flags</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Turn some flags off for object.         </para></sect2>
+<sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.</para><warning><para>Translation is absolute, not relative!
 </para></warning><programlisting> <link linkend="s3d_translate">s3d_translate</link>(object, 2, 0, 0);
  <link linkend="s3d_translate">s3d_translate</link>(object, 4, 0, 0);
  // object will end up at 4,0,0 and not 6,0,0!!
 </programlisting></sect2>
-<sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>Rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes it any clearer ;)</para><w!
 arning><para>Rotate is absolute, not relative!
+<sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>x</parameter></paramdef><paramdef>float <parameter>y</parameter></paramdef><paramdef>float <parameter>z</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if t!
 hat makes it any clearer ;)</para><warning><para>Rotate is absolute, not relative!
 </para></warning><programlisting> <link linkend="s3d_rotate">s3d_rotate</link>(object, 90,  0, 0);
  <link linkend="s3d_rotate">s3d_rotate</link>(object, 180, 0, 0);
  // object will be rotated 180 degrees around the x-axis, not 270 degress!
 </programlisting></sect2>
-<sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! <link linkend="s3d_scale">s3d_scale</link> is also absolute, not relative! 
+<sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter></paramdef><paramdef>float <parameter>s</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! <link linkend="s3d_scale">s3d_scale</link> is also absolute, not relative! 
         </para></warning></sect2>
-<sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype></funcsynopsis><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
+<sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
         </para></warning></sect2>
-<sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef><paramdef>char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2>
-<sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>This selects a font for the <link linkend="s3d_draw_string">s3d_draw_string</link>() function.</para><warning><para>Of course, you won't forget to toggle it visible, won't you?
+<sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef><paramdef>char **<parameter>pointer</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2>
+<sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This selects a font for the <link linkend="s3d_draw_string">s3d_draw_string</link>() function.</para><warning><para>Of course, you won't forget to toggle it visible, won't you?
 </para></warning><programlisting> <link linkend="s3d_select_font">s3d_select_font</link>(&quot;vera&quot;); // will use the vera font face
 </programlisting></sect2>
-<sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef><paramdef>float *<parameter>xlen</parameter></paramdef></funcprototype></funcsynopsis><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
+<sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef><paramdef>float *<parameter>xlen</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
  float len;
  <link linkend="s3d_select_font">s3d_select_font</link>(&quot;vera&quot;);
  <link linkend="s3d_draw_string">s3d_draw_string</link>(str, len);
 
  // not interested in the length? do that: <link linkend="s3d_draw_string">s3d_draw_string</link>(str, NULL);
 </programlisting></sect2>
-<sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2>
-<sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
-<sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
-<sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
-<sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
-<sect2 id="s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
-<sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
-<sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2>
-<sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_pop_event</function></funcdef><void/></funcprototype></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
-<sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Finds the latest occurrence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
-<sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).         </para></sect2>
-<sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init</link>()
+<sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2>
+<sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[]</paramdef><paramdef>const float <parameter>cam_pos</parameter>[]</paramdef><paramdef>float *<parameter>angle_rad</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[]</paramdef><paramdef>const float <parameter>vector2</parameter>[]</paramdef><paramdef>float <parameter>result_vector</parameter>[]</paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2>
+<sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2>
+<sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_pop_event</function></funcdef><void/></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
+<sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt *<function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Finds the latest occurrence of an event, giving the event type as argument. Returns a pointer to struct <link linkend="structs3d_evt">s3d_evt</link>.         </para></sect2>
+<sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from <link linkend="s3d_find_event">s3d_find_event</link>).         </para></sect2>
+<sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef><paramdef>s3d_cb <parameter>func</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling <link linkend="s3d_init">s3d_init</link>()
 </para></warning><programlisting> #include &lt;inttypes.h&gt;
 
  void obj_click(struct <link linkend="structs3d_evt">s3d_evt</link> event)
@@ -139,13 +139,13 @@
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_NEW_OBJECT, obj_click);
  // this will tell you when a object got clicked
 </programlisting></sect2>
-<sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Clears the callback which is associated with the event.         </para></sect2>
-<sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2>
-<sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the Callback-function of the event.</para><programlisting> struct <link linkend="structs3d_evt">s3d_evt</link> e;
+<sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Clears the callback which is associated with the event.         </para></sect2>
+<sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2>
+<sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Returns the Callback-function of the event.</para><programlisting> struct <link linkend="structs3d_evt">s3d_evt</link> e;
  ...
  <link linkend="s3d_get_callback">s3d_get_callback</link>(S3D_EVENT_KEY)(e);
  // will call the key-handling function with argument e.
 </programlisting></sect2>
-<sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><void/></funcprototype></funcsynopsis><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2>
-<sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.         </para></sect2>
-<sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><void/></funcprototype></funcsynopsis><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>
+<sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><void/></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2>
+<sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.         </para></sect2>
+<sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><void/></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>

Modified: trunk/Documentation/libs3dw/functions.docbook
===================================================================
--- trunk/Documentation/libs3dw/functions.docbook	2008-09-27 11:44:08 UTC (rev 1009)
+++ trunk/Documentation/libs3dw/functions.docbook	2008-09-27 11:44:37 UTC (rev 1010)
@@ -1,12 +1,12 @@
-<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button *<function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_button">s3dw_button</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label *<function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_label">s3dw_label</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input *<function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new input-box on the surface with a input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with <link linkend="s3dw_input_change_text">s3dw_input_change_text</link>, and received with <link linkend="s3dw_input_gettext">s3dw_input_gettext</link></para><para>See <link linkend="s3dw_input">s3dw_input</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox *<function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See <link linkend="s3dw_textbox">s3dw_textbox</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char *<function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2>
-<sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced input-box to the specified text.         </para></sect2>
-<sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2>
-<sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface *<function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype></funcsynopsis><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.         </para></sect2>
-<sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget *<function>s3dw_getroot</function></funcdef><void/></funcprototype></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s3dw_getroot">s3dw_getroot</link>();
+<sect2 id="s3dw_button_new"><title>s3dw_button_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_button *<function>s3dw_button_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Creates a new button on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_button">s3dw_button</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_label_new"><title>s3dw_label_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_label *<function>s3dw_label_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Creates a new label on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface.</para><para>See <link linkend="s3dw_label">s3dw_label</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_input_new"><title>s3dw_input_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_input *<function>s3dw_input_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Creates a new input-box on the surface with a input width of &quot;width&quot;, the upper left corner at (posx,posy) on the surface. The input-box is empty on creation and can be change with <link linkend="s3dw_input_change_text">s3dw_input_change_text</link>, and received with <link linkend="s3dw_input_gettext">s3dw_input_gettext</link></para><para>See <link linkend="s3dw_input">s3dw_input</link> for information about callbacks which may be defined.         </para>!
 </sect2>
+<sect2 id="s3dw_textbox_new"><title>s3dw_textbox_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_textbox *<function>s3dw_textbox_new</function></funcdef><paramdef>const s3dw_surface *<parameter>surface</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef><paramdef>float <parameter>posx</parameter></paramdef><paramdef>float <parameter>posy</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Creates a new textbox on the surface, with &quot;text&quot; written on it and the upper left corner at (posx,posy) on the surface. Width and height define the size of the textbox including scrollbars which are rendered around the textfield.</para><para>See <link linkend="s3dw_textbox">s3dw_textbox</link> for information about callbacks which ma!
 y be defined.         </para></sect2>
+<sect2 id="s3dw_input_gettext"><title>s3dw_input_gettext</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>char *<function>s3dw_input_gettext</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Returns the text which is currently entered in the referenced input-box.         </para></sect2>
+<sect2 id="s3dw_input_change_text"><title>s3dw_input_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_input_change_text</function></funcdef><paramdef>s3dw_input *<parameter>input</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Change the text in the referenced input-box to the specified text.         </para></sect2>
+<sect2 id="s3dw_label_change_text"><title>s3dw_label_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_label_change_text</function></funcdef><paramdef>s3dw_label *<parameter>label</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Change the text in the referenced label to the specified text.         </para></sect2>
+<sect2 id="s3dw_surface_new"><title>s3dw_surface_new</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_surface *<function>s3dw_surface_new</function></funcdef><paramdef>const char *<parameter>title</parameter></paramdef><paramdef>float <parameter>width</parameter></paramdef><paramdef>float <parameter>height</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Creates a new surface (a new window) with title &quot;title&quot; and dimension &quot;width&quot; x &quot;height&quot;.</para><para>See <link linkend="s3dw_surface">s3dw_surface</link> for information about callbacks which may be defined.         </para></sect2>
+<sect2 id="s3dw_getroot"><title>s3dw_getroot</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3dw_widget *<function>s3dw_getroot</function></funcdef><void/></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Returns the root-widget, which holds all the surfaces. E.g. if you want to move all widgets at once, adjust the root-widgets x,y,z and use <link linkend="s3dw_moveit">s3dw_moveit</link>()</para><programlisting> <link linkend="s3dw_widget">s3dw_widget</link> *root = <link linkend="s3dw_getroot">s3dw_getroot</link>();
  // move widget center to (0,5,0). upon creation, it's centered at (0,0,0),
  // so this might move it up
  root-&gt;x=0;
@@ -14,17 +14,17 @@
  root-&gt;z=0;
  <link linkend="s3dw_moveit">s3dw_moveit</link>(root);
 </programlisting></sect2>
-<sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Moves/translates the widget as you specified in it's private <link linkend="s3dw_widget">s3dw_widget</link> structure. Should be casted with S3DWIDGET().         </para></sect2>
-<sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2>
-<sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2>
-<sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2>
-<sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox up by one line, if possible.         </para></sect2>
-<sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2>
-<sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2>
-<sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scrollright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2>
-<sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2>
-<sect2 id="s3dw_textbox_change_text"><title>s3dw_textbox_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2>
-<sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler.</para><programlisting> // way 1:
+<sect2 id="s3dw_moveit"><title>s3dw_moveit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_moveit</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Moves/translates the widget as you specified in it's private <link linkend="s3dw_widget">s3dw_widget</link> structure. Should be casted with S3DWIDGET().         </para></sect2>
+<sect2 id="s3dw_delete"><title>s3dw_delete</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_delete</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Deletes any widget. Should be casted with S3DWIDGET().         </para></sect2>
+<sect2 id="s3dw_show"><title>s3dw_show</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_show</function></funcdef><paramdef>s3dw_widget *<parameter>widget</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Switches a widget visible. Should be casted with S3DWIDGET().         </para></sect2>
+<sect2 id="s3dw_focus"><title>s3dw_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_focus</function></funcdef><paramdef>s3dw_widget *<parameter>focus</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Gives focus to the widget, relative to its parent. That means you can focus a surface, and each surface can focus one of its element, e.g. an input field. Should be casted with S3DWIDGET().         </para></sect2>
+<sect2 id="s3dw_textbox_scrollup"><title>s3dw_textbox_scrollup</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollup</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Scrolls the text in the textbox up by one line, if possible.         </para></sect2>
+<sect2 id="s3dw_textbox_scrolldown"><title>s3dw_textbox_scrolldown</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrolldown</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Scrolls the text in the textbox down by one line, if possible.         </para></sect2>
+<sect2 id="s3dw_textbox_scrollleft"><title>s3dw_textbox_scrollleft</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollleft</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Scrolls the text in the textbox to the left by one character, if possible.         </para></sect2>
+<sect2 id="s3dw_textbox_scrollright"><title>s3dw_textbox_scrollright</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollright</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Scrolls the text in the textbox to the right by one character, if possible.         </para></sect2>
+<sect2 id="s3dw_textbox_scrollto"><title>s3dw_textbox_scrollto</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_scrollto</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>int <parameter>x</parameter></paramdef><paramdef>int <parameter>y</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Scrolls the text in the textbox so that the character in row y, column x is in the top left corner of the textbox.         </para></sect2>
+<sect2 id="s3dw_textbox_change_text"><title>s3dw_textbox_change_text</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_textbox_change_text</function></funcdef><paramdef>s3dw_textbox *<parameter>textbox</parameter></paramdef><paramdef>const char *<parameter>text</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Change the text in the referenced textbox to the specified text.         </para></sect2>
+<sect2 id="s3dw_handle_click"><title>s3dw_handle_click</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_click</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>If you want your widgets on mouseclicks (believe me, you want that), you have to call this either in your clickhandler-function or specify it itself as the clickhandler.</para><programlisting> // way 1:
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_OBJ_CLICK,<link linkend="s3dw_handle_click">s3dw_handle_click</link>);
 
  // way 2:
@@ -39,7 +39,7 @@
  ....
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_OBJ_CLICK,click);
 </programlisting></sect2>
-<sect2 id="s3dw_handle_key"><title>s3dw_handle_key</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_key</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;)</para><programlisting> // way 1:
+<sect2 id="s3dw_handle_key"><title>s3dw_handle_key</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_handle_key</function></funcdef><paramdef>const struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This is somehow useful to call in your keyhandler functions if you want to have input-boxes work. ;)</para><programlisting> // way 1:
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_KEY,<link linkend="s3dw_handle_key">s3dw_handle_key</link>);
 
  // way 2:
@@ -54,8 +54,8 @@
  ....
  <link linkend="s3d_set_callback">s3d_set_callback</link>(S3D_EVENT_KEY,key);
 </programlisting></sect2>
-<sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2>
-<sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><void/></funcprototype></funcsynopsis><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
+<sect2 id="s3dw_object_info"><title>s3dw_object_info</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3dw_object_info</function></funcdef><paramdef>struct s3d_evt *<parameter>event</parameter></paramdef></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>This can be used to let s3dw handle S3D_EVENT_OBJ_INFO-events. With this, s3dw can consider the camera position and makes things like following the camera possible.         </para></sect2>
+<sect2 id="s3dw_ani_mate"><title>s3dw_ani_mate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3dw.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3dw_ani_mate</function></funcdef><void/></funcprototype><?dbhtml funcsynopsis-style='ansi'?></funcsynopsis><para>Just call this in your mainloop if you want some nice window sliding animations. it's somewhat bloating, but you don't want to miss it ;)</para><programlisting> #include &lt;time.h&gt;   // nanosleep()
  static struct timespec t={0.33*1000*1000}; // 33 mili seconds
  void mainloop()
  {



From lazhur at mail.berlios.de  Sat Sep 27 20:30:22 2008
From: lazhur at mail.berlios.de (lazhur at BerliOS)
Date: Sat, 27 Sep 2008 20:30:22 +0200
Subject: [S3d-svn] r1011 - trunk/experimental/olsrs3d
Message-ID: <200809271830.m8RIUMCx007108@sheep.berlios.de>

Author: lazhur
Date: 2008-09-27 20:30:19 +0200 (Sat, 27 Sep 2008)
New Revision: 1011

Modified:
   trunk/experimental/olsrs3d/olsrs3d.h
Log:
olsrs3d: mark not returning functions with __noreturn__

The gcc feature for functions that will definitely not return should help the
static analyzer and the optimizer slightly.

Modified: trunk/experimental/olsrs3d/olsrs3d.h
===================================================================
--- trunk/experimental/olsrs3d/olsrs3d.h	2008-09-27 11:44:37 UTC (rev 1010)
+++ trunk/experimental/olsrs3d/olsrs3d.h	2008-09-27 18:30:19 UTC (rev 1011)
@@ -38,6 +38,11 @@
 #define OLSRS3DUNUSED(x) x
 #endif
 #endif
+#ifdef __GNUC_MINOR__
+#define NO_RETURN  __attribute__ ((__noreturn__))
+#else
+#define NO_RETURN
+#endif
 
 extern int Debug;
 
@@ -77,7 +82,7 @@
 int net_main(void);
 int net_quit(void);
 /* main */
-void out_of_mem(void);
+void out_of_mem(void) NO_RETURN;
 void print_etx(void);
 float dist(float p1[], float p2[]);
 void window_error(const char *msg);



