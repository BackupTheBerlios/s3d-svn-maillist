From nichtsnutz at mail.berlios.de  Thu Aug  3 21:18:49 2006
From: nichtsnutz at mail.berlios.de (nichtsnutz at BerliOS)
Date: Thu, 3 Aug 2006 21:18:49 +0200
Subject: [S3d-svn] r374 - trunk/libs3d
Message-ID: <200608031918.k73JIn8f013026@sheep.berlios.de>

Author: nichtsnutz
Date: 2006-08-03 21:18:41 +0200 (Thu, 03 Aug 2006)
New Revision: 374

Modified:
   trunk/libs3d/3dsread.c
Log:
ugly fix for crash on arch linux

Modified: trunk/libs3d/3dsread.c
===================================================================
--- trunk/libs3d/3dsread.c	2006-07-04 07:25:33 UTC (rev 373)
+++ trunk/libs3d/3dsread.c	2006-08-03 19:18:41 UTC (rev 374)
@@ -533,7 +533,8 @@
 			}
 			if (smooth_list!=NULL)
 			{
-				free(smooth_list);smooth_list=NULL;
+				/*FIXME: free(smooth_list);*/
+				smooth_list=NULL;
 			}
 			if (nbuf!=NULL)
 			{



From dotslash at mail.berlios.de  Sat Aug  5 21:54:55 2006
From: dotslash at mail.berlios.de (dotslash at BerliOS)
Date: Sat, 5 Aug 2006 21:54:55 +0200
Subject: [S3d-svn] r375 - in trunk: . libs3d
Message-ID: <200608051954.k75JstQK004848@sheep.berlios.de>

Author: dotslash
Date: 2006-08-05 21:54:52 +0200 (Sat, 05 Aug 2006)
New Revision: 375

Modified:
   trunk/
   trunk/libs3d/fontselect.c
   trunk/libs3d/freetype.c
Log:
 r887 at balthasar:  dotslash | 2006-08-05 21:54:26 +0200
 - debugging messages in fontselect and stuff, cleaned error report



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:875
   + bf2c72c7-850b-0410-b9e4-c1fddb578f10:/s3d-trunk:887

Modified: trunk/libs3d/fontselect.c
===================================================================
--- trunk/libs3d/fontselect.c	2006-08-03 19:18:41 UTC (rev 374)
+++ trunk/libs3d/fontselect.c	2006-08-05 19:54:52 UTC (rev 375)
@@ -47,6 +47,8 @@
   pattern = FcNameParse((FcChar8 *)mask);
   FcConfigSubstitute(0,pattern,FcMatchPattern);
   FcDefaultSubstitute(pattern);
+  s3dprintf(LOW,"Looking for font %s",mask);
+
   if (!(match=FcFontMatch(0,pattern,0))) 
 	return NULL;
   if (FcPatternGetString(match,FC_FILE,0,&file)!=FcResultMatch)

Modified: trunk/libs3d/freetype.c
===================================================================
--- trunk/libs3d/freetype.c	2006-08-03 19:18:41 UTC (rev 374)
+++ trunk/libs3d/freetype.c	2006-08-05 19:54:52 UTC (rev 375)
@@ -30,6 +30,19 @@
 #include <math.h>			/*  atan2() */
 #include "ft2build.h"
 #include FT_FREETYPE_H
+#undef __FTERRORS_H__                
+#define FT_ERRORDEF( e, v, s )  { e, s },                    
+#define FT_ERROR_START_LIST     {                           
+#define FT_ERROR_END_LIST       { 0, 0 } };                
+                                                          
+const struct                                             
+{                                                       
+    int          err_code;                             
+    const char*  err_msg                                        
+} ft_errors[] =                                                
+                                                              
+#include FT_ERRORS_H                                         
+
 #ifndef CALLBACK 
 #define CALLBACK
 #endif
@@ -75,20 +88,13 @@
 	}
 	face_init=0;
 	error= FT_New_Memory_Face(library,(unsigned char *)memory_font,memory_font_size,0,&face);
-	switch (error)
+	if (error)
 	{
-		case 0:
-				face_init=1;
-				break;
-		case FT_Err_Unknown_File_Format:
-				errds(HIGH,"s3d_ft_load_font()","bad font file format");
-				return(-1);
-				break;
-		default:
-				errds(HIGH,"s3d_ft_load_font()","couldn't load font for some reason (error %d)",error);
-				return(-1);
-				break;
+		errds(VHIGH,"s3d_ft_load_font():FT_New_Memory_Face","can't load font : (%d) %s",ft_errors[error].err_code,ft_errors[error].err_msg);
+		return(-1);
 	}
+	s3dprintf(LOW,"Load Font successful ...");
+	face_init=1;
 	return(0);
 }
 
@@ -110,6 +116,7 @@
 }
 
 
+
 /* renders a character with seidels algorithm and stores it in the tess_buf for later
  * usage */
 int _s3d_add_tessbuf(unsigned short a)
@@ -126,14 +133,16 @@
 	float area[SEI_SS];
 	double vertices[SEI_SS+1][2];
 	double nvertices[SEI_SS+1][2];
+	FT_Error error;
 	
-
-	if (FT_Load_Char(face,a,	FT_LOAD_NO_BITMAP|FT_LOAD_NO_SCALE))
+	error= FT_Load_Char(face,a, FT_LOAD_NO_BITMAP|FT_LOAD_NO_SCALE);
+	if (error)
 	{
-		errds(VHIGH,"s3d_add_tessbuf():FT_Load_Char()","can't load character");
+		
+		errds(VHIGH,"_s3d_add_tessbuf():FT_Load_Char()","can't load character %d : (%d) %s",a,ft_errors[error].err_code,ft_errors[error].err_msg);
 		return(-1);
 	} 
-	s3dprintf(VLOW,"[T]riangulating character %c",a);
+	s3dprintf(LOW,"[T]riangulating character %c",a);
 	norm=1.0/face->glyph->metrics.vertAdvance;
 	ch=a;
 	v_off=0;
@@ -329,6 +338,7 @@
 	 /*  yse (system-specific?!) font grabber */
 	if (((c=s3d_findfont(path))!=NULL))
 	{
+		s3dprintf(LOW,"Loading Font %s ... ",c);
 		_s3d_clear_tessbuf(); /* free and clear the tessbuf */
 		p=&memory_font;
 		if ((memory_font_size=s3d_open_file(c,p))>0)
@@ -341,6 +351,8 @@
 				memory_font=oldfont;
 				memory_font_size=oldsize;
 			}
+		} else {
+			errds(VHIGH,"s3d_select_font()","Could not open fontfile %s",c);
 		}
 	}
 	return(-1);



